window.playingAudio = 0;

var sf_sdk = {
  createLiveChatWidget: function(sfId){
    var css = sfPixel.analyticsRoot + 'chat/sf-chat.css' + sfPixel.version;

    if(typeof sfPixel.ruleDetails !== 'undefined' && typeof sfPixel.ruleDetails.genericPixel !== 'undefined' && sfPixel.ruleDetails.genericPixel !== ''){
      window.sfLivePid = sfPixel.ruleDetails.genericPixel;
    } else {
      window.sfLivePid = window.sfpid;
    }

    var data = "nid="+window.sfId;
    var xhr = new XMLHttpRequest();
    var url = "https://europe-west1-ecstatic-fiber-261015.cloudfunctions.net/getSf?nid="+sfId;
    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded");

    var link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = css;
    document.getElementsByTagName("head")[0].appendChild(link);
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4 && xhr.status === 200) {
        var responseData = JSON.parse(xhr.response);

        if(responseData === '403'){
          if (sf_sdk.isDev()) {
            sfPixel.loadScript2('/servicechat/js/' + sfId, loadingHelper);
          } else {
            sfPixel.loadScript2('https://app.serviceform.com/servicechat/js/' + sfId, loadingHelper);
          }
        } else {
          window.serviceChatData = responseData;
          loadingHelper();
        }
        function loadingHelper() {

          // Dynamics.
          if(typeof window.sfDynamicServiceChatImage !== 'undefined' && window.sfDynamicServiceChatImage !== '') {
            window.serviceChatData.serviceform.serviceChatImage = window.sfDynamicServiceChatImage;
          }

          if(typeof window.sfIconImage !== 'undefined' && window.sfIconImage !== '') {
            window.serviceChatData.serviceform.serviceChatIcon = window.sfIconImage;
          }
          if(typeof window.sfAvatarImage !== 'undefined' && window.sfAvatarImage !== '') {
            window.serviceChatData.serviceform.serviceChatImage = window.sfAvatarImage;
          }
          if(typeof window.sfLogoImage !== 'undefined' && window.sfLogoImage !== '') {
            window.serviceChatData.serviceform.logo = window.sfLogoImage;
          }

          sf_sdk.backArrow = '<div class="sf-arrow-back"><img class="sf-icon-back" src="https://cdn.serviceform.com/serviceform-tools/chat/icons/left-arrow.svg"></div>';

          if (typeof serviceChatData === 'undefined' && typeof serviceChatData.serviceform.knowledgebase === 'undefined') {
            var knowledgebase = {
              "categories": [{
                "name": "Example category",
                "articles": [
                  {
                    "name": "Example article",
                    "keywords": "",
                    "content": "Example content"
                  }
                ]}
              ]
            }
            serviceChatData.serviceform.knowledgebase = knowledgebase;
          }
          if(typeof window.serviceChatDynamicEmail !== 'undefined' && window.serviceChatDynamicEmail !== '') {
            window.serviceChatData.serviceform.emailCopy = window.serviceChatDynamicEmail;
          }

          if(typeof window.serviceChatDynamicName !== 'undefined' && window.serviceChatDynamicName !== '') {
            window.serviceChatData.serviceform.serviceChatName = window.serviceChatDynamicName;
          }

          if(typeof window.sfDynamicLivechatTeam !== 'undefined' && window.sfDynamicLivechatTeam !== '') {
            window.serviceChatData.serviceform.defaultTeam = window.sfDynamicLivechatTeam;
          }

          if(typeof window.sfDynamicLivechatAgent !== 'undefined' && window.sfDynamicLivechatAgent !== '') {
            window.serviceChatData.serviceform.defaultAgent = window.sfDynamicLivechatAgent;
          }

          if(typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '') {
            window.serviceChatData.serviceform.chatPushSettingsQuestion = window.sfDynamicStartPage;
          }

          if(typeof window.serviceChatDynamicContent !== 'undefined' && window.serviceChatDynamicContent.length > 0) {
            var dynamicContent = window.serviceChatDynamicContent;
            for (var i = 0; i < dynamicContent.length; i++) {
              if (typeof dynamicContent[i] !== 'undefined') {
                var key = dynamicContent[i].key;
                var content = dynamicContent[i].background;
                if (typeof serviceChatData.serviceform.questions[key] !== 'undefined') {
                  if(serviceChatData.serviceform.questions[key].background !== 'slideshow') {
                    serviceChatData.serviceform.questions[key].background = content;
                  }
                }
              }
            }
          }

          if(typeof window.sfLoadCustomData !== 'undefined' && window.sfLoadCustomData !== ''){
            var id = window.sfLoadCustomData;
            var data = "id=" + id;

            var xhr8 = new XMLHttpRequest();

            xhr8.addEventListener("readystatechange", function () {
              if (this.readyState === 4) {
                var response = xhr8.response;
                response = JSON.parse(response);

                if(response !== '403'){
                  if(typeof response.options !== 'undefined'){
                    sf_sdk.addOptionWithFallback(response.options);
                  }
                }
              }
            });

            xhr8.open("POST", "https://us-central1-ecstatic-fiber-261015.cloudfunctions.net/getCustomData");
            xhr8.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");

            xhr8.send(data);
          }

          if (window.serviceChatData.serviceform.language !== 'en') {
            sfPixel.loadScript2(sfPixel.analyticsRoot + 'chat/sf-chat-translations.js', sf_sdk.startLiveChat);
          } else {
            sf_sdk.startLiveChat();
          }

          window.sfDocTitle = document.title;

          if(typeof window.sfDevMode !== 'undefined' && window.sfDevMode === 1){
            if(typeof initBuilder === 'function'){
              initBuilder();
            }
          }

          var sfPopupMobileDisabled = '';
          if(typeof serviceChatData.serviceform.popupMobileOptionsDisabled !== 'undefined' && serviceChatData.serviceform.popupMobileOptionsDisabled === '1' ){
            sfPopupMobileDisabled = " @media all and (max-width: 600px) {\n" +
                "          .sf-push .sf-options {\n" +
                "              display: none !important;\n" +
                "            }\n" +
                "          }\n" +
                "          }";
          }
          var html = '<style>' + sfPopupMobileDisabled + '</style>';

          sf_sdk.addCss(serviceChatData.serviceform);

          var div = document.querySelector('html');
          div.insertAdjacentHTML('beforeend', html);
        }
      }
    }

    xhr.send(data);
  },
  isDev: function(){
    var data = 0;
    if (window.location.href.indexOf("-servicehire.pantheonsite") != -1 ||
      window.location.href.indexOf("dev.netstory") != -1) {
      data = 1;
    }
    return data;
  },
  lightOrDark(color) {

    // Variables for red, green, blue values
    var r, g, b, hsp;

    // Check the format of the color, HEX or RGB?
    if (color.match(/^rgb/)) {

      // If HEX --> store the red, green, blue values in separate variables
      color = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);

      r = color[1];
      g = color[2];
      b = color[3];
    }
    else {

      // If RGB --> Convert it to HEX: http://gist.github.com/983661
      color = +("0x" + color.slice(1).replace(
        color.length < 5 && /./g, '$&$&'));

      r = color >> 16;
      g = color >> 8 & 255;
      b = color & 255;
    }

    // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
    hsp = Math.sqrt(
      0.299 * (r * r) +
      0.587 * (g * g) +
      0.114 * (b * b)
    );

    // Using the HSP value, determine whether the color is light or dark
    if (hsp > 210) {

      return 'light';
    }
    else {

      return 'dark';
    }
  },
  addLoader(element){
    var html = '<div id="sf-loader">' +
      '    <div class="loader"></div>' +
      '  </div>';

    element.insertAdjacentHTML('beforeend', html);
  },
  removeLoader(){
    var element = document.querySelectorAll('#sf-loader');
    if(element) {
      for (var i = 0; i < element.length; i++) {
        sfPixel.sfRemoveElement(element[i]);
      }
    }
  },
  tS: function(string){
    var language = window.serviceChatData.serviceform.language;
    if(language !== 'en') {
      var translations = window.sfTranslations;
      if(typeof window.sfTranslations !== 'undefined'){
        for (var k = 0; k < translations.length; k++) {
          var english = translations[k].en;
          if (english === string) {
            if (typeof translations[k][language] !== 'undefined') {
              return translations[k][language];
            }
          }
        }
      }

      return string;
    } else {
      return string;
    }
  },
  alterBackground: function(page){
    var previousPage = page;
    var nextPage = page + 1;
    var questions = serviceChatData.serviceform.questions;

    var bgType = questions[page].backgroundType;
    var bg = questions[page].background;

    if(typeof bg !== 'undefined' && bg !== ''){
      if(bg.indexOf("matterport") > -1) {

        var html = '<iframe width="100%" id="showcase_iframe" height="100%" src="' + bg + '" frameborder="0"></iframe>';

        sfPixel.loadScript2('https://static.matterport.com/showcase-sdk/2.0.1-0-g64e7e88/sdk.js', doNow);

        function doNow() {
          var inlineBg = document.querySelector('#sf-inline-image');
          if (inlineBg) {
            inlineBg.innerHTML = html;

            var iframe = document.getElementById('showcase_iframe');

            iframe.addEventListener('load', showcaseLoader, true);

            function loadedShowcaseHandler(mpSdk) {
              window.mpSdk = mpSdk;
            }

            function showcaseLoader() {
              window.showcase = window.MP_SDK.connect(
                iframe, // Obtained earlier
                '8f42bbed521548f9b87b209432275b33', // Your API key
                '3.2' // SDK version you are using
                // Use the latest version you can for your app
              )
                .then(function(mpSdk) {
                  // Model.Event.MODEL_LOADED
                  loadedShowcaseHandler(mpSdk);
                })
            };

            inlineBg.style.background = '';
          }
        }
      }
      else if(bg.indexOf("vimeo") > -1){

        setTimeout(function(){

          html = '<div id="myVideo"></div><style>#myVideo iframe{height:100vh; width: 100%;}</style>';

          var inlineBg = document.querySelector('#sf-inline-image');
          if (inlineBg) {
            inlineBg.innerHTML = html;
          }

          sfPixel.loadScript2('https://player.vimeo.com/api/player.js', doNow);

          function doNow() {
            var options = {
              url: bg,
              width: "100%",
              height: "100%",
              autoplay: 1
            };

            window.videoPlayer = new Vimeo.Player('myVideo', options);

            videoPlayer.on('play', function () {
            });

          }
        }, 5000);

      }
      else if(bg.indexOf("slideshow") > -1){

        html = '<div id="sfSliderBack"></div><div id="sfSlider"></div>';

        var inlineBg = document.querySelector('#sf-inline-image');
        if (inlineBg) {
          inlineBg.innerHTML = html;

          this.style.background = 'url(' + window.sfSlider[0].url + ')';

          window.sfCountOne = 1;
          inlineBg.addEventListener('click', function(){
            window.sfCountOne = sfCountOne + 1;
            if(typeof window.sfSlider[sfCountOne] === 'undefined'){
              window.sfCountOne = 0;
            }
            if(window.sfSlider[sfCountOne]) {
              this.style.background = 'url(' + window.sfSlider[sfCountOne].url + ')';
            }
          });

        }
      }
      else if(bg.indexOf("wec360") > -1 || bg.indexOf("360.") > -1 || bg.indexOf("iframe") > -1){
        var html = '<iframe width="100%" id="showcase_iframe" height="100%" src="' + bg + '" frameborder="0"></iframe>';

        var inlineBg = document.querySelector('#sf-inline-image');
        if (inlineBg) {
          inlineBg.innerHTML = html;
        }
      }
      else if(bg.indexOf("youtube") > -1) {
        var html = '<iframe width="100%" height="100%" src="'+bg+'" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen start=225&end=268></iframe>';

        var inlineBg = document.querySelector('#sf-inline-image');
        if (inlineBg) {
          inlineBg.innerHTML = html;
        }
      }
      else if (typeof bgType !== 'undefined' && bgType.indexOf("video") > -1){
        var html = '<video playsinline autoplay muted loop class="fullscreen-bg__video">' +
          '<source src= ' +bg+ ' type="video/mp4">' +
          '</video>';
        var inlineBg = document.querySelector('#sf-inline-image');
        if(inlineBg){
          inlineBg.innerHTML = html;
          inlineBg.style.background = '';
        }
      } else {
        var inlineBg = document.querySelector('#sf-inline-image');
        if (inlineBg) {
          html = '<div id="sfSliderBack"></div><div id="sfSlider"></div>';
          inlineBg.innerHTML = html;
          inlineBg.style.background = 'url(' + bg + ')';

          window.sfCountOne = sfChatFlow.page;
          inlineBg.addEventListener('click', function(){
            window.sfCountOne = sfCountOne + 1;
            if(typeof window.sfSlider[sfCountOne] === 'undefined'){
              window.sfCountOne = 0;
            }
            this.style.background = 'url(' + window.sfSlider[sfCountOne].url + ')';
          });
        }
      }
    }
  },
  sendOneTimePhoneNotification: function(){

    if(typeof window.sfDynamicPhoneNumber !== 'undefined' && typeof window.sfLivechatNotified === 'undefined') {
      var cH = serviceChatData.serviceform;

      var cid = window.sfLiveChatCid;
      window.sfLivechatNotified = 1;

      var conversationSetup = {
        "cid": cid,
        "uid": cH.uid,
        "pid": window.sfpid,
        "phone": window.sfDynamicPhoneNumber
      }

      var url = "https://app.serviceform.com/conversations/send-phone";

      var data = JSON.stringify(conversationSetup);
      var xhr = new XMLHttpRequest();

      xhr.open("POST", url, true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
      xhr.send(data);
    }
  },
  sendNotifyAgentOnly: function(type, customId, livechatTeam){
    var cH = serviceChatData.serviceform;
    var cid = window.sfLiveChatCid;

    var conversationSetup = {
      "aid": livechatTeam,
      "cid": cid,
      "uid": cH.uid,
      "website": document.location.href,
      "pid": window.sfLivePid,
      "custom_type": type,
      "custom_id": customId
    }

    sf_sdk.markLiveChat(livechatTeam);
    sf_sdk.livechatStart();

    var dev = sf_sdk.isDev();
    var url = "https://app.serviceform.com/conversations/send-livechat-agent-only";

    if (dev) {
      url = "/conversations/send-livechat-agent-only";
    }

    var data = JSON.stringify(conversationSetup);
    var xhr = new XMLHttpRequest();

    if (typeof window.sfLivechatNotified === 'undefined' && window.live !== 0) {
      window.sfLivechatNotified = 1;
      xhr.open("POST", url, true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
      xhr.send(data);

      sf_sdka.database().ref('/livechat/'+window.sfLivePid+'/'+window.sfLiveChatCid).update({
        livechatNotified: 1,
        lastEvent: 'started'
      });

      sf_sdk.newStatistics('livechat');
    }
  },
  sendNotifyLiveChat: function (livechatTeam, livechatAgent, type) {
    if(typeof window.sfDevMode === 'undefined') {
      var cH = serviceChatData.serviceform;

      if (type === 'stop') {
        window.sfChatLivechat = 1;
      }

      if (typeof livechatTeam === 'undefined' || livechatTeam === '') {
        livechatTeam = "0";

        if (typeof serviceChatData.serviceform.defaultTeam !== 'undefined') {
          livechatTeam = serviceChatData.serviceform.defaultTeam;
        }
      }

      sf_sdk.markLiveChat(livechatTeam);
      sf_sdk.livechatStart();

      var page = sfChatFlow.page - 1;
      var cid = window.sfLiveChatCid;

      var uid = cH.uid;
      if(typeof sfPixel.ruleDetails !== 'undefined' && typeof sfPixel.ruleDetails.genericUid !== 'undefined' && sfPixel.genericUid !== '') {
        uid = sfPixel.ruleDetails.genericUid;
      }

      var conversationSetup = {
        "aid": livechatTeam,
        "cid": cid,
        "secondNotification": 0,
        "uid": uid,
        "website": document.location.href,
        "pid": window.sfLivePid
      }

      if (livechatTeam !== '') {
        conversationSetup['teamId'] = livechatTeam;
      }

      if (typeof serviceChatData.serviceform.defaultAgent !== 'undefined') {
        conversationSetup['agentId'] = serviceChatData.serviceform.defaultAgent;
      } else if (typeof livechatAgent !== 'undefined' && livechatAgent !== '') {
        conversationSetup['agentId'] = livechatAgent;
      }

      var dev = sf_sdk.isDev();

      var url = "https://app.serviceform.com/conversations/send-live-notification";

      if (cH.whitelabel === 'slt') {
        url = "https://bizchat.slt.lk/conversations/send-live-notification";
      } else if (cH.whitelabel === 'addbot') {
        url = "https://app.addbot.io/conversations/send-live-notification";
      } else if (cH.whitelabel === 'netstory') {
        url = "https://netstory.io/conversations/send-live-notification";
      } else if (cH.whitelabel === 'popvakuutus') {
        url = "https://popvakuutus.serviceform.com/conversations/send-live-notification";
      } else if (cH.whitelabel === 'firstteam') {
        url = "https://agent.firstteam.com/conversations/send-live-notification";
      }

      if (dev) {
        var url = "/conversations/send-live-notification";
      }

      var data = JSON.stringify(conversationSetup);
      var xhr = new XMLHttpRequest();

      if (typeof window.sfLivechatNotified === 'undefined' && window.live !== 0) {
        window.sfLivechatNotified = 1;
        xhr.open("POST", url, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
        xhr.send(data);

        sf_sdka.database().ref('/livechat/'+window.sfLivePid+'/'+window.sfLiveChatCid).update({
          livechatNotified: 1,
          lastEvent: 'started'
        });

        sf_sdk.newStatistics('livechat');
      }

      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          if (typeof serviceChatData.serviceform.notifyEverything === 'undefined' || serviceChatData.serviceform.notifyEverything === 0 || serviceChatData.serviceform.notifyEverything === "0") {
            var cH = serviceChatData.serviceform;
            console.log(xhr.responseText);
            var json = '';

            if(xhr.responseText && xhr.responseText !== '') {
              json = xhr.responseText;
            }

            if (type === 'stop') {
              if (json.count > 0) {
                setTimeout(function () {
                  if (typeof serviceChatData.serviceform.livechatAskEmail !== 'undefined' && serviceChatData.serviceform.livechatAskEmail === '1') {
                    if (json > 1) {
                      sf_sdk.addAdminAnswer(sf_sdk.tS('While waiting, could I get your email in case we get disconnected?'));
                    } else {
                      sf_sdk.addAdminAnswer(sf_sdk.tS('While waiting, could I get your email in case we get disconnected?'));
                    }
                  }
                  sf_sdk.addTextWriteBox();
                }, 1000);
              } else {
                setTimeout(function () {
                  var page = sfChatFlow.page - 1;
                  if (typeof serviceChatData.serviceform.livechatAskEmail !== 'undefined' && serviceChatData.serviceform.livechatAskEmail === '1') {
                    sf_sdk.addAdminAnswer(sf_sdk.tS('No live chat agents available right now. Can you leave your email so our team can be in touch?'));
                    sf_sdk.addTextWriteBox();
                  }

                }, 1000);
              }
            }
          }
        }
      }

      // Send secondary notifiction.
      setTimeout(function () {
        if(!sf_sdk.agentJoined()){
          conversationSetup['secondNotification'] = true;
          var data2 = JSON.stringify(conversationSetup);
          var url = "https://app.serviceform.com/conversations/send-live-notification";
          var xhr2 = new XMLHttpRequest();
          xhr2.open("POST", url, true);
          xhr2.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          xhr2.send(data2);

          if(typeof sfPixel.ruleDetails !== 'undefined' && typeof sfPixel.ruleDetails.livechatFallback !== 'undefined'){
            var seconds = sfPixel.ruleDetails.livechatFallback;
            seconds = parseInt(seconds);
            setTimeout(function (){
              if(window.sfAgentJoined){
              } else {
                if(sf_sdka){
                  sf_sdka.database().ref('/livechat/'+window.sfLivePid+'/'+window.sfLiveChatCid).update({
                    freeForAll: 1,
                    ffa: 1
                  });
                }
              }
            }, seconds * 1000)
          }
        }
      }, 15000)
    } else {
      // console.log("Would notify your team.");
    }
  },
  startLiveChat: function() {
    var s = serviceChatData.serviceform;

    sf_sdk.loaded = 0;
    sf_sdk.allowWriting = 1;
    var referrer = sfPixel.stats.referrer;
    if (typeof referrer === 'undefined' || referrer === '') {
      referrer = document.referrer;
      if(referrer === ''){
        referrer = 'direct';
      }

      referrer = referrer + ' -> ' + window.location.href;
    }

    var customerName = '';
    var customerEmail = '';

    if (typeof window.sfDynamicCustomerName !== 'undefined') {
      customerName = window.sfDynamicCustomerName;
    }

    if (typeof window.sfDynamicCustomerEmail !== 'undefined') {
      customerEmail = window.sfDynamicCustomerEmail;
    }

    var customerPhone = '';
    if (typeof window.sfDynamicCustomerPhone !== 'undefined') {
      customerPhone = window.sfDynamicCustomerPhone;
    }

    var seconds = 1;
    if(sfPixel && sfPixel.stats && sfPixel.stats.seconds) {
      seconds = sfPixel.stats.seconds;
    }

    window.sfChatFlow = {
      agent: 'https://serviceform-file-storage.ams3.digitaloceanspaces.com/mWFAB2bk_1587062661_jarkko.jpg',
      tokens: [],
      nid: s.nid,
      uid: s.uid,
      amount: 0,
      pid: window.sfpid,
      seconds: seconds,
      summaryItems: [],
      hiddenTokens: [],
      referrer: referrer,
      website: document.location.href,
      submissionWebsite: document.location.href,
      customerEmail: customerEmail,
      customerName: customerName,
      customerPhone: customerPhone,
      source: 'chatbot_v2'
    }


    if (typeof window.sfDynamicCustomerName !== 'undefined') {
      var summaryItemAnswer = {
        "answer": [{
          "answer": window.sfDynamicCustomerName,
          "amount": ''
        }],
        "label": "Name",
        "question": 0,
        "price": ''
      }

      window.sfChatFlow.summaryItems.push(summaryItemAnswer);
    }

    if (typeof window.sfDynamicCustomerEmail !== 'undefined') {
      var summaryItemAnswer = {
        "answer": [{
          "answer": window.sfDynamicCustomerEmail,
          "amount": ''
        }],
        "label": "Email",
        "question": 0,
        "price": ''
      }

      window.sfChatFlow.summaryItems.push(summaryItemAnswer);
    }

    if (typeof window.sfDynamicCustomerPhone !== 'undefined') {
      var summaryItemAnswer = {
        "answer": [{
          "answer": window.sfDynamicCustomerPhone,
          "amount": ''
        }],
        "label": "Phone",
        "question": 0,
        "price": ''
      }

      window.sfChatFlow.summaryItems.push(summaryItemAnswer);
    }

    if (typeof window.sfDynamicField !== 'undefined') {
      var summaryItemAnswer = {
        "answer": [{
          "answer": window.sfDynamicField.value,
          "amount": ''
        }],
        "label": window.sfDynamicField.name,
        "question": 0,
        "price": ''
      }

      window.sfChatFlow.summaryItems.push(summaryItemAnswer);
    }

    if (typeof window.sfDynamicField2 !== 'undefined') {
      var summaryItemAnswer = {
        "answer": [{
          "answer": window.sfDynamicField2.value,
          "amount": ''
        }],
        "label": window.sfDynamicField2.name,
        "question": 0,
        "price": ''
      }

      window.sfChatFlow.summaryItems.push(summaryItemAnswer);
    }

    var inlineType = 0;
    if(typeof window.sfType !== 'undefined' && window.sfType === 'inline-load'){
      inlineType = 1;
    }

    if (typeof s.emailCopy !== 'undefined') {
      if (s.emailCopy !== '') {
        window.sfChatFlow.emailCopy = s.emailCopy;
      }
    }

    // Onload submissions.
    window.onbeforeunload = function () {
      if (typeof window.sfDevMode === 'undefined') {
        if (typeof s.submitIncomplete !== 'undefined' && s.submitIncomplete === '1') {
          if (typeof sfChatFlow.customerPhone !== 'undefined' && sfChatFlow.customerPhone !== '') {
            sf_sdk.postJsonSubmit();
            return 'Are you sure you want to leave?';
          } else if (typeof sfChatFlow.customerEmail !== 'undefined' && sfChatFlow.customerEmail !== ''){
            sf_sdk.postJsonSubmit();
            return 'Are you sure you want to leave?';
          }
        }
      }
    };

    var chatLogoAsButton = 'background-image: url(https://app.serviceform.com/servicechat.svg); background-size: 50% !important;';
    if (typeof s.chatLogoAsButton !== 'undefined') {
      if (s.chatLogoAsButton === '1') {
        chatLogoAsButton = 'background-image: url(' + s.logo + ');';
      }
    }

    if (typeof s.serviceChatIcon !== 'undefined' && s.serviceChatIcon !== '') {
      chatLogoAsButton = 'background-image: url(' + s.serviceChatIcon + ');';
    }

    var hexagon = '';
    if (typeof s.hexagon !== 'undefined') {
      if (s.hexagon === '1') {
        hexagon = 'hexagon';
      }
    }

    var balloon = '' +
      '<div class="sf-prem-bubble '+hexagon+'" style="' + chatLogoAsButton +
      'background-color: '+s.color1+'" role="button" tabindex="0" aria-label="'+sf_sdk.tS('Open chat')+'" aria-controls="sf-prem-chat">' +
      '<div class="sf-chat-one-new">1</div>' +
      '</div>';

    if(typeof s.sfChatIconType !== 'undefined' && s.sfChatIconType === 'button'){
      var balloonText = 'Chat here';

      if(typeof s.sfChatIconText !== 'undefined' && s.sfChatIconText !== ''){
        balloonText = s.sfChatIconText;
      }

      var balloonRadius = 0;
      if(typeof s.sfChatIconRadius !== 'undefined' && s.sfChatIconRadius !== '') {
        balloonRadius = s.sfChatIconRadius;
      }

      balloon = '<div class="sf-prem-bubble sf-prem-button-bubble" style="'+ ' background-color: '+s.color1+'; border-radius: '+balloonRadius+'px;" role="button" tabindex="0" aria-label="'+sf_sdk.tS('Open chat')+'" aria-controls="sf-prem-chat">' +
        '<div class="sf-chat-one-new">1</div>' +
        balloonText +
        '</div>';
    }

    if(inlineType){
      balloon = '';
    }

    var send = '<div class="sf-send"><!--?xml version="1.0" encoding="iso-8859-1"?-->' +
      '<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->' +
      '' +
      '<svg fill="#00000080" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="535.5px" height="535.5px" viewBox="0 0 535.5 535.5" style="enable-background:new 0 0 535.5 535.5;" xml:space="preserve">' +
      '<g>' +
      '\t<g id="send">' +
      '\t\t<polygon points="0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75 \t\t"></polygon>' +
      '\t</g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '</svg>' +
      '</div>';

    var flows = sf_sdk.buildFlows();

    var team = '<div class="livechat-team">' +
      '<div class="livechat-agents">' +
      '<div class="livechat-agent" style="background-image:url(https://serviceform-file-storage.ams3.digitaloceanspaces.com/mWFAB2bk_1587062661_jarkko.jpg)"></div>'+
      '<div class="livechat-agent" style="background-image:url(https://serviceform-file-storage.ams3.digitaloceanspaces.com/dsaNrJyJ_1554810466_IMG20141119WA0003.jpg)"></div>'+
      '<div class="livechat-agent" style="background-image:url(https://app.serviceform.com/sites/default/files/styles/serviceform/public/download_10.png)"></div>'+
      '</div>'+
      '<div class="livechat-descr">'+
      '<div class="livechat-agent-count">12 Agents</div>'+
      '<div class="livechat-agent-descr">Our team usually replies within 2 minutes.</div>' +
      '</div>'+
      '</div>';

    var sfChatName = s.serviceChatName;
    var question = sf_sdk.getChatFlows();

    if(!question){
      question = {
        'title': ''
      }
    }

    var blocks = '';

    if(typeof s.calendar !== 'undefined' && s.calendar === 1){
      blocks += '<div class="sf-intro-block">' +
        '<div class="sf-intro-block-header">Book a meeting</div>'+
        '<div class="sf-intro-block-content-calendly"><div id="sf-calendly"></div></div>'+
        '</div>';
    }

    if(typeof s.articles !== 'undefined' && s.articles === 1 || typeof s.articles !== 'undefined' && s.articles === "1"){
      blocks += '<div class="sf-intro-block">' +
        '<div class="sf-intro-block-header">'+sf_sdk.tS('Frequently asked questions')+'</div>'+
        '<div class="sf-intro-block-content-articles">' +
        '<div class="sf-search-box-wrapper">' +
        '<input id="sf-article-search" placeholder="'+sf_sdk.tS('Search here')+'...">'+
        '<div id="sf-articles"></div>' +
        '</div>'+
        '</div>' +
        '</div>';
    } else if(typeof s.articles !== 'undefined' && s.articles === 2 || typeof s.articles !== 'undefined' && s.articles === "2"){
      blocks += '<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">' +
        '<div id="sf-faq-window"></div>';
    }

    if(typeof s.productSearch !== 'undefined' && s.productSearch === 1){
      blocks += '<div class="sf-intro-block">' +
        '<div class="sf-intro-block-header">'+sf_sdk.tS('Quick property search')+'</div>'+
        '<div class="sf-intro-block-content-products">' +
        '<div class="sf-search-box-wrapper">' +
        '<input id="sf-product-search-box" placeholder="'+sf_sdk.tS('Enter your area of interest...')+'">'+
        '</div>'+
        '<div id="sf-product-search">' +
        '</div>' +
        '<a href="https://www.firstteam.com/properties/" class="sf-show-more">Show more results</a>'+
        '</div>'+
        '</div>';
    }

    var svg = '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 368 368" style="enable-background:new 0 0 368 368;" xml:space="preserve">' +
      '<g>' +
      '\t<g>' +
      '\t\t<g>' +
      '\t\t\t<path fill="#939395" d="M261.336,226.04c-3.296-2.952-8.36-2.664-11.296,0.624C233.352,245.312,209.288,256,184,256' +
      '\t\t\t\tc-25.28,0-49.352-10.688-66.04-29.336c-2.952-3.288-8-3.576-11.296-0.624c-3.296,2.944-3.568,8-0.624,11.296' +
      '\t\t\t\tC125.76,259.368,154.176,272,184,272c29.832,0,58.248-12.64,77.96-34.664C264.904,234.04,264.624,228.984,261.336,226.04z"></path>' +
      '\t\t\t<path fill="#939395" d="M184,0C82.544,0,0,82.544,0,184s82.544,184,184,184s184-82.544,184-184S285.456,0,184,0z M184,352' +
      '\t\t\t\tc-92.64,0-168-75.36-168-168S91.36,16,184,16s168,75.36,168,168S276.64,352,184,352z"></path>' +
      '\t\t\t<path fill="#939395" d="M248,128c-22.056,0-40,17.944-40,40c0,4.416,3.584,8,8,8c4.416,0,8-3.584,8-8c0-13.232,10.768-24,24-24s24,10.768,24,24' +
      '\t\t\t\tc0,4.416,3.584,8,8,8c4.416,0,8-3.584,8-8C288,145.944,270.056,128,248,128z"></path>' +
      '\t\t\t<path fill="#939395" d="M144,168c0,4.416,3.584,8,8,8s8-3.584,8-8c0-22.056-17.944-40-40-40c-22.056,0-40,17.944-40,40c0,4.416,3.584,8,8,8' +
      '\t\t\t\ts8-3.584,8-8c0-13.232,10.768-24,24-24S144,154.768,144,168z"></path>' +
      '\t\t</g>' +
      '\t</g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '</svg>';

    var start = '<div class="sf-intro-block sf-conversations-list">' +
      '</div>';

    if(typeof s.reset !== 'undefined'){
      start = '<div class="sf-intro-block sf-conversations-list">' +
        '<div class="new-chat">'+send+' '+sf_sdk.tS('Start new conversation')+'</div>'+
        '</div>';
    }
    var svgButton = '<div class="sf-chatbot-icons"><img src="https://cdn.serviceform.com/assets/images/chat/back.svg" alt="back icon" /></div>'

    var normalMode = ' <div class="livechat-back sf-icon-wrapper sf-normal-mode">' + svgButton + '</div>';
    if(typeof s.skipStartPage !== 'undefined' && s.skipStartPage === "1") {
      normalMode = '';
    }


    var telephoneButtonIcon = '<div class="sf-chatbot-icons"><img src="https://cdn.serviceform.com/assets/images/chat/call.svg" alt="call icon" /></div>'

    var refreshButtonIcon = '<div class="sf-chatbot-icons"><img src="https://cdn.serviceform.com/assets/images/chat/refresh.svg" alt="refresh icon" /></div>'

    var closeButtonIcon = '<div class="sf-chatbot-icons"><img src="https://cdn.serviceform.com/assets/images/chat/close.svg" alt="close icon" /></div>'

    var uploadButtonIcon = '<div class="sf-chatbot-icons sf-white-icons"><img src="https://cdn.serviceform.com/assets/images/chat/attach_file.svg" alt="attach file icon" /></div>'

    var sendButtonIcon = '<div class="sf-chatbot-icons sf-white-icons"><img src="https://cdn.serviceform.com/assets/images/chat/send.svg" alt="send icon" /></div>'


    var uploadIcon = '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"' +
      '\t width="957.599px" height="957.6px" viewBox="0 0 957.599 957.6" style="enable-background:new 0 0 957.599 957.6;"' +
      '\t xml:space="preserve">' +
      '<g>' +
      '\t<path d="M817.9,108.4h-28v687.901c0,45.699-37.2,82.898-82.899,82.898H423.3H197.7v25.5c0,29.201,23.7,52.9,52.9,52.9h283.6H817.8' +
      '\t\tc29.2,0,52.899-23.699,52.899-52.9V161.3C870.7,132.1,847.1,108.4,817.9,108.4z"/>' +
      '\t<path d="M423.3,849.199h283.6c29.2,0,52.9-23.699,52.9-52.898V108.4V52.9c0-29.2-23.7-52.9-52.9-52.9H423.3H329v17.5' +
      '\t\tc0.199,1.8,0.3,3.7,0.3,5.6v115.3V168c0,41.1-33.4,74.5-74.5,74.5h-29.6H109.9c-1.5,0-3.1-0.1-4.6-0.2H86.9v554.001' +
      '\t\tc0,29.199,23.7,52.898,52.9,52.898h58H423.3L423.3,849.199z M434,669.4H249.1c-13.8,0-25-11.201-25-25c0-13.801,11.2-25,25-25h185' +
      '\t\tc13.8,0,25,11.199,25,25C459.1,658.199,447.8,669.4,434,669.4z M619,541.801H249.1c-13.8,0-25-11.201-25-25c0-13.801,11.2-25,25-25' +
      '\t\tH619c13.8,0,25,11.199,25,25C644,530.6,632.8,541.801,619,541.801z M249.1,356.3H619c13.8,0,25,11.2,25,25c0,13.8-11.2,25-25,25' +
      '\t\tH249.1c-13.8,0-25-11.2-25-25C224.1,367.5,235.3,356.3,249.1,356.3z"/>' +
      '\t<path d="M109.9,212.5h144.9c0.1,0,0.3,0,0.4,0c24.2-0.2,43.8-19.8,44-44c0-0.1,0-0.3,0-0.4v-145c0-13.4-11-22.3-22.399-22.3' +
      '\t\tc-5.5,0-11,2-15.6,6.6L94.1,174.5C80.1,188.5,90,212.5,109.9,212.5z"/>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '</svg>';

    var refresh = '';
    if(typeof s.showRefreshButton !== 'undefined' && s.showRefreshButton === '1'){
      refresh = '<div class="livechat-refresh sf-icon-wrapper" id="sf-refresh-chat" tabindex="0" role="button" aria-label="' + sf_sdk.tS('Refresh chat') + '">' + refreshButtonIcon + '</div>';
    }

    var telephone = '';
    if(typeof s.showTelephoneButton !== 'undefined' && s.showTelephoneButton === '1'){
      telephone = '<div class="livechat-telephone sf-icon-wrapper" id="sf-phone-chat" tabindex="0" role="button" aria-label="' + sf_sdk.tS('Call') + '">' + telephoneButtonIcon + '</div>';
    }

    var closeButton = '<div class="livechat-close sf-icon-wrapper" id="sf-close-chat" tabindex="0" role="button" aria-label="' + sf_sdk.tS('Close chat') + '">' + closeButtonIcon + '</div>';



    var emoji = '';
    if(emoji === 'emojis'){
      emoji = '<div class="livechat-textarea-emoji sf-icon-wrapper">' +
        svg +
        '</div>';
    }

    var introText = s.chatPushSettingsIntroText;
    if(typeof s.introText !== 'undefined'){
      introText = s.introText;
    }

    if(typeof introText === 'undefined'){
      introText = '';
    }

    var introBgColor = s.color + 'e8';

    if(typeof s.welcomeBackgroundColor !== 'undefined'){
      introBgColor = s.welcomeBackgroundColor;
    }


    var textColor = '#000000';
    if(sf_sdk.lightOrDark(s.color) === 'dark') {
      textColor = '#ffffff';
    }

    var textColor2 = '#000000';
    if(sf_sdk.lightOrDark(s.color1) === 'dark') {
      textColor2 = '#ffffff';
    }

    var backgroundColor = s.color;
    var selectedOptionColor = s.color1;
    var actionColor = s.color1;

    if(sf_sdk.lightOrDark(s.color1) === 'light') {
      actionColor = "#000000";
      textColor2 = '#ffffff';
    }


    var privacy = '';
    var privacyUrl = '';
    var privacyText = '';
    var privacyHTML = '';

    // Chatbot footer

    // Check if privacy enabled and if text exists
    if ((typeof sfPixel.ruleDetails !== 'undefined' && sfPixel.ruleDetails.showBranding === "0") && (typeof s.privacyText !== 'undefined' && s.privacy === "1")) {
      privacy = 'sf-privacy';

      if (typeof s.privacyText !== 'undefined') {
        privacyText = s.privacyText;
      }

      if (typeof s.privacyUrl !== 'undefined') {
        privacyUrl = s.privacyUrl;
      }

      privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
        '<div class="sf-privacy-wrapper sf-chatbot-privacy-text-only">' +
        '<a target="_blank" class="sf-chatbot-privacy-text " href="' + privacyUrl + '">' + privacyText + '</a>' +
        '</div>' +
        '</div>';

    } else if ((typeof sfPixel.ruleDetails !== 'undefined' && sfPixel.ruleDetails.showBranding === "1") && (typeof s.privacyText !== 'undefined' && s.privacy === "0")) {
      // Check if branding enabled
      privacy = 'sf-privacy';

      var logoImage = ""
      var poweredByLogoUrl = ""

      if (typeof sfPixel.ruleDetails !== 'undefined') {
        if (sfPixel.ruleDetails.whitelabel === 'sivustamo') {
          poweredByLogoUrl = 'https://www.sivustamo.fi/chatbotit/';
          logoImage = 'https://cdn.serviceform.com/assets/images/sivustamo.png';
        } else if (sfPixel.ruleDetails.whitelabel === 'sf') {
          logoImage = 'https://cdn.serviceform.com/assets/images/chat/poweredByServiceform.png';
          poweredByLogoUrl = 'https://www.serviceform.com/products/best-free-chatbot-software?source=powered&website=' + window.location.host
        }
      }
      if (logoImage) {
        privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
        '<div class="sf-privacy-wrapper sf-runon-only">' +
          '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
        '</div>' +
        '</div>';
      } else {
        '<div class="sf-privacy-wrapper">' +
          '</div>' +
          '</div>';
      }

    } else if ((typeof sfPixel.ruleDetails !== 'undefined' && sfPixel.ruleDetails.showBranding === "1") && (typeof s.privacyText !== 'undefined' && s.privacy === "1")) {
      // Check if branding and privacy enabled and if text exists
      privacy = 'sf-privacy';

      if (typeof s.privacyText !== 'undefined') {
        privacyText = s.privacyText;
      }

      if (typeof s.privacyUrl !== 'undefined') {
        privacyUrl = s.privacyUrl;
      }

      var logoImage = ""
      var poweredByLogoUrl = ""
      if (typeof sfPixel.ruleDetails !== 'undefined') {
        if (sfPixel.ruleDetails.whitelabel === 'sivustamo') {
          poweredByLogoUrl = 'https://www.sivustamo.fi/chatbotit/';
          logoImage = 'https://cdn.serviceform.com/assets/images/sivustamo.png';
        } else if (sfPixel.ruleDetails.whitelabel === 'sf') {
          logoImage = 'https://cdn.serviceform.com/assets/images/chat/poweredByServiceform.png';
          poweredByLogoUrl = 'https://www.serviceform.com/products/best-free-chatbot-software?source=powered&website=' + window.location.host
        }
      }
      if (typeof s.privacyText !== 'undefined' && s.privacyText) {
        if (logoImage) {
          privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
            '<div class="sf-privacy-wrapper">' +
            '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
            '<a target="_blank" class="sf-chatbot-privacy-text" href="' + privacyUrl + '">' + privacyText + '</a>' +
            '</div>' +
            '</div>';
          } else {
          '<div class="sf-privacy-wrapper">' +
            '</div>' +
            '</div>';
        }
      } else {
        if (logoImage) {
          privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
          '<div class="sf-privacy-wrapper sf-runon-only">' +
            '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
          '</div>' +
          '</div>';
        } else {
          '<div class="sf-privacy-wrapper">' +
            '</div>' +
            '</div>';
        }
      }
    } else {
      // Show branding by default if whitelabel is SF and show privacy if its enabled and exists
      privacy = 'sf-privacy';
      if (typeof s.privacyText !== 'undefined') {
        privacyText = s.privacyText;
      }

      if (typeof s.privacyUrl !== 'undefined') {
        privacyUrl = s.privacyUrl;
      }

      var logoImage = 'https://cdn.serviceform.com/assets/images/chat/poweredByServiceform.png';
      var poweredByLogoUrl = 'https://www.serviceform.com/products/best-free-chatbot-software?source=powered&website=' + window.location.host
      if (typeof sfPixel.ruleDetails !== 'undefined') {
        if (sfPixel.ruleDetails.whitelabel === 'sf') {
          if (typeof s.privacyText !== 'undefined' && s.privacy === "1") {
            // show logo
            // show privacy text
            privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
              '<div class="sf-privacy-wrapper">' +
              '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
              '<a target="_blank" class="sf-chatbot-privacy-text" href="' + privacyUrl + '">' + privacyText + '</a>' +
              '</div>' +
              '</div>'
          } else {
            if ((typeof sfPixel.ruleDetails !== 'undefined' && sfPixel.ruleDetails.showBranding === "1")) {
              // show logo
              privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
                '<div class="sf-privacy-wrapper sf-runon-only">' +
                '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
                '</div>' +
                '</div>'
            } else {
              '<div class="sf-privacy-wrapper">' +
                '</div>' +
                '</div>';
            }
          }
        } else {
          if (typeof s.privacyText !== 'undefined' && s.privacy === "1") {
            // show privacy text
            privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
              '<div class="sf-privacy-wrapper sf-chatbot-privacy-text-only">' +
              '<a target="_blank" class="sf-chatbot-privacy-text " href="' + privacyUrl + '">' + privacyText + '</a>' +
              '</div>' +
              '</div>';
          } else {
            // show empty footer
            '<div class="sf-privacy-wrapper">' +
              '</div>' +
              '</div>';
          }
        }
      } else {
        if (typeof s.privacyText !== 'undefined' && s.privacy === "1") {
          // show logo
          // show privacy text
          privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
            '<div class="sf-privacy-wrapper">' +
            '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
            '<a target="_blank" class="sf-chatbot-privacy-text" href="' + privacyUrl + '">' + privacyText + '</a>' +
            '</div>' +
            '</div>'
        } else {
          // show logo
          privacyHTML = '<div class="sf-privacy-link sf-runon-logo">' +
            '<div class="sf-privacy-wrapper sf-runon-only">' +
            '<a target="_blank" href="' + poweredByLogoUrl + '"><img class="sf-runon" alt="Best free chatbot software" src="' + logoImage + '"></a>' +
            '</div>' +
            '</div>'
        }
      }
    }

    var buttonTheming =
      '#sf-prem-chat .new-chat:hover {' +
      'background: '+ actionColor +' !important;'+
      'color: '+textColor2+';'+
      '}' +
      '#sf-prem-chat .new-chat:hover svg { fill: '+textColor2+'}';

    var hideBottom = '';

    // Option to hide textarea if default livechat team is offline.
    if(typeof s.hideTextArea !== 'undefined' && s.hideTextArea === "1"){

      // Check if there is a default team, if so use default team, else use general team.
      if(typeof serviceChatData.serviceform.defaultTeam !== 'undefined' && serviceChatData.serviceform.defaultTeam !== '') {
        var teamFound = 0;
        var defaultTeam = serviceChatData.serviceform.defaultTeam;

        if (sfPixel.ruleDetails) {
          var array = sfPixel.ruleDetails.teams;

          for (var x = 0; x < array.length; x++) {
            if (array[x].teamId === defaultTeam) {
              teamFound = x;
            }
          }

          if (teamFound) {
            // Check if team offline, then hide.
            if (!sfPixel.ruleDetails.teams[teamFound].chatOnline) {
              s.hideBottom = 1;
            }
          }
        } else {
          // Check if team offline, then hide.
          if (sfPixel.ruleDetails) {
            if (!sfPixel.ruleDetails.teams[0].chatOnline) {
              s.hideBottom = 1;
            }
          }

        }
      }
    }

    if(typeof s.hideBottom !== 'undefined' && s.hideBottom === 1 || typeof s.hideBottom !== 'undefined' && s.hideBottom === '1'){
      hideBottom = '.livechat-bottom {' +
        '  display: none !important;' +
        '}';
    }

    var welcomeHeaderColor = textColor;
    if(typeof s.welcomeBackgroundTextColor !== 'undefined' && s.welcomeBackgroundTextColor !== ''){
      welcomeHeaderColor = s.welcomeBackgroundTextColor;
    }

    var flipColors = '.sf-conversation-cta, #sf-prem-chat .sf-intro-block-content-cta, #sf-prem-chat a.sf-carousel-button-link {' +
      'border: 1px solid ' + actionColor+ ';'+
      'color: ' + actionColor + ';' +
      '}'+
      '.sf-conversation-cta:hover, .sf-intro-block-content-cta:hover, .sf-message.sf-current, #sf-prem-chat .sf-intro-block-content-cta:hover {' +
      'background: '+actionColor+' !important;' +
      'color: ' + textColor2 +
      '}';

    if(s.flipColors === 1 || s.flipColors === "1"){
      flipColors = '.sf-conversation-cta, #sf-prem-chat .sf-intro-block-content-cta, #sf-prem-chat a.sf-carousel-button-link, .sf-message.sf-current {' +
        'border: 1px solid ' + actionColor+ ';'+
        'background-color: ' + actionColor + ';' +
        'color: white ' +
        '}'+
        '.sf-conversation-cta:hover, .sf-intro-block-content-cta:hover, #sf-prem-chat .sf-intro-block-content-cta:hover {' +
        'background: white !important;' +
        'color: ' + actionColor +
        '}';
    }

    var styles = '<style>' +
      buttonTheming +
      hideBottom +
      ':root {--sf-color-1: ' + selectedOptionColor + '; --sf-text-color: '+textColor2+'; --sf-color-2: '+actionColor+';}'+
      '#sf-prem-chat .sf-intro-header{' +
      'color: '+welcomeHeaderColor+'}'+
      '.sf-prem-bubble.hexagon:after {border-top: 17.32px solid '+actionColor+';}'+
      '.sf-prem-bubble.hexagon:before {border-bottom: 17.32px solid '+actionColor+';}'+
      '#sf-prem-chat .livechat-close,#sf-prem-chat .livechat-close, #sf-prem-chat .livechat-refresh, #sf-prem-chat .livechat-telephone {' +
      'background: '+actionColor+';' +
      '}'+
      '#sf-prem-chat svg, .sf-push svg {' +
      '    fill: '+actionColor+';' +
      '}'+
      flipColors +
      '.sf-intro-block-content-cta:hover {' +
      '  background: '+s.color+';' +
      '  color: white;' +
      '}'+
      '</style>';

    var introHeader = '<div class="sf-intro-header" style="background-color: '+introBgColor+'">'+
      '<div class="sf-intro-large">'+sf_sdk.stringTokens(sfChatName)+'</div>'+
      '<div class="sf-intro-small">' + sf_sdk.stringTokens(introText) + '</div>'+
      '</div>';

    if(typeof s.welcomeBackground !== 'undefined' && s.welcomeBackground !== ''){
      introHeader = '<div class="sf-intro-header" style="background-image: url('+s.welcomeBackground+')">'+
        '<div class="sf-intro-large">'+sf_sdk.stringTokens(sfChatName)+'</div>'+
        '<div class="sf-intro-small">' + sf_sdk.stringTokens(introText) + '</div>'+
        '</div>';
    }

    var uploadButton = '<div class="sf-icon-textarea-wrapper livechat-textarea-file" id="sf-upload-chat" tabindex="0" role="button" aria-label="' + sf_sdk.tS('Upload') + '">' + uploadButtonIcon + '</div>';

    var sendButton = '<div class="sf-icon-textarea-wrapper livechat-textarea-send" id="sf-send-chat" tabindex="0" role="button" aria-label="' + sf_sdk.tS('Send') + '">' + sendButtonIcon + '</div>';


    var html = '<div id="sf-chat-form" class="'+privacy+'">'+
      balloon +
      '<div id="sf-prem-chat" class="livechat-box intro-mode">' +
      '<div class="livechat-header" style="background-color: '+s.color+'">' +
      normalMode +
      '<img class="sf-header-logo" src="'+s.logo+'">' + telephone +
      refresh +
      closeButton +
      '</div>' +
      '<div class="sf-intro">' +
      introHeader +
      '<div class="sf-intro-blocks">' +
      '<div class="sf-avatar-inside">' +
      '<div class="livechat-agent" style="background-image:url('+s.serviceChatImage+')">' +
      '</div>'+
      '</div>'+
      '<div class="sf-intro-block sf-first">' +
      '<div class="sf-intro-block-header sf-intro-block-first">'+sf_sdk.stringTokens(question.title)+'</div>'+
      '</div>'+
      '<div class="sf-inside-options">'+
      flows +
      '</div>'+
      '</div>'+
      '<div class="sf-second-intro">' +
      start +
      blocks +
      '</div>' +
      privacyHTML +
      '</div>' +
      '<div class="livechat-wrapper">' +
      '<div class="livechat-container">' +
      '</div>' +
      privacyHTML +
      '<div class="livechat-bottom">' +
      '<input id="chat-file" type="file" class="sf-hidden" name="chat-file" size="chars"/>' +
      '<div class="livechat-textarea">' +
      '<textarea placeholder="' + sf_sdk.tS('Write reply') + '…" id="sf-livechat-textarea"></textarea>' +
      '</div>' +
      emoji +
      '<div class="livechat-textarea-icons">' +
      uploadButton +
      sendButton +
      // '<div class="livechat-textarea-file" role="button" tabindex="0" aria-label="' + sf_sdk.tS('Upload') + '" aria-controls="sf-upload">' + uploadButtonIcon + '</div>' +
      // '<div class="livechat-textarea-send" role="button" tabindex="0" aria-label="' + sf_sdk.tS('Send') + '" aria-controls="sf-send">' + send + '</div>' +
      '</div>' +
      '</div>' +
      '</div>' +
      '</div>' +
      styles +
      '</div>';

    var div = document.querySelector('html');
    div.insertAdjacentHTML('beforeend', html);

    if(!inlineType) {
      if (typeof s.articles !== 'undefined' && s.articles === 1 || typeof s.articles !== 'undefined' && s.articles === "1") {
        sfPixel.loadScript2('https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js', sf_sdk.startFuseSearch);
      } else if (typeof s.articles !== 'undefined' && s.articles === 2 || typeof s.articles !== 'undefined' && s.articles === "2") {
        sfPixel.loadScript2('https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js', loadNext);
        function loadNext() {
          sfPixel.loadScript2('https://cdn.quilljs.com/1.3.6/quill.js', sf_sdk.faq);
        }
      }
      // loadScript2('https://addsearch.com/js/?key=227a86dbbc3896d966da860abd65177f','');

      var telephoneBtn = document.querySelector('.livechat-telephone');
      if (telephoneBtn) {
        telephoneBtn.addEventListener('click', function () {
          if(typeof window.serviceChatDynamicPhoneNumber !== 'undefined' && window.serviceChatDynamicPhoneNumber !== ''){
            s.sfCustomTele = window.serviceChatDynamicPhoneNumber;
          }
          document.location.href="tel:"+s.sfCustomTele;
        });
      }

      var closeBtn = document.querySelector('.livechat-close');
      if (closeBtn) {
        closeBtn.addEventListener('click', function () {
          sf_sdk.closeBox();
          sf_sdk.closeLivechat();

        });
      }

      var refreshBtn = document.querySelector('.livechat-refresh');
      if (refreshBtn) {
        refreshBtn.addEventListener('click', function () {
          window.sfChatFlow.summaryItems = [];
          sf_sdk.nextQuestion(-1);
        });
      }
    }

    var fileUpload = document.querySelector('.livechat-textarea-file');
    if(fileUpload){
      fileUpload.addEventListener('click', function(){
        var chatFile = document.querySelector('#chat-file');
        chatFile.click();
      });
    }

    var fileUploadInput = document.querySelector('#chat-file');
    if(fileUploadInput) {
      fileUploadInput.addEventListener('change', function(){

        sf_sdk.pushToDiscussion('<div class="sf-uploading">'+sf_sdk.tS('Uploading...')+'</div>');

        var url = 'https://app.serviceform.com/uploads/serviceform/' + s.uid;

        var files = this.files;
        var formData = new FormData();

        for (var i = 0; i < files.length; i++) {
          var file = files[i];

          formData.append('files[]', file);
        }

        var req = new XMLHttpRequest();

        req.open("POST", url);
        req.send(formData);

        req.onreadystatechange = function () {
          var element = document.querySelector('.sf-uploading');
          element.innerHTML = '';
          if (req.readyState === 4 && req.status === 200) {

            var response = JSON.parse(req.responseText);
            var newPostKey = firebase.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/').push().key;

            var file = {
              message: sf_sdk.tS('sent a file'),
              author: 0,
              type: 'file',
              typeValue: response[0].temp_url,
              fileType: response[0].type,
              livechat: 1,
              bot: 0,
              timestamp: firebase.database.ServerValue.TIMESTAMP
            };

            firebase.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set(file);

            var fileHtml = '';
            if (typeof file.fileType !== 'undefined' && file.fileType.indexOf("image") != -1) {
              fileHtml = '<div class="sf-conv-message sf-file-chat sf-business">' +
                '                  <img alt="'+file.message+'" class="sf-file-upload" src="'+file.typeValue+'">' +
                '                  <div class="sf-file-note">' + sf_sdk.tS('You') + ' ' + file.message + '</div>' +
                '                </div>';
            } else {

              fileHtml = '<div class="sf-conv-message sf-file-chat sf-business">' +
                '                  <div class="sf-file-note">' + sf_sdk.tS('You') + ' ' + file.message + '</div>' +
                '                </div>';
            }

            sf_sdk.pushToDiscussion(fileHtml);
            sf_sdk.scrollBottom();

          }
        }
      });
    }

    var tx = document.getElementById('sf-livechat-textarea');
    tx.addEventListener("input", OnInput, false);

    function OnInput() {
      var el = this;
      el.style.cssText = 'height:auto; padding:0';
      el.style.cssText = '-moz-box-sizing:inherit';
      el.style.cssText = 'height:' + el.scrollHeight + 'px';

      var innerDiv = document.getElementsByClassName('livechat-container')[0];

      if (this.scrollHeight < 55) {
        innerDiv.style.cssText = 'height:calc(100% - 306px) !important';
      } else {
        innerDiv.style.height = 'calc(100% - ' + el.offsetHeight + 'px)';
      }
    }

    var bubble = document.querySelector('.sf-prem-bubble');
    if(bubble) {
      bubble.addEventListener('click', function () {
        var livechatBox = document.querySelector('.livechat-box');
        if(livechatBox.classList.contains('sf-open')){
          sf_sdk.closeBox();
        } else {
          sf_sdk.openBox();
        }
      });
    }

    var newChatBtn = document.querySelector('.new-chat');
    if(newChatBtn){
      newChatBtn.addEventListener('click',function(){
        window.sfChatFlow.page = -1;

        var newPostKey = sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/').push().key;

        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set({
          message: sf_sdk.tS('Started a new chat'),
          author: 1,
          type: 'note',
          typeValue: 'new-chat',
          livechat: 0,
          writing: 0,
          bot: 0,
          timestamp: sf_sdka.database.ServerValue.TIMESTAMP
        });

        sf_sdk.livechatMode(sfPixel.stats.activeChatCid, 'livechat');

        setTimeout(function () {
          sf_sdk.nextQuestion(0,'');
        }, 500);

      });
    }

    var normalModeBtn = document.querySelector('.sf-normal-mode');
    if(normalModeBtn){
      normalModeBtn.addEventListener('click', function(){
        if(typeof window.serviceChatData.serviceform.loadLastSessions === 'undefined' || window.serviceChatData.serviceform.loadLastSessions === '0') {
          window.sfChatFlow.summaryItems = [];
        }
        sf_sdk.introMode();
      });
    }

    var options = document.getElementsByClassName('sf-intro-block-content-cta');
    if(options) {
      for (var i = 0; i < options.length; i++) {
        options[i].addEventListener('click',function(){
          var oid = this.getAttribute('oid');
          var qid = this.getAttribute('qid');

          sf_sdk.chatInteraction();

          var newPostKey = sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/').push().key;

          sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set({
            message: sf_sdk.tS('Started a new chat'),
            author: 1,
            type: 'note',
            typeVslue: 'new-chat',
            livechat: 0,
            writing: 0,
            bot: 0,
            timestamp: sf_sdka.database.ServerValue.TIMESTAMP
          });

          sf_sdk.livechatMode('bot', 'bot');
          sf_sdk.initBotDiscussion(qid, oid, 'start');
        });
      }
    }

    if(inlineType){
      sf_sdk.openBox();
      sf_sdk.livechatMode('bot', 'bot');
      sf_sdk.nextQuestion(-1);
    }

    var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');
    if (typeof livechatId !== 'undefined' && livechatId !== '') {
      if(livechatId === 'blocked'){
        sf_sdk.destroy();
        return;
      } else {
        window.sfLiveChatCid = livechatId;
        sf_sdk.initChatListener(window.sfLiveChatCid);
      }
    }

    sf_sdk.pushDelay();
    sf_sdk.newStatistics('view','');
    //sf_sdk.sendChatLoadedEvent();

    setTimeout(function () {
      sf_sdk.loaded = 1;
    }, 3000);
  },
  startFuseSearch() {
    var articles = document.querySelector('#sf-articles');
    if(articles) {
      var searchBox = document.querySelectorAll('#sf-article-search');
      if (searchBox) {
        for (var i = 0; i < searchBox.length; i++) {
          searchBox[i].addEventListener('keyup', function () {
            searchFuse(this.value);
          });
        }
      }

      searchFuse('a');

      function searchFuse(keyword) {
        var s = serviceChatData.serviceform;
        var qa = s.questionAnswer;

        if (qa) {
          var options = {
            includeScore: true,
            threshold: 1,
            keys: ["question", "answer"]
          };

          var fuse = new Fuse(qa, options);
          var fuseResult = fuse.search(keyword);

          var html = '';
          for (var i = 0; i < fuseResult.length; i++) {
            if (i < 5) {
              var question = fuseResult[i].item.question;
              var ir = question.split(',');

              var res = question.charAt(0);
              html += '<div class="sf-qa">' +
                '<div class="sf-qa-block">' + res + '</div>' +
                '<div class="sf-qa-question">' + ir[0] + '</div>' +
                '<div class="sf-qa-answer">' + fuseResult[i].item.answer + '</div>' +
                '</div>';
            }
          }

          var allArticles = document.querySelectorAll('#sf-articles');
          if (allArticles) {
            for (var i = 0; i < allArticles.length; i++) {
              allArticles[i].innerHTML = html;
            }
          }

          var qas = document.getElementsByClassName('sf-qa');
          if (qas) {
            for (var k = 0; k < qas.length; k++) {
              qas[k].addEventListener('click', function () {

                if (this.classList.contains('sf-active')) {
                  this.classList.remove('sf-active');
                } else {

                  var qas2 = document.getElementsByClassName('sf-qa');
                  if (qas2) {
                    for (var kk = 0; kk < qas2.length; kk++) {
                      qas2[kk].classList.remove('sf-active');
                    }
                  }

                  this.classList.add('sf-active');
                }
              });
            }
          }
        }
        else {
          alert('No FAQs set up yet');
        }
      }
    }
  },
  rebuildIntroText: function(){
    var question = sf_sdk.getChatFlows();
    var intro = document.querySelector('.sf-intro-block-header.sf-intro-block-first');
    if(intro) {
      intro.innerHTML = sf_sdk.stringTokens(question.title);
    }
  },
  newStatistics: function (type, input, qid){

    var s = serviceChatData.serviceform;

    if(typeof window.sfChatFlowStats === 'undefined') {

      var event = new Date();
      window.sfChatFlowStats = {
        session: sfPixel.stats.session,
        referrer: sfPixel.stats.referrer,
        browser: sfPixel.stats.browser,
        osName: sfPixel.stats.osName,
        platformType: sfPixel.stats.platformType,
        uid: s.uid,
        pid: sfPixel.stats.pid,
        nid: s.nid,
        interaction: 0,
        date: event.toISOString(),
        cid: 'cid-2-' + sf_sdk.generateId(16),
        cidLivechat: '',
        clicks: 0,
        flowType: "chatbot",
        type: 'flow-statistics',
        review: 0,
        seconds: sfPixel.stats.seconds,
        droppedOnQuestion: 0,
        submitted: 0,
        website: document.location.href,
        page: 0,
        click: "0",
        options: [],
        path: [],
        sankey: [],
        questionViews: [],
        failedAnswers: [],
        redirects: [],
        submissionWebsite: document.location.href,
        submittedQuestion: "",
        paid: 0,
        source: "chatbot_v2"
      };
    }

    sfChatFlowStats.cidLivechat = window.sfLiveChatCid;

    $a = document.location.href;
    if ($a.indexOf('edit') !== -1) {}
    else {

      var view = 0;
      var submission = 0;
      var interaction = 0;
      var livechat = 0;
      var run = 0;

      var d = {
        nid: serviceChatData.serviceform.nid,
        input: input,
        value: type
      }

      if (type === 'view' && typeof window.sfLoggedView === 'undefined') {
        sfChatFlowStats.view = 1;
        window.sfLoggedView = 1;
        run = 1;
      }
      else if (type === 'submission' && typeof window.sfLoggedSubmission === 'undefined') {
        sfChatFlowStats.submission = 1;
        window.sfLoggedSubmission = 1;
        sfChatFlowStats.submissionSecond = sfPixel.stats.seconds;
        sfChatFlowStats.seconds = sfPixel.stats.seconds;

        var id = sfChatFlowStats.path[sfChatFlowStats.path.length-1];
        if(id) {
          sfChatFlowStats.submittedQuestion = id
        }

        run = 1;
      }
      else if (type === 'interaction' && typeof window.sfLoggedInteraction === 'undefined') {
        sfChatFlowStats.interaction = 1;
        sfChatFlowStats.interactionSecond = sfPixel.stats.seconds;
        window.sfLoggedInteraction = 1;
        run = 1;
      }
      else if (type === 'livechat') {
        sfChatFlowStats.livechat = 1;
        sfChatFlowStats.livechatSecond = sfPixel.stats.seconds;
        run = 1;
      }
      else if (type === 'livechatJoined') {
        sfChatFlowStats.livechatJoined = 1;
        sfChatFlowStats.livechatJoinedSecond = sfPixel.stats.seconds;
        run = 1;
      }
      else if (type === 'livechatNa') {
        window.sfLoggedLivechatJoined = 1;
        sfChatFlowStats.livechatNa = 1;
        sfChatFlowStats.livechatNaSecond = sfPixel.stats.seconds;
        run = 1;
      } else if (type === 'review' && typeof window.sfReviewed === 'undefined') {
        window.sfReviewed = 1;
        sfChatFlowStats.review = input;
        run = 1;
      }
      else if (type === 'path') {
        if(typeof s.questions[input] !== 'undefined') {
          if (typeof s.questions[input].qid !== 'undefined') {
            input = s.questions[input].qid;

            var sankey = sfChatFlowStats.path;
            var items = sankey.length;
            if(items > 0){
              var last = items - 1;
              var lastPage = sfChatFlowStats.path[last];
              if(lastPage){
                var sankeyPath = lastPage + '-' + input;
                sfChatFlowStats.sankey.push(sankeyPath);
              }
            }

            sfChatFlowStats.path.push(input);
          }
          else {
            sfChatFlowStats.path.push(input);
          }

          var blo = sfChatFlow.summaryItems[sfChatFlow.summaryItems.length - 1];
          if(blo) {
            var answers = blo.answer;
            var options = [];

            if (typeof blo.option !== 'undefined') {
              options.push(blo.option);
            } else {
              if (answers) {
                for (var i = 0; i < answers.length; i++) {
                  if (answers[i].oid) {
                    options.push(answers[i].oid);
                  }
                }
              }
            }

            if (options.length === 0) {
              options = [0]
            }

            if(blo.qid !== input){
              options = [0]
            }
            d = {
              value: "path",
              o: options,
              q: input
            }
            if(sankeyPath){
              d['sk'] = sankeyPath;
            }
          }
        }

        run = 1;
      }
      else if(type === 'close'){
        sfChatFlowStats.close = 1;
        run = 1;
      }
      else if(type === 'failed'){
        sfChatFlowStats.failedAnswer = 1;
        if(typeof sfChatFlowStats.failedAnswers === 'undefined'){
          sfChatFlowStats.failedAnswers = [];
        }
        sfChatFlowStats.failedAnswers.push(input);
        run = 1;
      }
      else if(type === 'option'){
        sfChatFlowStats.options.push(input);
        run = 0;
      }

      sfChatFlowStats.clicks = sfChatFlowStats.clicks + 1;

      if (run) {
        var stats = sfChatFlowStats;
        if(stats) {
          if(window.sfpid) {
            stats.pid = window.sfpid.toString();
            var data = JSON.stringify(stats);
            var url = "https://zy1ssnfwwl.execute-api.eu-north-1.amazonaws.com/default/statistics-function";
            var xhr = new XMLHttpRequest();
            xhr.open("POST", url);
            xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
            xhr.send(data);
          }
        }

        sf_sdk.sfStatsSend(d);
      }
    }
  },
  pushToFailedQuestions: function (text) {
    var cH = serviceChatData.serviceform;
    var nid = cH.nid;

    // Add unanswered question.
    var test = {
      'uid': cH.uid,
      'nid': nid,
      'text': text,
      'language': cH.language,
      'website': sfChatFlow.website
    }

    var xhr = new XMLHttpRequest();
    var json = JSON.stringify(test);
    var url = 'https://apiv2.serviceform.com/unanswered-questions/add';

    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.send(json);

  },
  faq: function(){
    var html = '<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">';

    if(window.sfDevMode === 1){
      window.sfEditMode = 1;
    }

    sf_sdk.printCategories();

  },
  printCategories(){
    window.sfFaqSeachPage = 'start';

    var categories = serviceChatData.serviceform.knowledgebase.categories;

    categories.sort(function(a, b) {
      return a.key - b.key;
    });

    serviceChatData.serviceform.knowledgebase.searchArray = [];

    var html = '';
    html += '<div class="sf-categories-wrapper">';
    html += '<div class="sf-categories-header">'+sf_sdk.tS('Frequently asked questions')+'</div>';
    html += '<div class="sf-search-box"><input class="sf-search-faq" onkeyup="sf_sdk.triggerSearch(event)" placeholder="'+sf_sdk.tS('Search')+'..."></div>';

    for (var i = 0; i < categories.length; i++) {
      var category = categories[i];
      var articles = category.articles;
      for (var k = 0; k < articles.length; k++) {
        articles[k].category = i;
        articles[k].articleNumber = k;
        serviceChatData.serviceform.knowledgebase.searchArray.push(articles[k]);
      }

      var charName = '';
      if(category.name !== null){
        charName = category.name.charAt(0);
      }
      var i = i;
      html += '<div class="sf-category" onclick="sf_sdk.printArticles('+i+')">';
      html += '<div class="category-icon"><span class="sf-category-short">'+charName+'</span></div>';
      html += '<div class="sf-category-name">'+category.name+'</div>';
      html += '</div>';
    }
    if(window.sfEditMode) {
      html += '<div class="sf-add-category sf-add" onclick="sf_sdk.addCategory()">+ Add category</div>';
    }
    html += '</div>';

    document.querySelector('#sf-faq-window').innerHTML = html;
  },
  addCategory(){
    var category = prompt("What's the category you want to create?");

    if(category && category !== '') {
      var categoryArray = {
        "name": category,
        "articles": [
          {
            "name": "Example article",
            "keywords": "",
            "content": ""
          }
        ]
      };
      serviceChatData.serviceform.knowledgebase.categories.push(categoryArray);
    } else {
      alert('No name given');
    }

    sf_sdk.printCategories();
  },

  addArticle(i){
    var article = prompt("What's the name of your article?");

    if(article && article !== '') {
      var articleArray = {
        "name": article,
        "keywords": "",
        "content": ""
      }
      serviceChatData.serviceform.knowledgebase.categories[i].articles.push(articleArray);
    } else {
      alert('No article name given');
    }

    sf_sdk.printCategories();

    sf_sdk.printArticles(i);
  },

  deleteArticle(i, k){
    var r = confirm("Are you sure you want to delete this article?");
    if (r == true) {
      serviceChatData.serviceform.knowledgebase.categories[i].articles.splice(k, 1);
      sf_sdk.printArticles(i);
    }
  },

  categoryName(event, i){
    serviceChatData.serviceform.knowledgebase.categories[i].name = event.currentTarget.value;
  },
  categoryDescription(event, i){
    serviceChatData.serviceform.knowledgebase.categories[i].description = event.currentTarget.value;
  },

  articleName(event, i, k){
    serviceChatData.serviceform.knowledgebase.categories[i].articles[k].name = event.currentTarget.value;
  },

  articleKey(event, i, k){
    serviceChatData.serviceform.knowledgebase.categories[i].articles[k].key = event.currentTarget.value;
  },

  categoryKey(event, i){
    serviceChatData.serviceform.knowledgebase.categories[i].key = event.currentTarget.value;
  },

  deleteCategory(i){
    var r = confirm("Are you sure you want to delete this category. NOTE: All articles will be deleted as well.");
    if (r == true) {
      serviceChatData.serviceform.knowledgebase.categories.splice(i, 1);
      sf_sdk.printCategories();
    }
  },

  articleTemplate(article, i, k){
    var html = '';
    html += '<div class="sf-article" onclick="sf_sdk.printArticle('+i+','+k+')">';
    html += '<div class="sf-article-icon"><img class="sf-document-icon" src="https://cdn.serviceform.com/serviceform-tools/chat/icons/icon.svg"></div>';
    html += '<div class="sf-article-name">'+article.name+'</div>';
    html += '</div>';

    return html;
  },

  printArticle(i,k){
    window.sfFaqSeachPage = 'onearticle';

    var categories = serviceChatData.serviceform.knowledgebase.categories;
    var category = categories[i];
    var article = category.articles[k];

    var html = '';
    html += '<div class="sf-categories-wrapper">';

    if(window.sfEditMode) {
      html += '<div class="sf-categories-header">' +
        '<div class="sf-back-area" onclick="sf_sdk.printArticles('+i+')">'+
        sf_sdk.backArrow+
        '</div>'+
        '<div class="sf-category-name"><input class="sf-category-editor" onkeyup="sf_sdk.articleName(event, '+i+', '+k+')" value="'+article.name+'"></div>' +
        '<div class="sf-category-delete" onclick="sf_sdk.deleteArticle('+i+','+k+')"><img class="sf-icon-back" src="https://cdn.serviceform.com/serviceform-tools/chat/icons/delete.svg"></div>' +
        '</div>';


    } else {
      html += '<div class="sf-categories-header" onclick="sf_sdk.printArticles('+i+')">' +
        '<div class="sf-back-area" onclick="sf_sdk.printArticles('+i+')">'+
        sf_sdk.backArrow+
        '</div>'+
        '<div class="sf-category-name">'+article.name+'</div>' +
        '</div>';
    }


    html += '<div class="sf-open-article">';
    html += '<div id="sf-editor" class="sf-article-content">'+article.content+'</div>';

    if(window.sfEditMode) {
      var value = serviceChatData.serviceform.knowledgebase.categories[i].articles[k].key;
      if (typeof value === 'undefined') {
        value = '';
      }
      html += '<div class="sf-categories-wrapper"><input class="sf-search-faq sf-small-input" type="number" value="'+value+'" onkeyup="sf_sdk.articleKey(event, ' + i + ', ' + k + ')" placeholder="0 to 100"></div>';
    }
    html += '</div>';
    html += '</div>';

    document.querySelector('#sf-faq-window').innerHTML = html;

    if(window.sfEditMode) {
      var quill = new Quill('#sf-editor', {
        theme: 'snow'
      });

      quill.on('text-change', function(delta, oldDelta, source) {
        var contents = quill.root.innerHTML;
        serviceChatData.serviceform.knowledgebase.categories[i].articles[k].content = contents;
      });
    }
  },
  triggerSearch(e) {
    var originalAnswer = e.currentTarget.value;

    if(window.sfFaqSeachPage !== 'articles') {
      sf_sdk.printArticles(0, 'search');
      var search = document.querySelector('.sf-search-faq');
      search.value = originalAnswer;
      search.focus();
    }

    var options = {
      includeScore: true,
      threshold: 0.8,
      tokenize: 1,
      keys: ["name", "content"]
    };

    var fuse = new Fuse(serviceChatData.serviceform.knowledgebase.searchArray, options);
    var fuseResult = fuse.search(originalAnswer);

    var html = '';

    var articles = fuseResult;
    for (var k = 0; k < articles.length; k++) {
      var article = articles[k].item;
      html += sf_sdk.articleTemplate(article, article.category, article.articleNumber);
    }

    document.querySelector('.sf-articles').innerHTML = html;
  },
  printArticles(i, type){
    window.sfFaqSeachPage = 'articles';
    var categories = serviceChatData.serviceform.knowledgebase.categories;

    var category = categories[i];
    var html = '';
    html += '<div class="sf-categories-wrapper">';

    if(typeof category.description === 'undefined'){
      category.description = '';
    }
    if(window.sfEditMode) {
      if(type === 'search'){
        html += '<div class="sf-categories-header">' +
          '<div class="sf-back-area" onclick="sf_sdk.printCategories()">'+
          sf_sdk.backArrow +
          '</div>' +
          '<div class="sf-category-name">Search</div>' +
          '</div>';
      } else {
        html += '<div class="sf-categories-header">' +
          '<div class="sf-back-area" onclick="sf_sdk.printCategories()">'+
          sf_sdk.backArrow +
          '</div>' +
          '<div class="sf-category-name">' +
          '<input class="sf-category-editor" onkeyup="sf_sdk.categoryName(event, '+i+')" value="'+category.name+'"></div>' +
          '<div class="sf-category-delete" onclick="sf_sdk.deleteCategory('+i+')"><img class="sf-icon-back" src="https://cdn.serviceform.com/serviceform-tools/chat/icons/delete.svg"></div>' +
          '</div>';

        html += '<div class="sf-category-div">' +
          '<textarea class="sf-category-description" onkeyup="sf_sdk.categoryDescription(event, '+i+', '+k+')">'+category.description+'</textarea>' +
          '</div>';
      }
    } else {

      if(type === 'search'){
        html += '<div class="sf-categories-header">' +
          '<div class="sf-back-area" onclick="sf_sdk.printCategories()">'+
          sf_sdk.backArrow +
          '</div>' +
          '<div class="sf-category-name">Search</div>' +
          '</div>';
      } else {
        html += '<div class="sf-categories-header">' +
          '<div class="sf-back-area" onclick="sf_sdk.printCategories()">'+
          sf_sdk.backArrow +
          '</div>' +
          '<div class="sf-category-name">' + category.name + '</div>' +
          '</div>';

        html += '<div class="sf-category-div">' +
          '<div class="sf-category-description">' + category.description + '</div>' +
          '</div>';
      }
    }
    html += '<div class="sf-search-box"><input class="sf-search-faq" onkeyup="sf_sdk.triggerSearch(event)" placeholder="'+sf_sdk.tS('Search')+'..."></div>';


    html += '<div class="sf-articles">';
    var articles = category.articles;

    articles.sort(function(a, b) {
      return a.key - b.key;
    });

    for (var k = 0; k < articles.length; k++) {
      var article = articles[k];
      html += sf_sdk.articleTemplate(article, i, k);
    }
    if(window.sfEditMode) {
      var value = serviceChatData.serviceform.knowledgebase.categories[i].key;
      if(typeof value === 'undefined'){
        value = '';
      }
      html += '<div class="sf-add-article sf-add" onclick="sf_sdk.addArticle('+i+')">+ Add article</div>';
      html += '<div class="sf-categories-wrapper"><input class="sf-search-faq sf-small-input" type="number" value="'+value+'" onkeyup="sf_sdk.categoryKey(event, '+i+')" placeholder="0 to 100"></div>';
    }
    html += '</div>';
    html += '</div>';


    document.querySelector('#sf-faq-window').innerHTML = html;
  },
  initChatListener: function(cid){
    var s = serviceChatData.serviceform;

    if(typeof window.sfLiveChatCid === 'undefined') {
      var stamp = new Date().getTime();
      var livechatCid = 'cid-' + stamp + sf_sdk.generateId(16);
      window.sfLiveChatCid = livechatCid;
    }

    if(cid === 'new') {
      var sfChatName = s.serviceChatName;

      var conversation = {
        session: sfPixel.stats.session,
        cid: window.sfLiveChatCid,
        timestamp: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: '',
        bot: 1,
        livechat: 0,
        agentId: '',
        agentName: sfChatName,
        agentImage: s.serviceChatImage
      }

      var sessionData = {
        session: sfPixel.stats.session,
        customerName: '',
        customerEmail: '',
        customerAddress: '',
        customerIp: '',
        customerCountry: '',
        customerPostCode: '',
        customerNotes: '',
        customerTags: '',
        cid: window.sfLiveChatCid,
        timestamp: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: '',
        bot: 1,
        livechat: 0,
        agentId: '',
        agentName: sfChatName,
        agentImage: s.serviceChatImage
      }

      sf_sdka.database().ref('/session/' + window.sfLivePid + '/' + sfPixel.stats.session + '/conversations/' + window.sfLiveChatCid).update(conversation);
      sf_sdka.database().ref('/session/' + window.sfLivePid + '/' + sfPixel.stats.session).update(sessionData);

      sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/start-time').set({
        timestamp: sf_sdka.database.ServerValue.TIMESTAMP
      });
    }

    sf_sdk.liveChatListener();
  },
  liveChatListener: function(){
    var session = sfPixel.sfGetPixelCookie('sfpxs');

    if (typeof session === 'undefined' || session === '') {
      // Leave this console.log for debug.
      // console.log('NO SESSION ADDING SESSION COOKIE');
      sfPixel.sfSetPixelCookie('sfpxs', sfPixel.stats.session, 1);
    }

    var userStatusDatabaseRef = sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid);
    // We'll create two constants which we will write to
    // the Realtime database when this device is offline
    // or online.

    var id = sf_sdk.generateId(6);

    function randomHSL(){
      return "hsla(" + ~~(360 * Math.random()) + "," +
        "70%,"+
        "80%,1)"
    }
    var randomColor = randomHSL();

    var cart = '';

    if(typeof sfPixel !== 'undefined'){
      if(typeof sfPixel.stats.cart !== 'undefined'){
        cart = sfPixel.stats.cart;
      }
    }

    var isOfflineForDatabase = {
      state: 'offline',
      session: sfPixel.stats.session,
      last_changed: sf_sdka.database.ServerValue.TIMESTAMP,
      user_left: sf_sdka.database.ServerValue.TIMESTAMP,
      url: window.location.pathname,
      fullUrl: window.location.href,
      cart: cart,
      lastEvent: 'loggedOff'
    };

    var isOnlineForDatabase = {
      state: 'online',
      session: sfPixel.stats.session,
      id: id,
      url: window.location.pathname,
      originalPid: window.sfpid,
      fullUrl: window.location.href,
      color: randomColor,
      cart: cart,
      lastEvent: 'loggedOn',
      last_changed: sf_sdka.database.ServerValue.TIMESTAMP,
    };

    if(serviceChatData.serviceform && serviceChatData.serviceform.uid){
      isOnlineForDatabase.uid = serviceChatData.serviceform.uid;
      isOfflineForDatabase.uid = serviceChatData.serviceform.uid;
    }

    if(serviceChatData.serviceform && serviceChatData.serviceform.nid){
      let hereNid = serviceChatData.serviceform.nid;
      isOnlineForDatabase.nid = hereNid;
      isOfflineForDatabase.nid = hereNid;

      isOnlineForDatabase.flow = 'Chatbot #' + hereNid;
      isOfflineForDatabase.flow = 'Chatbot #' + hereNid;
    }

    // Online logic.
    if(typeof window.sf_na !== 'undefined' && typeof window.sf_nm !== 'undefined'){
      isOnlineForDatabase['loggedIn'] = 1;
      isOnlineForDatabase['loggedInId'] = window.sf_nm;
      isOnlineForDatabase['loggedInName'] = window.sf_na;
      isOnlineForDatabase['loggedInNow'] = 1;
    } else {
      isOnlineForDatabase['loggedInNow'] = 0;
    }

    // Create a reference to the special '.info/connected' path in
    // Realtime Database. This path returns `true` when connected
    // and `false` when disconnected.
    sf_sdka.database().ref('.info/connected').on('value', function (snapshot) {
      // If we're not currently connected, don't do anything.
      if (snapshot.val() == false) {
        return;
      };

      // If we are currently connected, then use the 'onDisconnect()'
      // method to add a set which will only trigger once this
      // client has disconnected by closing the app,
      // losing internet, or any other means.
      userStatusDatabaseRef.onDisconnect().update(isOfflineForDatabase).then(function () {
        // The promise returned from .onDisconnect().set() will
        // resolve as soon as the server acknowledges the onDisconnect()
        // request, NOT once we've actually disconnected:
        // https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect

        // We can now safely set ourselves as 'online' knowing that the
        // server will mark us as offline once we lose connection.
        userStatusDatabaseRef.update(isOnlineForDatabase);
      });
    });

    sf_sdka.database().ref('/session/'+window.sfLivePid+'/'+sfPixel.stats.session).update({
      livechat: 1
    });

    window.sfChatLivechat = 0;

    // Kill old reference.
    if(window.sfReference){
      sf_sdka.database().ref(window.sfReference).off('value');
      sf_sdka.database().ref(window.sfReference).off('child_added');
    }

    window.sfReference = '/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid;

    sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid).on('child_added', function (snapshot) {
      var data = snapshot.val();
      if(data.author === 1 && data.bot !== 1 && sf_sdk.loaded && data.type !== 'note' && data.type !== 'user-left'){
        if(sf_sdk.isClosed()) {
          var extraButton = document.querySelector('.sf-chat-one-new');
          if(extraButton) {
            extraButton.style.display = 'block';
          }
          sf_sdk.popup('livechat', data.message, data.agentImage, data.agentName);
        }
        sf_sdk.playAudio('new-message');
      }
    });

    if(typeof window.Prototype === 'object') {
      // console.log('Turning on Serviceform Prototype.js Mode.')
      setInterval(function () {
        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid).once('value').then(function (snapshot) {

          if(window.sfTimerId){
            clearTimeout(window.sfTimerId);
          }

          window.sfTimerId = setTimeout(function () {
            var gD = [];

            snapshot.forEach(function (childSnapshot) {
              var childData = childSnapshot.val();

              if(typeof childData.author !== 'undefined'){
                gD.push(childData);
              }
            });

            sf_sdk.processData(gD);
          }, 500);

        });
      }, 3000);
    } else {
      sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid).on('value', function (snapshot) {

        if(window.sfTimerId){
          clearTimeout(window.sfTimerId);
        }

        window.sfTimerId = setTimeout(function () {
          var gD = [];

          snapshot.forEach(function (childSnapshot) {
            var childData = childSnapshot.val();

            if(typeof childData.author !== 'undefined'){
              gD.push(childData);
            }
          });

          sf_sdk.processData(gD);
        }, 500);

      });
    }
  },
  killLoader: function(){
    var loader = document.querySelector('.sf-loader-wrapper');
    if(loader){
      sfPixel.sfRemoveElement(loader);
    }
  },
  loader: function(){
    var loader = '<div class="sf-message sf-business"><div class="sf-chat-loader _5wd9 _n4o">' +
      '    <div class="_5w1r _5wdf _3_om">' +
      '      <div class="_5x7x _4a0v _4a0x" data-hover="tooltip" aria-label="Joseph is typing..." id="js_3o">' +
      '        <div class="_4b0g">' +
      '          <div class="_5pd7"></div>' +
      '          <div class="_5pd7"></div>' +
      '          <div class="_5pd7"></div>' +
      '        </div>' +
      '      </div>' +
      '    </div>' +
      '  </div></div>';

    var agentImage = serviceChatData.serviceform.serviceChatImage;

    var html = '<div class="sf-msg-wrp sf-loader-wrapper">' +
      '<div class="sf-msg-ava"><img src="' + agentImage + '"></div>' +
      loader +
      '</div>';

    sf_sdk.pushToDiscussion(html);

  },
  isClosed: function(){
    var open = 1;
    var chatOpen = document.querySelector('.sf-open');
    if(chatOpen){
      open = 0;
    }
    return open;
  },
  validateField: function(question, option, answer){
    var question = sf_sdk.getPageFromId(question);
    var sfData = serviceChatData.serviceform;

    sf_sdk.clearOptions();
    sf_sdk.addAnswer(answer.trim(), 'na');
    sf_sdk.updateRealtime('normal', answer.trim(), '');

    var fail = 0;
    question = sfData.questions[question];

    var option = sf_sdk.getOptionFromQuestion(question, option);

    if(typeof option !== 'undefined') {
      if (option.fieldType === 'name') {
        sfChatFlow.customerName = answer.trim();
        sfChatFlow.customerFullName = answer.trim();
        sf_sdk.updateContact('firstName', answer.trim());
      }
      if (option.fieldType === 'firstName') {
        sfChatFlow.customerFirstName = answer.trim();
        sfChatFlow.customerName = answer.trim();
        sf_sdk.updateContact('firstName', answer.trim());
      }
      if (option.fieldType === 'lastName') {
        sfChatFlow.customerLastName = answer.trim();
        sf_sdk.updateContact('lastName', answer.trim());
      }
      if (option.fieldType === 'postalCode') {
        var postalCode = answer.trim();
        if(postalCode.length > 4){
          sfChatFlow.postalCode = answer.trim();
        } else {
          sf_sdk.addAdminAnswer(sf_sdk.tS('Post code requires more than four digits.'));
          fail = 1;
        }
      }
      if (option.fieldType === 'addressAutofill') {
        sfChatFlow.address = answer.trim();
      }
      if (option.fieldType === 'addressGoogleAutofill') {
        sfChatFlow.address = answer.trim();
      }

      if (option.fieldType === 'postalCodeNumbers') {
        var postalCode = answer.trim();
        if (postalCode.match(/^[0-9]+$/) != null) {
          sfChatFlow.postalCode = answer.trim();
        } else {
          sf_sdk.addAdminAnswer(sf_sdk.tS('Could you please enter your post code with only numbers'));
          fail = 1;
        }
      }

      if (option.fieldType === 'numbersOnly') {
        var postalCode = answer.trim();
        if (postalCode.match(/^[0-9]+$/) != null) {
        } else {
          sf_sdk.addAdminAnswer(sf_sdk.tS('Could you please enter only numbers') + '.');
          fail = 1;
        }
      }
      if (option.fieldType === 'lettersOnly') {
        var lettersOnly = answer.trim();
        if (!/^[a-zA-Z\s]*$/.test(lettersOnly)) {
          sf_sdk.addAdminAnswer(sf_sdk.tS('Could you please enter only letters.'));
          fail = 1;
        }
      }
      if (option.fieldType === 'address') {
        sfChatFlow.address = answer.trim();
      }
      if (option.fieldType === 'message') {
        sfChatFlow.message = answer.trim();
      }
      if (option.fieldType === 'message2') {
        sfChatFlow.longMessage = answer.trim();
      }
      if (option.fieldType === 'phoneValidate') {
        intTel[0].setNumber(answer.trim());
        if (intTel[0].isValidNumber()) {
          sfChatFlow.customerPhone = intTel[0].getNumber();
          if(intTel[0].getNumber()) {
            answer = intTel[0].getNumber();
          }

          sf_sdk.addAnswer(answer.trim(), 'na');
          sf_sdk.updateRealtime('normal', answer.trim(), '');
        } else {
          sf_sdk.addAnswer(answer.trim(), 'na');
          sf_sdk.updateRealtime('normal', answer.trim(), '');
          sf_sdk.addAdminAnswer(sf_sdk.tS('Please add a valid phone number'));
          fail = 1;
        }
      }
      if (option.fieldType === 'phone') {
        var nowPhone = answer.trim();

        if (sf_sdk.validatePhone(nowPhone) && nowPhone.length > 6) {
          var phone = answer.trim(nowPhone);
          sfChatFlow.customerPhone = answer.trim(nowPhone);
          sf_sdk.updateContact('phone', phone);
        } else {
          sf_sdk.addAdminAnswer(sf_sdk.tS('Please add a valid phone number'));
          fail = 1;
        }
      }
      if (option.fieldType === 'email') {
        var nowEmail = answer.trim();
        if (sf_sdk.validateEmail(nowEmail)) {
          var email = answer.trim(nowEmail);
          sfChatFlow.customerEmail = email;
          sf_sdk.updateContact('email', email);
        } else {
          sf_sdk.addAdminAnswer(sf_sdk.tS('Could I get a valid email first?'));
          fail = 1;
        }
      }
    } else {

    }

    var html = '<div class="sf-msg-wrp sf-current">' +
      '<div class="sf-message sf-current">'+answer.trim()+'</div>' +
      '</div>';
    sf_sdk.pushToDiscussion(html);

    if(fail === 0) {
      return 1;
    } else {
      return 0;
    }
  },
  loadIntTel: function() {
    var cH = serviceChatData.serviceform;

    var other = document.querySelector(".sf-addressAutofill");
    if(other){
      sfPixel.loadScript2('https://cdn.jsdelivr.net/npm/places.js@1.18.2', loadAutofill);
      function loadAutofill(){
        var placesAutocomplete = places({
          appId: 'plNQ10CGSRXA',
          type: 'country',
          apiKey: 'c65c34a58fd935b3d95bc9c701ac3be1',
          container: document.querySelector('.sf-addressAutofill input'),
          language: cH.language
        });
      }
    }

    var hepbo = document.querySelector(".sf-addressGoogleAutofill");
    if(hepbo){
      if (typeof google === 'object' && typeof google.maps === 'object') {
        sf_sdk.mapApiLoaded();
      } else {
        sfPixel.loadScript2('https://maps.googleapis.com/maps/api/js?key=AIzaSyBwrUejym9i_STJi3Kn8IvFVYvGj6t-gr8&libraries=places&language='+serviceChatData.serviceform.language+'&callback=sf_sdk.mapApiLoaded','');
      }
    }

    var input = document.querySelector(".sf-phoneValidate");
    if(input) {
      sfPixel.loadScript2(sfPixel.analyticsRoot + 'chat/components/intTelInput/sf-input.js', function () {
          var link = document.createElement("link");
          link.href = sfPixel.analyticsRoot + 'chat/components/intTelInput/sf-input.css'  + sfPixel.version;
          link.type = "text/css";
          link.rel = "stylesheet";
          link.media = "screen,print";

          document.getElementsByTagName("head")[0].appendChild(link);

          var input = document.querySelectorAll(".sf-phoneValidate input");
          window.intTel = {};

          var preferred = ch.preferredCountries;

          var setCountry = 'ae';
          var currency = cH.currency;
          if(typeof cH.language !== 'undefined'){
            var language = cH.language;
          } else {
            language = 'en';
          }
          preferred = ['us', 'gb', 'ca', 'fi'];

          if(currency === 'usd'){
            setCountry = 'us';
            preferred = ['us', 'gb', 'ca'];
          } else if (currency === 'eur') {
            if(language === 'fi'){
              setCountry = 'fi';
              preferred = ['fi', 'se', 'no'];
            }
          } else if(currency === 'gbp'){
            setCountry = 'gb';
            preferred = ['gb', 'us', 'ca'];
          } else if(currency === 'inr'){
            preferred = ['in', 'ae', 'se'];
            setCountry = 'in';
          }

          if(language === 'fi'){
            setCountry = 'fi';
            preferred = ['fi', 'se', 'no'];
          }

          if(language === 'es'){
            preferred = ['es', 'fr', 'pt'];
            setCountry = 'es';
          }

          if(language === 'ca'){
            preferred = ['es', 'pt', 'fr'];
            setCountry = 'es';
          }

          if(language === 'pt'){
            preferred = ['pt','es', 'fr'];
            setCountry = 'pt';
          }

          if(language === 'fr'){
            preferred = ['fr', 'es', 'uk'];
            setCountry = 'fr';
          }

          if(currency === 'lkr'){
            preferred = ['in']
            setCountry = 'lk';
          }

          if(currency === 'mt'){
            preferred = ['mk', 'mt', 'md', 'mc']
            setCountry = 'mt';
          }

          // Override default language.
          if(typeof cH.intelDefaultCountry !== 'undefined' && cH.intelDefaultCountry !== '' ){
            setCountry = cH.intelDefaultCountry;
          }

          for (var i = 0; i < input.length; i++) {
            input[i].setAttribute('input-id', i);
            window.intTel[i] = intlTelInput(input[i], {
              allowDropdown: true,
              utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/14.0.1/js/utils.js",
              autoHideDialCode: true,
              autoPlaceholder: "off",
              // excludeCountries: ["us"],
              formatOnDisplay: true,
              // geoIpLookup: function(callback) {
              //   $.get("http://ipinfo.io", function() {}, "jsonp").always(function(resp) {
              //     var countryCode = (resp && resp.country) ? resp.country : "";
              //     callback(countryCode);
              //   });
              // },
              // hiddenInput: "full_number",
              initialCountry: setCountry,
              // localizedCountries: { 'de': 'Deutschland' },
              // nationalMode: false,
              // onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
              // placeholderNumberType: "MOBILE",
              preferredCountries: preferred
              // separateDialCode: true,
            });

            // on blur: validate
            input[i].addEventListener('input', function () {
              this.classList.remove('sf-error-validation');
              var k = this.getAttribute('input-id');

              if (this.value.trim()) {
                if (window.intTel[k].isValidNumber()) {
                  this.classList.add('sf-validated');
                  this.setAttribute('error','');
                }
                else {
                  this.classList.add("sf-error-validation");
                  var errorCode = window.intTel[k].getValidationError();
                  this.setAttribute('error', errorCode);
                }
              }
            });

            // on keyup / change flag: reset
            input[i].addEventListener('change', function () {
              this.classList.remove('error');
            });
            input[i].addEventListener('keyup', function () {
              this.classList.remove('error');
            });
          }
      })
    }

  },
  mapApiLoaded: function (page) {
    var cH = serviceChatData.serviceform;

    var input = document.querySelector('.sf-addressGoogleAutofill input');

    var options = {};
    if(typeof cH.country !== 'undefined') {
      options = {
        componentRestrictions: {country: cH.country}
      };
      if (typeof cH.googlePlaces !== 'undefined') {
        options = {
          types: [cH.googlePlaces],
          componentRestrictions: {country: cH.country}
        };
      }
    }

    var autocomplete = new google.maps.places.Autocomplete(input,options);

    autocomplete.addListener('place_changed', function() {
      var place = autocomplete.getPlace();
    });
  },
  updateContact: function(type, value){

    if(type === 'bulk'){
      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update(value);

      if(typeof value === 'object') {{
          Object.keys(value).map((key, k) => {
            sf_sdk.saveToLocalStorage(key, value[key]);
          })
        }
      }
    } else if(type === 'email'){
      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update({
        email: value
      });
      sf_sdk.saveToLocalStorage(type, value);

    } else if(type === 'firstName'){
      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update({
        first_name: value
      });
      sf_sdk.saveToLocalStorage(type, value);

    } else if(type === 'lastName'){
      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update({
        last_name: value
      });
      sf_sdk.saveToLocalStorage(type, value);

    } else if(type === 'phone'){
      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update({
        phone: value
      });
      sf_sdk.saveToLocalStorage(type, value);

    }
  },
  initBotDiscussion: function(qid, oid, type){
    var page = sf_sdk.getPageFromId(qid);
    var sfData = serviceChatData.serviceform;
    var question = sfData.questions[page];
    var options = question.options;

    if(typeof window.sfLiveChatCid === 'undefined') {
      sf_sdk.initChatListener('new');
    } else {
      sf_sdk.initChatListener(window.sfLiveChatCid);
    }

    var textAnswer = '';

    if(typeof oid === 'object') {
      for (var i = 0; i < oid.length; i++) {
        sf_sdk.newStatistics('option', oid[i].oid, qid);
        var answer = sf_sdk.getOptionFromQuestion(question, oid[i].oid);
        answer = answer.answer;
        if(i === 0){
          textAnswer += sf_sdk.stringTokens(answer);
        } else {
          textAnswer += ', ' + sf_sdk.stringTokens(answer);
        }
      }
    } else {
      sf_sdk.newStatistics('option', oid, qid);
      var answer = sf_sdk.getOptionFromQuestion(question, oid);

      if(typeof answer.price !== 'undefined' && answer.price !== ''){
        sfChatFlow.amount = sfChatFlow.amount + answer.price;
      }

      textAnswer = answer.answer;
      textAnswer = sf_sdk.stringTokens(textAnswer);
    }

    if(!window.sfChatFlow.page){
      var wrap = document.querySelector('.sf-push-wrapper');
      if(wrap) {
        wrap.innerHTML = '<div class="sf-push-discussion">' +
          '<div class="sf-msg-wrp sf-current">' +
          '<div class="sf-message sf-current">'+textAnswer+'</div>' +
          '</div>' +
          '</div>';

        sf_sdk.loader();
      } else {
        var html = '<div class="sf-msg-wrp sf-current">' +
          '<div class="sf-message sf-current">'+textAnswer+'</div>' +
          '</div>';
        sf_sdk.pushToDiscussion(html);
      }
    } else {
      var html = '<div class="sf-msg-wrp sf-current">' +
        '<div class="sf-message sf-current">'+textAnswer+'</div>' +
        '</div>';
      sf_sdk.pushToDiscussion(html);
    }

    window.sfChatFlow.page = page;

    sf_sdk.addAnswer(textAnswer, oid);
    sf_sdk.nextQuestion(question, oid);
  },
  addAdminAnswer: function(answer){

    var page = sfChatFlow.page;
    if (typeof page === 'undefined') {
      page = 0;
    }
    var sfData = serviceChatData.serviceform;
    var question = sfData.questions[page];

    if (typeof question !== 'undefined') {
      var questionText = sf_sdk.stringTokens(question.title);

      var summaryItemAnswer = {
        "answer": [{
          "answer": answer,
          "amount": '',
          "qid": question.qid
        }],
        "label": questionText,
        "question": sfChatFlow.page,
        "price": '',
        "qid": question.qid
      }

      sfChatFlow.summaryItems.push(summaryItemAnswer);
    }

    answer = sf_sdk.stringTokens(answer);
    sf_sdk.sendStuff('bot', answer);
  },
  addAnswer: function(answer, oid){
    sf_sdk.sendStuff('user', answer);

    var page = sfChatFlow.page;
    if(typeof page === 'undefined'){
      page = 0;
    }

    var sfData = serviceChatData.serviceform;
    var question = sfData.questions[page];

    if(typeof question !== 'undefined') {
      var questionText = sf_sdk.stringTokens(question.title);

      var summaryItemAnswer = {
        "answer": [{
          "answer": answer,
          "amount": '',
          "qid": question.qid,
        }],
        "label": questionText,
        "question": sfChatFlow.page,
        "price": '',
        "qid": question.qid
      }

      if(oid && oid !== null && oid !== 'na'){

        if(typeof oid === 'object') {
          let oids = [];
          for (var i = 0; i < oid.length; i++) {
            oids.push(oid[i].oid);
          }
          summaryItemAnswer['answer'][0]['oid'] = oids;

        } else {
          summaryItemAnswer['answer'][0]['oid'] = oid;
        }
      }

      sfChatFlow.summaryItems.push(summaryItemAnswer);
    }


    var int = parseInt(sfChatFlow.page) + 1;
    var token = {
      "token": '#question'+int,
      "answer": answer
    }

    window.sfChatFlow.tokens.push(token);
  },
  getOptionFromQuestion: function(question, oid) {

    if(typeof question !== 'undefined') {
      var options = question.options;
      if (typeof options !== 'undefined') {
        if (question.type === 'textfields') {
          if(question.options.length > 1){
            return options[oid];
          } else {
            return options[0];
          }
        }

        if (oid.length < 3) {
          return options[oid];
        }
        for (var i = 0; i < options.length; i++) {
          if (options[i].oid === oid) {
            return options[i];
          }
        }
      }
    }
    return 0;
  },
  getLatestOptions: function(){
    if(typeof window.sfChatFlow.page === 'train') {
    } else if(typeof window.sfChatFlow.page !== 'undefined'){
      sf_sdk.buildNextOptions(window.sfChatFlow.page);
    } else {
      sf_sdka.database().ref('/session/' + window.sfLivePid + '/' + sfPixel.stats.session + '/conversations/' + window.sfLiveChatCid).once('value').then(function (snapshot) {
        var val = snapshot.val();
        var page = val.page;
        if(page === 'submitted'){
          window.sfChatFlow.page = -1;
          sf_sdk.buildNextOptions(-1);
        } else {
          window.sfChatFlow.page = page;
          sf_sdk.buildNextOptions(page);
        }
      });
    }
  },
  nextQuestion: function(question, oid){
    if(typeof question === 'undefined'){
      question = sfChatFlow.page;
    }

    if(typeof question !== 'undefined') {
      var questionType = question.type;
      if (typeof questionType !== 'undefined') {
        if (questionType === 'textfields') {
          if(typeof question.options[0] !== 'undefined'){
            if (typeof question.options[0].oid !== 'undefined') {
              //Append Option id to option
              sfChatFlowStats.options.push(question.options[0].oid);
            }
          }
        }
      }
    }

    if(question === -1){
      window.sfChatFlow.page = -1;
    } else if(typeof window.sfChatFlow.page === 'undefined'){
      window.sfChatFlow.page = 0;
    }
    sf_sdk.clearOptions();

    if(typeof oid === 'object'){
      oid = 0;
    }

    if(oid) {
      var answer = sf_sdk.getOptionFromQuestion(question, oid);
    }

    var page = window.sfChatFlow.page;
    if(page < 0){
      page = 0;
    }

    var question = serviceChatData.serviceform.questions[page];

    var qid = question.qid

    if(qid) {
      if(window.sfChatFlowStats) {
        var isItemExists = false;
        for (var index = 0; index < window.sfChatFlowStats.questionViews.length; index++) {
          var item = window.sfChatFlowStats.questionViews[index];
          if(item.qid == qid) {
            window.sfChatFlowStats.questionViews[index].interaction = 1;
            isItemExists = true;
            break;
          }
        }

        if( !isItemExists ) {
          window.sfChatFlowStats.questionViews.push( {
            qid:qid,
            view: 1,
            interaction:1
          })
        }
      }

      if(typeof question !== 'undefined') {
        var js = question.customJavascript;
        if (typeof js !== 'undefined') {
          if (js !== '') {
            var customJS = js;
            if (sfPixel.checkForJson(customJS)) {
              eval(JSON.parse(customJS));
            } else {
              eval(customJS);
            }
          }
        }
      }
    }

    if(typeof answer !== 'undefined') {

      var defaultTeam = answer.defaultTeam;
      var defaultAgent = answer.defaultAgent;

      if(typeof defaultTeam !== 'undefined' && defaultTeam !== ''){
        if(typeof defaultAgent !== 'undefined' && defaultAgent !== '') {
          sf_sdk.sendNotifyLiveChat(defaultTeam, "","");
        } else {
          sf_sdk.sendNotifyLiveChat(defaultTeam, '',"");
        }
      } else if(typeof defaultAgent !== 'undefined' && defaultAgent !== ''){
        sf_sdk.sendNotifyLiveChat("", defaultAgent, "");
      }

      var redirectLink = answer.redirectOnClick;
      if (typeof redirectLink !== 'undefined' && redirectLink !== '') {
        var newTab = 1;
        if (typeof answer.redirectSameTab !== 'undefined') {
          if (answer.redirectSameTab === '1') {
            newTab = 0;
          }
        }

        redirectLink = sf_sdk.stringTokens(redirectLink);

        var redirect = {
          qid: question.qid,
          redirected: 1,
          redirectLink: redirectLink,
          oid: answer.oid,
          nid: window.serviceChatData.serviceform.nid
        }

        sfChatFlowStats.redirects.push(redirect);
        sf_sdk.sfOpenInNewTab(redirectLink, newTab);
      }


      if (typeof answer.outgoingEmail !== 'undefined') {
        if(typeof answer.outgoingEmail !== ''){
          sfChatFlow.conditionalEmail = answer.outgoingEmail;
        }
      }

      if (typeof answer.hiddenToken !== 'undefined') {
        if (answer.hiddenToken !== '') {
          var tokenId = parseInt(sfChatFlow.page) + 1;
          var answerToken = {
            'token': '#token' + tokenId,
            'answer': answer.hiddenToken
          }

          sfChatFlow.hiddenTokens.push(answerToken);
        }
      }

      var js = answer.customJavascript;
      if (typeof js !== 'undefined') {
        if (js !== '') {
          var customJS = js;
          if(sfPixel.checkForJson(customJS)){
            eval(JSON.parse(customJS));
          } else {
            eval(customJS);
          }
        }
      }

      var copyToEmail = answer.sendCopyToEmail;
      if (typeof copyToEmail !== 'undefined' && copyToEmail !== '') {
        sfChatFlow.emailCopy = copyToEmail;
      }
    }

    sf_sdk.newStatistics('path', sfChatFlow.page);

    if(typeof answer !== 'undefined') {
      if (typeof answer.chatDefaultTeam !== 'undefined' && answer.chatDefaultTeam !== '') {
        serviceChatData.serviceform.defaultTeam = answer.chatDefaultTeam;
      }

      if (typeof answer.notifyTeam !== 'undefined' && answer.notifyTeam === '2') {
        sf_sdk.initLivechatWithDefault('keep');
      }
    }

    if(oid && typeof answer !== 'undefined' && typeof answer.jump !== 'undefined' && answer.jump !== ''){
      if (answer.jump === 'stop') {
        sf_sdk.killLoader();
        return;
      } else if (answer.jump === 'end') {
        sf_sdk.submitLead();
        sf_sdk.killLoader();
        return;
      } else if (answer.jump === 'end-submit') {
        sf_sdk.killLoader();
        return;
      } else {
        var page = sf_sdk.getPageFromId(answer.jump);
        window.sfChatFlow.page = page;
      }
    } else if (typeof question.jump !== 'undefined' && question.jump !== ''){
      if (question.jump === 'stop') {
        sf_sdk.killLoader();
        return;
      } else if (question.jump === 'end') {
        sf_sdk.submitLead();
        sf_sdk.killLoader();
        return;
      } else if (question.jump === 'end-submit') {
        sf_sdk.killLoader();
        return;
      } else {
        var page = sf_sdk.getPageFromId(question.jump);
        window.sfChatFlow.page = page;
      }
    } else {
      window.sfChatFlow.page = window.sfChatFlow.page + 1;
    }

    sf_sdka.database().ref('/session/'+ window.sfLivePid +'/'+sfPixel.stats.session+'/conversations/'+window.sfLiveChatCid).update({
      page: window.sfChatFlow.page
    });
    sf_sdka.database().ref('/session/'+ window.sfLivePid +'/'+sfPixel.stats.session).update({
      page: window.sfChatFlow.page
    });

    if(window.sfChatFlow.page >= serviceChatData.serviceform.questions.length){
      sf_sdk.submitLead();
    } else {
      sf_sdk.renderNextQuestion();
    }
  },
  submitLead: function(){
    var thanks = serviceChatData.serviceform.submitted.title;
    if(thanks !== ''){
      sf_sdk.addAdminAnswer(thanks);
      if(typeof serviceChatData.serviceform.review !== 'undefined' && serviceChatData.serviceform.review === '1'){
        setTimeout(function () {
          sf_sdk.reviewBox('inside');
        }, 2000);
      }
    } else {
      if(typeof serviceChatData.serviceform.review !== 'undefined' && serviceChatData.serviceform.review === '1'){
        sf_sdk.reviewBox();
      }
    }

    window.sfChatFlow.page = 'submit';

    sf_sdk.postJsonSubmit();

    sf_sdka.database().ref('/session/'+ window.sfLivePid +'/'+sfPixel.stats.session+'/conversations/'+window.sfLiveChatCid).update({
      submitted: 1
    });
    sf_sdka.database().ref('/session/'+ window.sfLivePid +'/'+sfPixel.stats.session).update({
      submitted: 1
    });
  },
  renderNextQuestion: function(){
    var page = window.sfChatFlow.page;
    var sfData = serviceChatData.serviceform;
    var question = sfData.questions[page];
    var questionText = sf_sdk.stringTokens(question.title);

    sf_sdk.alterBackground(page);

    if(question.type === 'html'){
      questionText = question.html;
    }

    sf_sdk.updateRealtime('bot', questionText, question.qid);
  },
  postJsonSubmit: function () {
    if(typeof window.serviceChatDynamicWebhook !== 'undefined' && window.serviceChatDynamicWebhook !== ''){
      sfChatFlow.serviceChatDynamicWebhook = window.serviceChatDynamicWebhook;
    }
    var json = JSON.stringify(sfChatFlow);
    var cH = serviceChatData.serviceform;

    var xhr = new XMLHttpRequest();
    var nid = cH.nid;

    var url = "https://app.serviceform.com/developers/create/submission/" + nid;

    if (cH.whitelabel === 'slt') {
      url = "https://bizchat.slt.lk/developers/create/submission/" + nid;
    } else if (cH.whitelabel === 'addbot') {
      url = "https://app.addbot.io/developers/create/submission/" + nid;
    } else if (cH.whitelabel === 'netstory') {
      url = "https://netstory.io/developers/create/submission/" + nid;
    } else if (cH.whitelabel === 'popvakuutus') {
      url = "https://popvakuutus.serviceform.com/developers/create/submission/" + nid;
    } else if (cH.whitelabel === 'firstteam') {
      url = "https://agent.firstteam.com/developers/create/submission/" + nid;
    }

    if (sf_sdk.isDev()) {
      var url = "/developers/create/submission/" + nid;
    }

    sfChatFlow['resultsHTML'] = '';
    sfChatFlow['resultsText'] = '';

    // Readable open answers
    var items = sfChatFlow.summaryItems;
    for (var i = 0; i < items.length; i++) {
      if (typeof items[i].label !== 'undefined' && typeof items[i].answer !== 'undefined' && typeof items[i].answer[0].answer !== 'undefined') {
        sfChatFlow[items[i].label] = items[i].answer[0].answer;
        sfChatFlow['resultsText'] += items[i].label+ ': ';
        sfChatFlow['resultsText'] += items[i].answer[0].answer + ', ';
        sfChatFlow['resultsHTML'] += '<b>'+items[i].label+'</b> ';
        sfChatFlow['resultsHTML'] += items[i].answer[0].answer + '<br>';
      }
    }

    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4 && xhr.status === 200) {
        var json = JSON.parse(xhr.responseText);
        sf_sdk.submissionResponse = json;
        
        sf_sdk.chatSubmission();
        sfChatFlow.submitted = 1;
      }
    };

    if (sfChatFlow.submitted !== 1 && typeof window.sfDevMode === 'undefined') {
      xhr.send(json);
      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update({
        submission: 1
      });
    }

  },
  updateCart: function(data){
    if(data !== 'undefined') {
      sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid).update({
        cart: data,
        lastEvent: 'cartUpdate'
      });
    }
  },
  updateRealtime: function(type, text, mid){

    if(text) {
      var stamp = new Date().getTime();

      var newPostKey = sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/').push().key;

      var lastMessageAuthor = 0;
      if (type === 'bot') {
        lastMessageAuthor = 2;
      } else {
      }

      sf_sdka.database().ref('/session/' + window.sfLivePid + '/' + sfPixel.stats.session + '/conversations/' + window.sfLiveChatCid).update({
        lastMessageTime: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: text,
        lastMessageAuthor: lastMessageAuthor
      });

      sf_sdka.database().ref('/session/' + window.sfLivePid + '/' + sfPixel.stats.session).update({
        lastMessageTime: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: text,
        lastMessageAuthor: lastMessageAuthor
      });

      var cart = '';

      if(typeof sfPixel !== 'undefined'){
        if(typeof sfPixel.stats.cart !== 'undefined'){
          cart = sfPixel.stats.cart;
        }
      }

      function extractHostname(url) {
        var hostname;
        //find & remove protocol (http, ftp, etc.) and get hostname

        if (url.indexOf("//") > -1) {
          hostname = url.split('/')[2];
        }
        else {
          hostname = url.split('/')[0];
        }

        //find & remove port number
        hostname = hostname.split(':')[0];
        //find & remove "?"
        hostname = hostname.split('?')[0];

        return hostname;
      }

      function extractRootDomain(url) {
        var domain = extractHostname(url),
          splitArr = domain.split('.'),
          arrLen = splitArr.length;

        //extracting the root domain here
        //if there is a subdomain
        if (arrLen > 2) {
          domain = splitArr[arrLen - 2] + '.' + splitArr[arrLen - 1];
          //check to see if it's using a Country Code Top Level Domain (ccTLD) (i.e. ".me.uk")
          if (splitArr[arrLen - 2].length == 2 && splitArr[arrLen - 1].length == 2) {
            //this is using a ccTLD
            domain = splitArr[arrLen - 3] + '.' + domain;
          }
        }
        return domain;
      }

      var sitename = window.location.href;
      sitename = extractRootDomain(sitename);

      var updateLogic = {
        lastMessageTime: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: text,
        cart: cart,
        sitename: sitename,
        url: window.location.pathname,
        lastEvent: 'message',
        lastMessageAuthor: lastMessageAuthor
      };

      if(typeof sf_sdka.database.ServerValue._increment === 'function') {
        updateLogic['updates'] = sf_sdka.database.ServerValue._increment(1);
      } else {
        updateLogic['updates'] = sf_sdka.database.ServerValue.increment(1);
      }


      // Online logic.
      if(typeof window.sf_na !== 'undefined' && typeof window.sf_nm !== 'undefined'){
        updateLogic['loggedIn'] = 1;
        updateLogic['loggedInId'] = window.sf_nm;
        updateLogic['loggedInName'] = window.sf_na;
        updateLogic['loggedInNow'] = 1;
      } else {
        updateLogic['loggedInNow'] = 0;
      }

      sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid).update(updateLogic);

      var sfChatName = serviceChatData.serviceform.serviceChatName;

      if (type === 'bot') {
        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set({
          writing: 0,
          author: 1,
          bot: 1,
          agentName: sfChatName,
          page: window.sfChatFlow.page,
          timestamp: sf_sdka.database.ServerValue.TIMESTAMP,
          message: text
        });
      }
    }
  },
  chatSubmission: function(){
    var now = new Date();

    var chatbot = {
      'id': serviceChatData.serviceform.nid,
      'timestamp': now.getTime()
    }

    // Increase score of user by submitting a lead through the bot.
    sfPixel.stats.score = sfPixel.stats.score + 50;

    if(typeof sfPixel.stats.chatbotSubmissions === 'undefined'){
      sfPixel.stats.chatbotSubmissions = [];
    }
    sfPixel.stats.chatbotSubmissions.push(chatbot);
    sfPixel.post();

    sf_sdk.dataLayerEnd();

    sf_sdk.runCustomJs();
    sf_sdk.zapierPost();

    sf_sdk.newStatistics('submission','');

    sf_sdka.database().ref('/session/' + window.sfLivePid + '/' + sfPixel.stats.session + '/conversations/' + window.sfLiveChatCid).update({
      page: 'submitted'
    });

    if (typeof serviceChatData.serviceform.redirect !== 'undefined') {
      if (serviceChatData.serviceform.redirect !== '') {
        setTimeout(function () {
          window.location.href = serviceChatData.serviceform.redirect;
        }, 2000);
      }
    }
  },
  zapierPost: function () {
    var cH = serviceChatData.serviceform;

    if (typeof cH.zapier !== 'undefined') {
      if (cH.zapier !== '') {
        var xhr = new XMLHttpRequest();

        var json = JSON.stringify(sfChatFlow);
        var zapier_hook = cH.zapier;

        if (typeof zapier_hook !== 'undefined') {
          if (zapier_hook !== '') {
            var url = zapier_hook;

            var hooks = url.split(",");
            for (var i = 0; i < hooks.length; i++) {
              var hook = hooks[i].trim();
              xhr.open("POST", hook, true);
              xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
              xhr.send(json);
            }
          }
        }

      }
    }
  },

  runCustomJs: function () {
    var customJS = serviceChatData.serviceform.customJS;
    if (typeof customJS !== 'undefined') {
      if (customJS !== '') {
        if(sfPixel.checkForJson(customJS)){
          eval(JSON.parse(customJS));
        } else {
          eval(customJS);
        }
      }
    }
  },
  chatInteraction: function(){
    if (typeof sfPixel.chatbotInteractionMarked === 'undefined') {
      sfPixel.chatbotInteractionMarked = 1;
      var now = new Date();

      sf_sdk.dataLayerStart();

      sf_sdka.database().ref('/livechat/'+ window.sfLivePid +'/'+window.sfLiveChatCid).update({
        interaction: 1,
        lastEvent: 'interaction'
      });

      sf_sdk.newStatistics('interaction','');

      var extraButton = document.querySelector('.sf-chat-one-new');
      if(extraButton) {
        extraButton.style.display = 'none';
      }

      var chatbot = {
        'id': serviceChatData.serviceform.nid,
        'timestamp': now.getTime()
      }

      // Increase score of user by interacting with the bot.
      sfPixel.stats.score = sfPixel.stats.score + 20;

      if(typeof sfPixel.stats.chatbotInteractions === 'undefined'){
        sfPixel.stats.chatbotInteractions = [];
      }

      sfPixel.stats.chatbotInteractions.push(chatbot);
      sfPixel.post();
    }
  },
  livechatStart: function(){
    var now = new Date();

    var livechat = {
      'id': serviceChatData.serviceform.nid,
      'timestamp': now.getTime()
    }

    // Increase score of user by starting live chat.
    sfPixel.stats.score = sfPixel.stats.score + 40;

    if(typeof sfPixel.stats.livechats === 'undefined'){
      sfPixel.stats.livechats = [];
    }
    sfPixel.stats.livechats.push(livechat);
    sfPixel.post();
  },
  buildOptionActions: function(){

    var submitForm = document.getElementById('sf-chat-details-form');
    if(submitForm){
      submitForm.addEventListener('submit', function(e){
        e.preventDefault();
        var form = e.target;

        var allOptions = serviceChatData.serviceform.questions[sfChatFlow.page].options;
        var qid = serviceChatData.serviceform.questions[sfChatFlow.page].qid;

        //var allInputs = form.querySelectorAll('input');
        var getInputs = form.querySelectorAll(".servicechat-question.sf-textfield")
        var allInputs = [];
        for(var i = 0; i < getInputs.length; i++) {
          if(getInputs[i].querySelector('textarea')){
            allInputs.push(getInputs[i].querySelector('textarea'));
          } else {
            allInputs.push(getInputs[i].querySelector('input'))
          }
        }

        var message = '';
        var array = {};
        for (var ik = 0; ik < allInputs.length; ik++) {
          var textAnswer = allInputs[ik].value;
          textAnswer = textAnswer.trim();
          var option = allOptions[ik];

          if(ik) {
            message += ', ' + textAnswer;
          } else {
            message += textAnswer
          }

          if (option.fieldType === 'name') {
            sfChatFlow.customerName = textAnswer;
            sfChatFlow.customerFullName = textAnswer;
            array['first_name'] = textAnswer;
          }
          if (option.fieldType === 'firstName') {
            sfChatFlow.customerFirstName = textAnswer;
            sfChatFlow.customerName = textAnswer;
            array['first_name'] = textAnswer;
          }
          if (option.fieldType === 'lastName') {
            sfChatFlow.customerLastName = textAnswer;
            array['last_name'] = textAnswer;
          }
          if (option.fieldType === 'postalCode') {
            sfChatFlow.postalCode = textAnswer;
            array['postal_code'] = textAnswer;
          }
          if (option.fieldType === 'addressAutofill') {
            sfChatFlow.address = textAnswer;
            array['address'] = textAnswer;
          }
          if (option.fieldType === 'addressGoogleAutofill') {
            sfChatFlow.address = textAnswer;
            array['address'] = textAnswer;
          }

          if (option.fieldType === 'postalCodeNumbers') {
            sfChatFlow.postalCode = textAnswer;
            array['postal_code'] = textAnswer;
          }

          if (option.fieldType === 'address') {
            sfChatFlow.address = textAnswer;
          }
          if (option.fieldType === 'message') {
            sfChatFlow.message = textAnswer;
            array['message'] = textAnswer;
          }
          if (option.fieldType === 'message2') {
            sfChatFlow.longMessage = textAnswer;
            array['longMessage'] = textAnswer;
          }
          if (option.fieldType === 'phoneValidate') {
            sfChatFlow.customerPhone = textAnswer;
            array['phone'] = textAnswer;
          }
          if (option.fieldType === 'phone') {
            sfChatFlow.customerPhone = textAnswer;
            array['phone'] = textAnswer;
          }
          if (option.fieldType === 'email') {
            sfChatFlow.customerEmail = textAnswer;
            array['email'] = textAnswer;
          }

          var summaryItemAnswer = {
            "answer": [{
              "answer": textAnswer,
              "amount": '',
              "qid": qid
            }],
            "label": allOptions[ik].label,
            "question": sfChatFlow.page,
            "price": '',
            "qid": qid
          }

          sfChatFlow.summaryItems.push(summaryItemAnswer);

          var html = '<div class="sf-msg-wrp sf-current">' +
            '<div class="sf-message sf-current">'+textAnswer+'</div>' +
            '</div>';

          sf_sdk.pushToDiscussion(html);
        }

        if(message !== '') {
          sf_sdk.sendStuff('normal', message);
        }
        sf_sdk.updateContact('bulk', array);

        sf_sdk.clearOptions();
        sf_sdk.nextQuestion();
      });
    }

    var submitButton = document.querySelector('.servicechat-question-button.sf-faq-btn');
    if(submitButton){
      submitButton.addEventListener('click', function(){

        var html = '<div class="sf-msg-wrp sf-current">' +
          '<div class="sf-message sf-current">'+sf_sdk.tS('Closed faq')+'</div>' +
          '</div>';
        sf_sdk.pushToDiscussion(html);

        sf_sdk.nextQuestion();
      });
    }

    var options = document.getElementsByClassName('sf-conversation-cta');
    if(options) {
      for (var i = 0; i < options.length; i++) {
        options[i].addEventListener('click',function(){
          if(this.classList.contains('sf-multiple')){
            if(this.classList.contains('sf-selected')){
              this.classList.remove('sf-selected');
            }else{
              this.classList.add('sf-selected');
            }
          } else {
            var oid = this.getAttribute('oid');
            var qid = this.getAttribute('qid');

            sf_sdk.lastPage = qid;
            var now = new Date();

            sf_sdk.chatInteraction();

            sf_sdk.initBotDiscussion(qid, oid, 'start');
            sf_sdk.loader();
          }
        });
        options[i].addEventListener('onKeyDown',function(){
          if(this.classList.contains('sf-multiple')){
            this.classList.add('sf-selected');
          } else {
            var oid = this.getAttribute('oid');
            var qid = this.getAttribute('qid');

            sf_sdk.lastPage = qid;
            var now = new Date();

            sf_sdk.chatInteraction();

            sf_sdk.initBotDiscussion(qid, oid, 'start');
            sf_sdk.loader();
          }
        });
      }
    }

    var skipQ = document.querySelector('.skip-q');
    if(skipQ){
      skipQ.addEventListener('click', function(){
        var qid = textArea.getAttribute('question');
        var oid = textArea.getAttribute('option');

        var skipText = sf_sdk.tS('Skipped this question');

        sf_sdk.addAnswer(skipText, 'na');
        sf_sdk.updateRealtime('normal', skipText, '');
        sf_sdk.processMessage(sf_sdk.tS(skipText), qid);

        var html = '<div class="sf-msg-wrp sf-current">' +
          '<div class="sf-message sf-current">'+skipText+'</div>' +
          '</div>';
        sf_sdk.pushToDiscussion(html);

      });
    }

    // Dynamic back button functionality.
    if(typeof sf_sdk.lastPage !== 'undefined' && sf_sdk.lastPage !== '') {
      if(typeof serviceChatData.serviceform.backButton !== 'undefined' && serviceChatData.serviceform.backButton === 1 || typeof serviceChatData.serviceform.backButton !== 'undefined' && serviceChatData.serviceform.backButton === '1') {
        if(typeof serviceChatData.serviceform.questions[sfChatFlow.page] !== 'undefined') {
          var type = serviceChatData.serviceform.questions[sfChatFlow.page].type;
          if(type === 'radio' || type === 'textfields') {
            var backBtn = '<div class="sf-back-arrow">' +
              '<button type="button" class="sf-back-button" aria-label="'+sf_sdk.tS('Back')+'">' +
              '<span class="sf-back-button-icon"><span class="icon"><svg height="15" viewBox="0 0 24 24" class="sc-fznMAR hGNton"><path' +
              '    d="M20,11V13H8L13.5,18.5L12.08,19.92L4.16,12L12.08,4.08L13.5,5.5L8,11H20Z"></path></svg></span></span><span' +
              '    class="sf-back-button-label" tabindex="0" role="button">' + sf_sdk.tS('Back') + '</span></button></div>';

            sf_sdk.pushToDiscussion(backBtn);

            var hep = document.querySelector('.sf-back-arrow');

            hep.addEventListener('click', function () {
              var page = sf_sdk.getPageFromId(sf_sdk.lastPage);
              sfChatFlow.page = page;
              sf_sdk.lastPage = '';
              sfChatFlow.summaryItems.splice(sfChatFlow.summaryItems.length, 1);
              sf_sdk.renderNextQuestion();
            });
          }
        }
      }
    }

    var adminQuestion = document.querySelector('.servicechat-admin-question .sf-send');
    var textArea = document.querySelector('.servicechat-admin-question textarea, .servicechat-admin-question input');

    if(adminQuestion){
      adminQuestion.addEventListener('click',function(){
        var textArea = document.querySelector('.servicechat-admin-question textarea, .servicechat-admin-question input');
        var question = textArea.getAttribute('question');
        var textAnswer = textArea.value;
        var qid = textArea.getAttribute('question');
        var oid = textArea.getAttribute('option');

        var curQuestions = window.serviceChatData.serviceform.questions.find( function(item) {
          return item.qid === qid
        })
        if (textAnswer.trim() !== '') {
          if (sf_sdk.validateField(qid, oid, textAnswer)) {
            sf_sdk.processMessage(textAnswer, curQuestions);
          }
        }
      });
    }

    if(textArea) {
      textArea.addEventListener('keydown', function (event) {
        if (event.keyCode === 13) {
          if(event.target.classList.contains("sf-large-txt")){
          } else {
            event.preventDefault();
          }
          if (!event.shiftKey) {
            var multiple = document.querySelector('#sf-chat-details-form');
            if(multiple){
              if(event.target.classList.contains("sf-large-txt")) {
              } else {
                document.querySelector('.servicechat-question-button').click();
              }
            } else {
              if(event.target.classList.contains("sf-large-txt")){
                // Stop from sending with enter if classList contains sf-large-txt.
              } else {
                var textAnswer = this.value;
                if (textAnswer.trim() !== '') {
                  var qid = this.getAttribute('question');
                  var oid = this.getAttribute('option');

                  if (sf_sdk.validateField(qid, oid, textAnswer)) {
                    var curQuestions = window.serviceChatData.serviceform.questions.find(function (item) {
                      return item.qid === qid
                    })
                    sf_sdk.processMessage(textAnswer, curQuestions, oid);
                  }
                }
              }
            }
          }
        }
      });

      textArea.addEventListener("input", OnInputAnswers, false);
      function OnInputAnswers() {
        var el = this;
        el.style.cssText = 'height:auto; padding-left:0';
        el.style.cssText = '-moz-box-sizing:content-box';
        el.style.cssText = 'height:' + el.scrollHeight + 'px';
        sf_sdk.scrollBottom()
      }

    }
  },
  processMessage: function(text,qid , oid = 0){
    sf_sdk.clearOptions();

    sf_sdk.nextQuestion(qid, oid);
  },
  addCustomAnswer: function(text){
    var html = '<div class="sf-msg-wrp sf-current">' +
      '<div class="sf-message sf-current">'+text+'</div>' +
      '</div>';

    sf_sdk.pushToDiscussion(html);
  },
  clearOptions: function() {
    var options = document.getElementsByClassName('sf-options');
    for (var i = 0; i < options.length; i++) {
      sfPixel.sfRemoveElement(options[i]);
    }

    var faqOptions = document.querySelector('.sf-faq-list');
    if(faqOptions){
      sfPixel.sfRemoveElement(faqOptions);
    }

    var backArrows = document.getElementsByClassName('sf-back-arrow');
    for (var i = 0; i < backArrows.length; i++) {
      sfPixel.sfRemoveElement(backArrows[i]);
    }

    var sfSearch = document.getElementsByClassName('sf-search');
    for (var i = sfSearch.length - 1; i >= 0; i--) {
      sfPixel.sfRemoveElement(sfSearch[i]);
    }

    var adminTime = document.querySelector('.servicechat-admin-time');
    if(adminTime){
      sfPixel.sfRemoveElement(adminTime);
    }
  },
  buildNextOptions: function(page){

    if(page === 'undefined'){
      page = 0;
    } else if(page === 'submit'){
      return;
    }

    page = parseInt(page);

    sf_sdk.clearOptions();
    var sfData = serviceChatData.serviceform;
    var options = sfData.questions[page];
    var question = sfData.questions[page];
    if(typeof question !== 'undefined') {
      var type = question.type;

      var qid = options.qid;
      if(window.sfChatFlowStats) {
        var isItemExists = false;
        for (var index = 0; index < window.sfChatFlowStats.questionViews.length; index++) {
          var item = window.sfChatFlowStats.questionViews[index];
          if(item.qid == qid) {
            window.sfChatFlowStats.questionViews[index].view = 1;
            isItemExists = true;
            break;
          }
        }

        if( !isItemExists ) {
          window.sfChatFlowStats.questionViews.push( {
            qid:qid,
            view: 1,
            interaction:0
          })
        }
      }

      options = options.options;

      var html = '<div class="sf-options sf-options-type-' + type + '">';

      var send = '<div class="sf-send"><!--?xml version="1.0" encoding="iso-8859-1"?-->' +
        '<svg fill="#00000080" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="535.5px" height="535.5px" viewBox="0 0 535.5 535.5" style="enable-background:new 0 0 535.5 535.5;" xml:space="preserve">' +
        '<g>' +
        '\t<g id="send">' +
        '\t\t<polygon points="0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75 \t\t"></polygon>' +
        '\t</g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '</svg>' +
        '</div>';

      window.saveBtn = send;

      if (type === 'textfields') {

        var optionCount = options.length;
        var multipleQuestions = 0;

        function prefillFunction(option) {
          if (option.fieldType && sf_sdk.getFromLocalStorage(option.fieldType)) {
            return sf_sdk.getFromLocalStorage(option.fieldType)
          }
          return '';
        }

        if(optionCount > 1) {
          multipleQuestions = 1;
          send = '';
          html += '<form id="sf-chat-details-form"><div class="sf-multiple-questions-wrapper">';
          for (var i = 0; i < options.length; i++) {
            var skipHTML = '';
            if (options[i].required !== '1' && multipleQuestions === 0) {
              skipHTML = '<div class="skip-q" question="' + qid + '" option="skip">' + sf_sdk.tS('Skip') + '</div>';
            }

            var prefillData = prefillFunction(options[i]);

            var placeholder = options[i].label;
            if(options[i].placeholder){
              placeholder = options[i].placeholder;
            }

            var type = 'textfield';
            if(options[i].fieldType === 'phoneValidate' || options[i].fieldType === "phone") {
              type = 'tel';
            } else if(options[i].fieldType === 'email') {
              type = 'email';
            }

            var required = ''
            if (options[i].required === '1') {
              required = 'required';
            }

            var input = '<input '+required+' rows="1" placeholder="' + placeholder + '" class="sf-chat-textfields sf-awr-txt" type="'+type+'" id="sf-'+qid+'-'+i+'" question="' + qid + '" option="' + i + '" value="'+prefillData+'">';

            if(options[i].fieldType === 'message2') {
              input = '<textarea '+required+' rows="1" placeholder="' + placeholder + '" class="sf-chat-textfields sf-awr-txt sf-large-txt" type="'+type+'" id="sf-'+qid+'-'+i+'" question="' + qid + '" option="' + i + '" value="'+prefillData+'"></textarea>';
            }

            if(options[i].fieldType === 'phoneValidate' || options[i].fieldType === "addressGoogleAutofill" || options[i].fieldType === "addressAutofill"){
              input = '<input rows="1" placeholder="' + options[i].label + '" class="sf-chat-textfields sf-phone-txt" type="textfield" question="' + qid + '" option="' + i + '" value="'+prefillData+'">' + send;
            }

            var requiredSystem = '';
            if(options[i].required === '1'){
              requiredSystem = ' *';
            }

            var label = '';
            if(multipleQuestions) {
              label = '<div class="sf-texfield-label">' + options[i].label + requiredSystem+'</div>';
            }

            html += '<div class="servicechat-admin-question sf-'+options[i].type+'" question="' + qid + '" option="' + options[i].oid + '">' +
              '<div class="servicechat-question sf-'+options[i].type+'">' +
              label +
              input +
              skipHTML +
              '</div>' +
              '</div>';
          }

        } else {
          for (var i = 0; i < options.length; i++) {
            var skipHTML = '';
            if (options[i].required !== '1') {
              skipHTML = '<div class="skip-q" question="' + qid + '" option="skip">' + sf_sdk.tS('Skip') + '</div>';
            }

            var prefillData = prefillFunction(options[i]);

            var isLarge = '';
            if(options[i].fieldType === 'message2') {
              isLarge = 'sf-large-txt';
            }

            var input = '<textarea rows="1" placeholder="' + options[i].label + '" class="sf-chat-textfields sf-awr-txt '+ isLarge +'" type="textfield" question="' + qid + '" option="' + i + '">' + prefillData + '</textarea>' + send;
            if (options[i].fieldType === 'phoneValidate' || options[i].fieldType === "addressGoogleAutofill" || options[i].fieldType === "addressAutofill") {
              input = '<input rows="1" placeholder="' + options[i].label + '" class="sf-chat-textfields sf-phone-txt" type="textfield" question="' + qid + '" option="' + i + '" value="'+prefillData+'">' + send;
            }

            html += '<div class="servicechat-admin-question sf-' + options[i].fieldType + '" question="' + qid + '" option="' + options[i].oid + '">' +
              '<div class="servicechat-question sf-' + options[i].fieldType + '">' +
              input +
              skipHTML +
              '</div>' +
              '</div>';
          }
        }

        if(options.length === 0){
          var skipHTML = '';

          var prefillData = prefillFunction(options[i]);

          var input = '<textarea rows="1" placeholder="'+question.title+'" class="sf-chat-textfields sf-awr-txt" type="textfield" question="' + qid + '" option="' + i + '">' + prefillData + '</textarea>' + send;

          html += '<div  class="servicechat-admin-question sf-error-type" question="' + qid + '" option="0">' +
            '<div class="servicechat-question sf-error-type">' +
            input +
            skipHTML +
            '</div>' +
            '</div>';
        }
        if(optionCount > 1) {
          var button = '<button type="submit" class="servicechat-question-button" style="background-color:' + serviceChatData.serviceform.color1 + '" question="' + qid + '">' + sf_sdk.tS('Continue') + '</button>';

          html += '</div>';
          html += '<div class="sf-multiple-button-wrapper">'+button+'</div>';
          html += '</form>';
        }
      }
      else if (type === 'statement' || type === 'html') {
        sf_sdk.loader();

        var time = 2000;
        if(typeof question.defaultWaitingTime !== 'undefined' && question.defaultWaitingTime !== ''){
          time = question.defaultWaitingTime;
        }

        // Helper function to stop bot if there is a live chat.
        async function noLiveChat(){
          let noLiveUser = 1;
          await sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid).once('value').then(function (snapshot) {
            snapshot.forEach(function (childSnapshot) {
              var childData = childSnapshot.val();
              if (childData.typeValue === 'joined') {
                noLiveUser = 0;
              } else if (childData.livechatMessage === 1) {
                noLiveUser = 0;
              }
            });

          });
          return noLiveUser;
        }

        sf_sdk.waitHelper = setTimeout(async function () {
          var noLiveUser = await noLiveChat();
          if(!sf_sdk.agentJoined() && noLiveUser){
            sf_sdk.nextQuestion(question, '');
          }
        }, time);

      }
      else if (type === 'livechat') {
        if(sf_sdk.livechatInitiated() === false) {
          var livechatTeam = question.livechatAgents;

          if (typeof livechatTeam === 'undefined' || livechatTeam === '') {
            livechatTeam = "0";

            if(typeof serviceChatData.serviceform.defaultTeam !== 'undefined'){
              livechatTeam = serviceChatData.serviceform.defaultTeam;
            }
          }

          sf_sdk.sendNotifyLiveChat(livechatTeam, "", "stop");

          window.livechatMessage = 1;

          if(document.querySelector('#sf-inline-fullpage')){
            document.querySelector('#sf-inline-fullpage').classList.add('livechat-box-visible');
          }
        }
      }
      else if (type === 'carousel'){

        sfPixel.loadScript2(sfPixel.analyticsRoot + 'chat/components/sf-carousel/sf-carousel.js', run);

        function run(){
          sf_carousel.init(serviceChatData.serviceform.questions[sfChatFlow.page]);
        }
      }
      else if (type === 'calendar') {
        if(question.calendarType === 'calendly'){
          if(sfPixel.stats.mode !== 'livechat') {
            sf_sdk.openBox();
            sf_sdk.livechatMode();
          }

          sfPixel.loadScript2('https://assets.calendly.com/assets/external/widget.js',loadCalendly);

          function loadCalendly() {
            var html = '<div id="sf-calendly"></div>';
            sf_sdk.pushToDiscussion(html);
            document.querySelector('#sf-prem-chat').classList.add('calendly');

            if(typeof window.serviceChatDynamicCalendly !== 'undefined'){
              question.calendarUrl = window.serviceChatDynamicCalendly;
            }

            var theUrl = question.calendarUrl + '?hide_event_type_details=1&fullurl='+window.location.href;

            if(typeof window.serviceChatDynamicEmail !== 'undefined' && window.serviceChatDynamicEmail !== ''){
              theUrl = question.calendarUrl + '?hide_event_type_details=1&fullurl='+window.location.href+'&dynamicEmail='+window.serviceChatDynamicEmail;
            }

            var array = {
              url: theUrl,
              parentElement: document.querySelector('#sf-prem-chat #sf-calendly'),
              prefill: {
                name: "",
                email: ""
              }
            }

            if(typeof sfChatFlow.customerFirstName !== 'undefined') {
              array.prefill.name = sfChatFlow.customerFirstName;
            } else if (typeof sfChatFlow.customerName !== 'undefined'){
              array.prefill.name = sfChatFlow.customerName;
            }
            array.prefill.email = sfChatFlow.customerEmail;

            Calendly.initInlineWidget(array);

            // calendly event listener
            function isCalendlyEvent(e) {
              return e.data.event &&
                e.data.event.indexOf('calendly') === 0;
            };

            window.addEventListener(
              'message',
              function(e) {
                if (isCalendlyEvent(e)) {
                  if(e.data.event === 'calendly.event_scheduled') {

                    var url = e.data.payload.event.uri;
                    url = url.substring(url.lastIndexOf('/') + 1);

                    var summaryItemAnswer = {
                      "answer": [{
                        "answer": 'Calendly Event ID: ' + url + ' Direct link: https://calendly.com/app/scheduled_events/user/me?period=upcoming&uuid='+ url,
                        "amount": '',
                        "qid": "calendly"
                      }],
                      "label": "Calendly",
                      "question": sfChatFlow.page,
                      "price": '',
                      "qid": "calendly"
                    }

                    sfChatFlow.summaryItems.push(summaryItemAnswer);

                    var calendly = document.querySelector('#sf-calendly');
                    sfPixel.sfRemoveElement(calendly);

                    sf_sdk.addAdminAnswer(sf_sdk.tS('Event scheduled. You will receive a calendar invite in your email.'));
                    document.querySelector('#sf-prem-chat').classList.remove('calendly');

                    setTimeout(function () {
                      sf_sdk.nextQuestion();
                    }, 1000);
                  }
                }
              }
            );
          }

        } else {
          if (typeof flatpickr !== 'undefined') {
            sf_sdk.addCalendarQuestion();
          } else {
            sfPixel.loadScript2(
              "https://cdn.jsdelivr.net/npm/flatpickr",
              otherScript
            );

            function otherScript() {
              var language = sfData.language;
              if (language !== 'en') {
                sfPixel.loadScript2("https://npmcdn.com/flatpickr/dist/l10n/" + language + ".js", sf_sdk.addCalendarQuestion);
              } else {
                sf_sdk.addCalendarQuestion();
              }
            }
          }
        }
      }
      else if (type === 'search'){
        loadScript2('https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearch.min.js', loadSecond);

        function loadSecond(){
          loadScript2('https://cdn.jsdelivr.net/npm/instantsearch.js@^4.0.0', algoliaSearch);
        }
        function algoliaSearch() {
          setTimeout(function(){

            var cH = serviceChatData.serviceform;
            var algoliaApiKey = cH.questions[page].algoliaApiKey;
            var algoliaAppId = cH.questions[page].algoliaAppId;
            var algoliaIndexName = cH.questions[page].algoliaIndexName;
            var searchTitle = cH.questions[page].searchTitle;
            var searchBoxPlaceholder = cH.questions[page].searchBoxPlaceholder;
            var searchCategoryName = cH.questions[page].searchCategoryName;
            var searchCategory = cH.questions[page].searchCategory;
            var searchSubCategory = cH.questions[page].searchSubCategory;
            var searchSubCategoryName = cH.questions[page].searchSubCategoryName;
            var nameAttribute = cH.questions[page].nameAttribute;
            var priceAttribute = cH.questions[page].priceAttribute;
            var linkAttribute = cH.questions[page].linkAttribute;
            var imageAttribute = cH.questions[page].imageAttribute;
            var descAttribute = cH.questions[page].descAttribute;
            var limitCategory = cH.questions[page].limitCategory;
            var limitCategoryName = cH.questions[page].limitCategoryName;
            var sfSearchAction = cH.questions[page].sfSearchAction;
            var valueAttribute = cH.questions[page].valueAttribute;

            var link = document.createElement("link");
            link.rel = "stylesheet";
            link.href = "https://cdn.jsdelivr.net/npm/instantsearch.css@7.3.1/themes/reset-min.css";
            document.getElementsByTagName("head")[0].appendChild(link);

            html = '<div class="sf-search">' +
                '<div class="sf-category-group">'+
                '<div id="sf-searchbox"></div>'+
                '</div>'+
                '<div id="sf-clear-refinements"></div>'+
                '<div class="sf-categories">'+
                '<div class="sf-category-group-1">'+
                '<div class="sf-search-header">'+searchCategoryName+'</div>'+
                '<div id="sf-category"></div>'+
                '</div>'+
                '<div class="sf-category-group-2" style="display:none;">'+
                '<div class="sf-search-header">'+searchSubCategoryName+'</div>'+
                '<div id="sf-category-2"></div>'+
                '</div></div>'+
                '<div class="sf-results-group">'+
                '<div class="sf-search-header">'+sf_sdk.tS('Results')+'</div>'+
                '<div id="sf-products"></div>'+
                '<div id="sf-pagination"></div>' +
                '</div>'+
                '</div>';

            if(document.querySelector('.sf-search')){
              sfPixel.sfRemoveElement(document.querySelector('.sf-search'))
            }

            sf_sdk.pushToDiscussion(html);

            var backBtn = 'https://app.serviceform.com/sites/all/themes/servicehired/images/back-white.svg';

            if(sf_sdk.lightOrDark(cH.color1) === 'light'){
              //backBtn = 'https://app.serviceform.com/sites/all/themes/servicehired/images/back-black.svg';
            }

            var topHTML = '<div class="sf-search-header-top" style="background-color:' + serviceChatData.serviceform.color + '">' +
                '<div class="sf-search-name">'+searchTitle+'</div><div class="serviceform-close serviceform-search-close"><img src="'+backBtn+'"></div></div>';
            var top = document.querySelector('#sf-prem-chat .livechat-header');
            top.insertAdjacentHTML('beforeend', topHTML);

            document.querySelector('#sf-prem-chat').classList.add('sf-search-on');

            var close = document.querySelector('#sf-prem-chat .serviceform-search-close');
            if(close){
              close.addEventListener('click',function(){
                sf_sdk.sfCloseSearch();
                sf_sdk.nextQuestion();
              });
            }

            var searchState = {
              indexName: algoliaIndexName,
              searchClient: algoliasearch(algoliaAppId, algoliaApiKey),
            };

            if(window.sfDynamicSearchQuery !== 'undefined' && window.sfDynamicSearchQuery !== ''){
              searchState.initialUiState = {
                [algoliaIndexName]: {
                  query: window.sfDynamicSearchQuery
                }
              }

            }

            var search = instantsearch(searchState);

            var currency = cH.currency;
            if(typeof currency === 'undefined'){
              currency = '';
            }

            var priceHTML = '';
            if(typeof priceAttribute !== 'undefined' && priceAttribute !== '') {
              priceHTML = '<div class="sf-search-price">'+currency+' {{'+priceAttribute+'}}</div>';
            }

            var descriptionHTML = '';
            if(typeof descAttribute !== 'undefined' && descAttribute !== '') {
              descriptionHTML = '<div class="sf-search-description">'+descAttribute+'</div>';
            }

            var imageHtml = '';
            if(typeof imageAttribute !== 'undefined' && imageAttribute !== '') {
              imageHtml = '<div class="sf-search-item-image"><img src="'+imageAttribute+'"></div>';
            }

            var templateHTML = '<span class="sf-search-item-no-click" token="'+valueAttribute+'">' +
                imageHtml +
                '<div class="sf-search-name">'+nameAttribute+'</div>' +
                descriptionHTML +
                priceHTML +
                '</span>';

            if(typeof linkAttribute !== 'undefined' && linkAttribute !== '') {
              templateHTML = '<a target="_blank" href="'+linkAttribute+'">' +
                  '<span class="sf-search-item-no-click" token="'+valueAttribute+'">' +
                  imageHtml +
                  '<div class="sf-search-box">'+
                  '<div class="sf-search-name">'+nameAttribute+'</div>' +
                  descriptionHTML +
                  '</div>'+
                  priceHTML +
                  '</span>'+
                  '</a>';
            }


            if(typeof limitCategory !== 'undefined' && limitCategory !== ''){

              var name = sf_sdk.tS('Show more');
              if(typeof limitCategoryName !== 'undefined' && limitCategoryName !== '') {
                name = limitCategoryName;
              }
              search.addWidgets([
                // 4. Make the brands refinable
                instantsearch.widgets.refinementList({
                  container: '#sf-category',
                  attribute: searchCategory,
                  operator: 'and',
                  sortBy: ['name:asc'],
                  showMore: true,
                  limit: limitCategory,
                  showMoreLimit: 200,
                  templates: {
                    showMoreText: '{{^isShowingMore}}'+name+'{{/isShowingMore}}',
                  },
                })
              ]);
            } else {
              search.addWidgets([
                // 4. Make the brands refinable
                instantsearch.widgets.refinementList({
                  container: '#sf-category',
                  attribute: searchCategory,
                  operator: 'and',
                  sortBy: ['name:asc'],
                })
              ]);
            }


            search.addWidgets([
              instantsearch.widgets.clearRefinements({
                container: '#sf-clear-refinements',
                templates: {
                  resetLabel: sf_sdk.tS('Clear')
                }
              }),
              instantsearch.widgets.searchBox({
                container: '#sf-searchbox',
                placeholder: searchBoxPlaceholder,
                showSubmit: false
              }),

              // 3. Plug the search results into the product container
              instantsearch.widgets.hits({
                container: '#sf-products',
                templates: {
                  item: templateHTML
                },
                showMore: true,
                limit: 100
              }),

              // 4. Make the brands refinable
              instantsearch.widgets.refinementList({
                container: '#sf-category-2',
                attribute: searchSubCategory,
                operator: 'and'
              }),
              instantsearch.widgets.pagination({
                container: '#sf-pagination'
              })
            ]);

            search.start('riskikoulutus');

            var onRenderHandler = function() {

              document.querySelector('#sf-prem-chat .sf-search').scrollTop = 0;

              var refinements = search.helper.state.facetsRefinements;
              var category = refinements[Object.keys(refinements)[0]].length;
              var category2 = 0;
              if(typeof refinements[Object.keys(refinements)[1]] !== 'undefined') {
                category2 = refinements[Object.keys(refinements)[1]].length;
              }

              if(category > 0){
                document.querySelector('#sf-prem-chat .sf-category-group-2').style.display = 'block';
              } else {
                document.querySelector('#sf-prem-chat .sf-category-group-2').style.display = 'none';
              }

              if(!document.querySelector('#sf-prem-chat #sf-searchbox')) {
                if (category2 > 0) {
                  document.querySelector('#sf-prem-chat .sf-results-group').style.display = 'block';
                }
                else {
                  document.querySelector('#sf-prem-chat .sf-results-group').style.display = 'none';
                }
              }

              if (typeof sfSearchAction !== 'undefined' && sfSearchAction !== '') {

                var searchItem = document.querySelectorAll('#sf-prem-chat .sf-search-item-no-click');
                for (var i = 0; i < searchItem.length; i++) {
                  if(!searchItem[i].classList.contains('sf-initiated')){
                    searchItem[i].addEventListener('click',function(){

                      sf_sdk.addCustomAnswer(this.textContent);
                      sfChatFlow.searchValue = this.getAttribute('token');
                      sf_sdk.nextQuestion(this.textContent);

                      var summaryItemAnswer = {
                        "answer": [{
                          "answer": this.textContent,
                          "amount": '',
                          "qid": "search"
                        }],
                        "label": 'Search question',
                        "question": sfChatFlow.page,
                        "price": '',
                        "qid": "search"
                      }

                      sfChatFlow.summaryItems.push(summaryItemAnswer);
                      sf_sdk.sfCloseSearch();

                    });
                    searchItem[i].classList.add('sf-initiated');
                  }
                }
              }

            };
            search.on('render', onRenderHandler);

          }, 500);
        }
      }
      else if (type === 'knowledgebase'){

        var button = '<div class="sf-text-right">' +
          '<button type="button" class="servicechat-question-button sf-faq-btn" style="background-color:' + serviceChatData.serviceform.color1 + '">' + sf_sdk.tS('Continue') + '</button>' +
          '</div>';

        var faq = '<div class="sf-faq-list"><div class="sf-intro-block">' +
          '<div class="sf-intro-block-header">'+sf_sdk.tS('Frequently asked questions')+'</div>'+
          '<div class="sf-intro-block-content-articles">' +
          '<div class="sf-search-box-wrapper">' +
          '<input id="sf-article-search" placeholder="'+sf_sdk.tS('Search here')+'...">'+
          '<div id="sf-articles"></div>' +
          '</div>'+
          '</div>' +
          '</div>' + button + '</div>';

        sf_sdk.pushToDiscussion(faq);

        sfPixel.loadScript2('https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js', sf_sdk.startFuseSearch);
      }
      else if (type === 'file') {
        loadFileUpload();

        function loadFileUpload() {

          UPLOADCARE_PUBLIC_KEY = 'e5d07ed1c2093facad3c';
          UPLOADCARE_LOCALE_TRANSLATIONS = {
            buttons: {
              choose: {
                files: {
                  one: sf_sdk.tS('Click to upload (Max 5MB)'),
                  other: 'Upload your documents '
                },
                images: {
                  one: 'Upload your photo',
                  other: 'Upload your photos'
                }
              }
            }
          };

          if (typeof uploadcare === 'undefined') {
            sfPixel.loadScript2('https://ucarecdn.com/libs/widget/3.x/uploadcare.full.min.js', sf_sdk.addFileUploadQuestion);
          } else {
            sf_sdk.addFileUploadQuestion();
          }
        }
      }
      else {

        var multiple = question.sfHowMany;

        if(multiple === '4'){
          html += '<div class="sf-wrapper" question="' + page + '">' +
            '<div class="servicechat-subtitle">' + sf_sdk.tS('Choose the most suitable option') + '.</div>' +
            '<input list="sf-datalist-'+page+'" question="'+qid+'" class="sf-chat-datalist" placeholder="' + sf_sdk.tS('Choose one') + '." id="sf-datalist-choice-'+page+'" name="sf-datalist-choice-'+page+'" />'+
            '<datalist class="servicechat-data-list" id="sf-datalist-'+page+'" question="' + page + '">';
        } else if (multiple === '5'){

          if(document.querySelector('.multiselect-dropdown')){
            sfPixel.sfRemoveElement(document.querySelector('.multiselect-dropdown'));
          }

          html = '<div class="sf-wrapper sf-options" question="' + page + '" option="' + i + '">' +
              '<div class="servicechat-subtitle">' + sf_sdk.tS('Choose the most suitable options') + '.</div>' +
          '<select id="sf-multiselect-box" class="servicechat-select-list" multiple question="' + page + '">';
        } else if (multiple === '3') {
          html += '<div class="sf-wrapper" question="' + page + '" option="' + i + '">' +
            '<div class="servicechat-subtitle">' + sf_sdk.tS('Choose the most suitable option') + '.</div>' +
            '<select class="servicechat-select-list" question="' + page + '">';
        } else if(multiple === '2'){

          html += '<div class="servicechat-subtitle">' + sf_sdk.tS('Choose the most suitable options') + '.</div>';
        }

        for (var i = 0; i < options.length; i++) {
          if (typeof options[i].oid === 'undefined') {
            options[i].oid = i;
          }

          var show = sf_sdk.showOption(options[i]);

          if (multiple === '3' && show || multiple === '4' && show || multiple === '5' && show) {
            if(typeof options[i].disabled !== 'undefined' && multiple === '3'){
              html += '<option disabled="true" value="' + options[i].answer + '">' + options[i].answer + '</option>';
            } else {
              html += '<option qid="' + qid + '" oid="' + options[i].oid + '" data-value="' + options[i].oid + '" value="' + options[i].answer + '">' + options[i].answer + '</option>';
            }
          } else if (multiple === '2') {
            html += '<div class="sf-conversation-cta sf-multiple" question="' + qid + '" option="' + options[i].oid + '" role="button" tabindex="0">' +
              '<span class="sf-multiple"></span>' + options[i].answer + '</div>';
          } else {
            if (show) {
              html += sf_sdk.optionHTML(options[i], qid);
            }
          }
        }

        if (multiple === '3' || multiple === '2' || multiple === '5') {
          var style = '<style>select.servicechat-select-list { width: 100%; height: 40px; border: 1px solid #4689c2; font-size: 14px;}</style>';
          var button = '<button type="button" class="servicechat-question-button" style="background-color:' + serviceChatData.serviceform.color1 + '" question="' + page + '" option="' + i + '">' + sf_sdk.tS('Continue') + '</button>';
          html += '</select>' + button + '</div>' + style;
        }
        else if(multiple === '4'){
          var button = '<button type="button" class="servicechat-question-button" style="background-color:' + serviceChatData.serviceform.color1 + '" question="' + page + '" option="' + i + '">' + sf_sdk.tS('Continue') + '</button>';
          html += '</datalist>' + button + '</div>';
        }
      }

      html += '</div>';

      sf_sdk.pushToDiscussion(html);

      if(multiple === '5'){
        function runIt(){
          MultiselectDropdown(window.MultiselectDropdownOptions);
        }
        sfPixel.loadScript2('https://cdn.serviceform.com/serviceform-tools/chat/components/multiselect-dropdown/multiselect-dropdown.js', runIt);
      }

      if(type === 'textfields') {
        sf_sdk.loadIntTel();
        if(typeof window.sfDevMode === 'undefined') {
          var textField = document.querySelector(".sf-chat-textfields");
          if (textField) {
            textField.focus();
          }
        }
      }

      if (multiple === '3') {
        document.querySelector('.servicechat-question-button').addEventListener("click", function () {
          var e = document.querySelector(".servicechat-select-list");
          var qid = e.options[e.selectedIndex].getAttribute('qid');
          var oid = e.options[e.selectedIndex].getAttribute('oid');

          sf_sdk.chatInteraction();

          sf_sdk.initBotDiscussion(qid, oid, 'start');
          sf_sdk.loader();
        });
      } else if (multiple === '5') {
        document.querySelector('.servicechat-question-button').addEventListener("click", function () {

          sf_sdk.chatInteraction();

          var options = document.getElementById('sf-multiselect-box').selectedOptions;

          var selections = [];
          if (options) {
            for (var i = 0; i < options.length; i++) {
              var oid = options[i].getAttribute('oid');
              var qid = options[i].getAttribute('qid');

              var selection = {
                'qid': qid,
                'oid': oid
              }

              selections.push(selection);
            }

            sf_sdk.initBotDiscussion(qid, selections, 'start');
            sf_sdk.loader();
          }
        });
      } else if (multiple === '2') {
        document.querySelector('.servicechat-question-button').addEventListener("click", function () {

          sf_sdk.chatInteraction();

          var options = document.querySelectorAll('.sf-selected');
          var selections = [];
          if (options) {
            for (var i = 0; i < options.length; i++) {
              var oid = options[i].getAttribute('option');
              var qid = options[i].getAttribute('question');

              var selection = {
                'qid': qid,
                'oid': oid
              }

              selections.push(selection);
            }

            sf_sdk.chatInteraction();

            sf_sdk.initBotDiscussion(qid, selections, 'start');
            sf_sdk.loader();
          }
        });
      } else if (multiple === '4') {
        document.querySelector('.servicechat-question-button').addEventListener("click", function () {

          sf_sdk.chatInteraction();

          var option = document.querySelector('.sf-chat-datalist');
          var selections = [];
          if (option) {
            var value = option.value;
            var oid = document.querySelector(".servicechat-data-list option[value='"+value+"']").getAttribute('data-value');

            var qid = option.getAttribute('question');

            var selection = {
              'qid': qid,
              'oid': oid
            }

            selections.push(selection);

            sf_sdk.chatInteraction();

            sf_sdk.initBotDiscussion(qid, selections, 'start');
            sf_sdk.loader();
          }
        });
      }

      sf_sdk.buildOptionActions();
    }
  },
  initLivechatWithDefault: function(type){
    if (typeof livechatTeam === 'undefined' || livechatTeam === '') {
      livechatTeam = "0";

      if(typeof serviceChatData.serviceform.defaultTeam !== 'undefined'){
        livechatTeam = serviceChatData.serviceform.defaultTeam;
      }
    }

    sf_sdk.sendNotifyLiveChat(livechatTeam, "", type);

    window.livechatMessage = 1;

    if(document.querySelector('#sf-inline-fullpage')){
      document.querySelector('#sf-inline-fullpage').classList.add('livechat-box-visible');
    }
  },
  sfCloseSearch: function(){
    var headerTop = document.querySelector('#sf-prem-chat .sf-search-header-top');
    sfPixel.sfRemoveElement(headerTop);

    var sfSearch = document.getElementsByClassName('sf-search');
    for (var i = sfSearch.length - 1; i >= 0; i--) {
      sfPixel.sfRemoveElement(sfSearch[i]);
    }

    document.querySelector('#sf-prem-chat').classList.remove('sf-search-on');
    sf_sdk.nextQuestion();
  },
  popup: function(type, text, image, name){
    var s = serviceChatData.serviceform;
    var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');

    if(typeof type === 'undefined'){
      if(typeof s.popupType !== 'undefined' && s.popupType === '2'){
        type = 'livechat';
      } else {
        type = 'bot';
      }

      name = s.serviceChatName;
      image = s.serviceChatImage;
      text = s.chatPushSettingsIntroText;

      if (typeof text === 'undefined') {
        text = '';
      }
    }

    if (typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '') {
      var qNumber = parseInt(sf_sdk.getPageFromId(window.sfDynamicStartPage));
      text = serviceChatData.serviceform.questions[qNumber].title;
    }

    if(typeof window.sfDynamicPopupText !== 'undefined' && window.sfDynamicPopupText !== ''){
      text = window.sfDynamicPopupText;
    }

    var ctaButton = '';
    if(typeof s.ctaButtonText !== 'undefined' && s.ctaButtonText !== ''){
      ctaButton = '<div class="sf-click-cta-button" role="button" tabindex="0">'+sf_sdk.stringTokens(s.ctaButtonText)+'</div>';
    }

    var extraClass = '';
    if(typeof s.popupMobileDisabled !== 'undefined' && s.popupMobileDisabled === '1'){
      extraClass = 'hide-mobile';
    }

    var hideAgent = '';
    if(typeof s.hidePopupImage !== 'undefined' && s.hidePopupImage === '1'){
      hideAgent = 'hide-agent';
    }

    if(sf_sdk.isClosed() && livechatId === '' || sf_sdk.isClosed() && type === 'livechat' || typeof window.sfDevMode !== 'undefined' && window.sfDevMode === 1 && sf_sdk.isClosed()) {
      var pushed = document.querySelector('.sf-push');
      if (pushed) {
        sfPixel.sfRemoveElement(pushed);
      }

      var html = '';

      if (type === 'bot') {
        html = '<div class="sf-push '+extraClass+'">' +
          '<div class="push-close"><img class="sf-header-close" src="https://app.serviceform.com/servicechat/close-bot.svg" id="sf-close-chat" tabindex="0" role="button" aria-label="'+sf_sdk.tS('Close chat')+'"></div>' +
          '<div class="sf-push-wrapper">' +
          ' <div class="sf-push-box">' +
          '  <div class="sf-push-message sf-push-bot">' +
          ' <div class="sf-team-member">' +
          '<div class="livechat-agent '+hideAgent+'" style="background-image:url(' + image + ')">' +
          '<div class="sf-live"></div>' +
          '</div>' +
          '  </div>' +
          '<div class="sf-push-descr">' +
          '  <div class="sf-push-user-name">' + sf_sdk.stringTokens(name) + '</div>' +
          '  <div class="sf-push-text">' + sf_sdk.stringTokens(text) + '</div>' +
          '  </div>' +
          ctaButton +
          '</div>' +
          '  <div class="sf-options">' +
          sf_sdk.buildPushOptions() +
          '  </div>' +
          '  </div>' +
          '</div>' +
          '</div>';

      }
      else if (type === 'review') {
        html = '<div class="sf-push sf-push-review">' +
          '<div class="push-close"><img class="sf-header-close" src="https://app.serviceform.com/servicechat/close-bot.svg" id="sf-close-chat" tabindex="0" role="button" aria-label="'+sf_sdk.tS('Close chat')+'"></div>' +
          '<div class="sf-push-wrapper">' +
          '<div class="sf-push-discussion">' +
          '<div class="sf-msg-wrp sf-current">' +
          '</div>' +
          '</div>'+
          '  </div>' +
          '</div>' +
          '</div>';
      }
      else if (type === 'livechat' || type === 'livechat') {

        var send = '<div class="sf-send"><!--?xml version="1.0" encoding="iso-8859-1"?-->' +
          '<svg fill="#00000080" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="535.5px" height="535.5px" viewBox="0 0 535.5 535.5" style="enable-background:new 0 0 535.5 535.5;" xml:space="preserve">' +
          '<g>' +
          '\t<g id="send">' +
          '\t\t<polygon points="0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75 \t\t"></polygon>' +
          '\t</g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '<g>' +
          '</g>' +
          '</svg>' +
          '</div>';

        if (typeof image === 'undefined') {
          if (typeof serviceChatData !== 'undefined' && typeof serviceChatData.serviceform !== 'undefined' && typeof s.serviceChatImage !== 'undefined') {
            image = s.serviceChatImage;
          }
        }

        html = '<div class="sf-push">' +
          '<div class="push-close"><img class="sf-header-close" src="https://app.serviceform.com/servicechat/close-bot.svg" id="sf-close-chat" tabindex="0" role="button" aria-label="'+sf_sdk.tS('Close chat')+'"></div>' +
          ' <div class="sf-push-box">' +
          '  <div class="sf-push-message sf-push-livechat">' +
          ' <div class="sf-team-member">' +
          '<div class="livechat-agent" style="background-image:url(' + image + ')">' +
          '</div>' +
          '  </div>' +
          '<div class="sf-push-descr">' +
          '  <div class="sf-push-user-name">' + sf_sdk.stringTokens(name) + '</div>' +
          '  <div class="sf-push-text">' + sf_sdk.stringTokens(text) + '</div>' +
          '  </div>' +
          '</div>' +
          '<div class="livechat-bottom">' +
          '<div class="livechat-textarea">' +
          '<textarea placeholder="'+ sf_sdk.tS('Write reply')+'…" id="sf-livechat-textarea"></textarea>' +
          '</div>' +
          '<div class="livechat-textarea-send">' + send + '</div>' +
          '</div>' +
          '</div>';
      }

      var div = document.querySelector('#sf-chat-form');
      if(div) {
        div.insertAdjacentHTML('beforeend', html);
      }

      var doc = document.querySelector('.sf-push .push-close img');
      if (doc) {
        doc.addEventListener('click', function () {
          sf_sdk.clearPush();

          // If popup closed once, hide after that.
          if(typeof s.ifClosedHidePopup !== 'undefined' && s.ifClosedHidePopup === '1' ) {
            sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 0.5);
          }
        });
      }

      var pushMessage = document.querySelector('.sf-push-message');
      if (pushMessage) {
        pushMessage.addEventListener('click', function (e) {
          if (e.target.classList.contains('sf-click-cta-button')){
            var qNumber = 0;

            if (typeof s.ctaButtonJump !== 'undefined') {
              qNumber = parseInt(sf_sdk.getPageFromId(s.ctaButtonJump));
            }

            if(isNaN(qNumber)){
              qNumber = 0;
            }

            if(typeof s.ctaButtonLink !== 'undefined' && s.ctaButtonLink !== ''){
              sf_sdk.sfOpenInNewTab(s.ctaButtonLink, 1);
            }

            sf_sdk.newStatistics('interaction','');

            var qNumber = parseInt(qNumber);
            sfChatFlow.page = qNumber;

            sf_sdk.openBox();
            sf_sdk.livechatMode();
            sf_sdk.renderNextQuestion();
            return false;
          } else {
            sf_sdk.openBox();
          }
        });
      }

      var options = document.getElementsByClassName('sf-conversation-cta');
      if (options) {
        for (var i = 0; i < options.length; i++) {
          options[i].addEventListener('click', function () {
            var oid = this.getAttribute('oid');
            var qid = this.getAttribute('qid');
            sf_sdk.chatInteraction();

            sf_sdk.initBotDiscussion(qid, oid);

            if(typeof serviceChatData.serviceform.inlineMode !== 'undefined' && serviceChatData.serviceform.inlineMode === '1') {
            } else {
              sf_sdk.openBox();
            }
          });
        }
      }

      var send = document.querySelector('.sf-push .livechat-textarea-send');

      if (send) {
        send.addEventListener('click', function () {
          var textbox = document.querySelector('.sf-push #sf-livechat-textarea');
          var message = textbox.value;
          if (message.trim() !== '') {
            sf_sdk.openBox('mark');
            sf_sdk.livechatMode('livechat', message);
            sf_sdk.sendLivechatMessage(message, 0, 0, 'manual');
          }
        });
      }

      var hep = document.querySelector('.sf-push #sf-livechat-textarea');
      if (hep) {
        if (typeof window.sfDevMode === 'undefined') {
          // hep.focus();
        }
        hep.addEventListener('keyup', function (event) {
          if (event.keyCode === 13) {
            event.preventDefault();
            if (!event.shiftKey) {
              var message = this.value;
              this.value = '';
              this.style.height = "auto";
              this.style.setProperty("height", "55px", "important");
              if (message.trim() !== '') {
                var textbox = document.querySelector('.sf-push #sf-livechat-textarea');
                sfChatFlow.page = sf_sdk.getPageFromId(s.chatPushSettingsQuestion);

                sf_sdk.openBox('mark');

                sf_sdk.livechatMode('livechat', message);
                sf_sdk.sendNotifyLiveChat()
                sf_sdk.sendLivechatMessage(message, 0, 0, 'manual');

                sf_sdk.renderNextQuestion();

              }
            }
          }
        });
      }
    }

    var showAgain = s.showAgainAfter;
    if (typeof showAgain !== 'undefined') {
      if (showAgain !== '') {
        if (showAgain === '0') {
        } else if (showAgain === '1') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 0.0415);
        } else if (showAgain === '2') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 0.0415 * 2);
        } else if (showAgain === '3') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 0.0415 * 3);
        } else if (showAgain === '4') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 0.0415 * 4);
        } else if (showAgain === '5') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 0.0415 * 5);
        } else if (showAgain === '6') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 1);
        } else if (showAgain === '7') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 2);
        } else if (showAgain === '8') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 7);
        } else if (showAgain === '9') {
          sfPixel.sfSetPixelCookie('sf-hidden-push-' + window.sfId, '1', 14);
        }
      }
    }
  },
  addCss: function(s){
    var cssWrapper = document.querySelector('#sf-styles-wrapper');
    if(cssWrapper){
      sfPixel.sfRemoveElement(cssWrapper);
    }

    var sfCustomCSS = '';
    if (typeof s.sfCustomCSS !== 'undefined') {
      sfCustomCSS = s.sfCustomCSS;
    }

    var sfChatIconRadius = '';
    if (typeof s.sfChatIconRadius !== 'undefined' && s.sfChatIconRadius !== '') {
      sfChatIconRadius = '.sf-conversation-cta, #sf-prem-chat .sf-intro-block-content-cta, .sf-push .sf-push-message, .sf-push .sf-click-cta-button, .new-chat { border-radius:' + s.sfChatIconRadius + 'px !important}';
    }

    var html = '<style id="sf-styles-wrapper">' + sfChatIconRadius + sfCustomCSS + '</style>';
    var div = document.querySelector('html');
    div.insertAdjacentHTML('beforeend', html);
  },
  clearPush: function(){
    sfPixel.stats.mode = 'closed';
    var pushBox = document.querySelector('.sf-push');
    if(pushBox){
      sfPixel.sfRemoveElement(pushBox);
    }
  },
  reviewBox: function(type){
    if(typeof sf_sdk.reviewed === 'undefined' || typeof window.sfDevMode !== 'undefined' && window.sfDevMode === 1){
      if(type === 'outside'){
        sf_sdk.popup('review', '', '', '');
      }
      sf_sdk.reviewed = 1;

      var sfData = serviceChatData.serviceform;

      var reviewHeader = 'Did this help you?';
      if (typeof sfData.reviewHeader !== 'undefined') {
        reviewHeader = sfData.reviewHeader;
      }
      var reviewCommentHeader = 'How can we improve?';
      if (typeof sfData.reviewCommentHeader !== 'undefined') {
        reviewCommentHeader = sfData.reviewCommentHeader;
      }
      var reviewPlaceholder = 'Share your thoughts';
      if (typeof sfData.reviewPlaceholder !== 'undefined') {
        reviewPlaceholder = sfData.reviewPlaceholder;
      }
      var reviewSendButton = 'Send';
      if (typeof sfData.reviewSendButton !== 'undefined') {
        reviewSendButton = sfData.reviewSendButton;
      }

      var star = '<svg height="25px" viewBox="0 -10 511.98685 511" width="25px" xmlns="http://www.w3.org/2000/svg"><path d="m510.652344 185.902344c-3.351563-10.367188-12.546875-17.730469-23.425782-18.710938l-147.773437-13.417968-58.433594-136.769532c-4.308593-10.023437-14.121093-16.511718-25.023437-16.511718s-20.714844 6.488281-25.023438 16.535156l-58.433594 136.746094-147.796874 13.417968c-10.859376 1.003906-20.03125 8.34375-23.402344 18.710938-3.371094 10.367187-.257813 21.738281 7.957031 28.90625l111.699219 97.960937-32.9375 145.089844c-2.410156 10.667969 1.730468 21.695313 10.582031 28.09375 4.757813 3.4375 10.324219 5.1875 15.9375 5.1875 4.839844 0 9.640625-1.304687 13.949219-3.882813l127.46875-76.183593 127.421875 76.183593c9.324219 5.609376 21.078125 5.097657 29.910156-1.304687 8.855469-6.417969 12.992187-17.449219 10.582031-28.09375l-32.9375-145.089844 111.699219-97.941406c8.214844-7.1875 11.351563-18.539063 7.980469-28.925781zm0 0" fill="#ffc107"/></svg>';

      var reviewBox = '<div class="sf-review-logic">' +
        '    <div class="sf-review-logic-header">' + reviewHeader + '</div>' +
        '    <div class="sf-review-logic-stars">' +
        '        <div class="sf-review-logic-stars">' +
        '        <div class="sf-review-logic-star sf-review-one" attrval="1">' + star + '</div><div class="sf-review-logic-star sf-review-two" attrval="2">' + star + '</div><div class="sf-review-logic-star sf-review-three" attrval="3">' + star + '</div><div class="sf-review-logic-star sf-review-four" attrval="4">' + star + '</div><div class="sf-review-logic-star sf-review-five" attrval="5">' + star + '</div>' +
        '    </div>' +
        '    </div>' +
        '    </div>';

      sf_sdk.pushToDiscussion(reviewBox);

      var stars = document.getElementsByClassName('sf-review-logic-star');
      for (var i = 0; i < stars.length; i++) {
        stars[i].addEventListener('mouseover', function () {
          var starValue = this.getAttribute('attrval');

          var starWrapper = document.querySelector('.sf-review-logic-stars');
          if (starWrapper) {
            starWrapper.classList.remove('sf-review-1');
            starWrapper.classList.remove('sf-review-2');
            starWrapper.classList.remove('sf-review-3');
            starWrapper.classList.remove('sf-review-4');
            starWrapper.classList.remove('sf-review-5');

            starWrapper.classList.add('sf-review-' + starValue);
          }
        });

        stars[i].addEventListener('click', function () {
          var starValue = this.getAttribute('attrval');
          if (typeof window.sfAddedComments === 'undefined') {
            window.sfAddedComments = 1;

            sf_sdk.newStatistics('review', starValue);

            var logic = {
              review: 1,
              reviewValue: starValue,
              lastEvent: 'review'
            }

            sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid).update(logic);

            var commentBox = '<div class="sf-review-logic sf-review-comment-wrap">' +
              '    <div class="sf-review-logic-header">' + reviewCommentHeader + '</div>' +
              '    <div class="sf-review-logic-comment">' +
              '    <div class="sf-review-comment-area">' +
              ' <textarea id="sf-review-comment" placeholder="' + reviewPlaceholder + '"></textarea>' +
              '<div class="sf-review-send">' + reviewSendButton + '</div></div></div></div>';

            sf_sdk.pushToDiscussion(commentBox);

            function send(message) {
              if (message.trim() !== '') {
                var rights = document.querySelector('.sf-review-comment-area');
                if (rights) {
                  var logic = {
                    reviewComment: message,
                    lastEvent: 'review'
                  }
                  sf_sdka.database().ref('/livechat/' + window.sfLivePidd + '/' + window.sfLiveChatCid).update(logic);

                  rights.innerHTML = sf_sdk.tS('Thank you') + '.';

                  setTimeout(function () {
                    sf_sdk.clearPush();
                  }, 2000);
                }
              }
            }

            var commentBox = document.querySelector('#sf-review-comment');
            commentBox.addEventListener('keyup', function (event) {
              if (event.keyCode === 13) {

                event.preventDefault();
                if (!event.shiftKey) {
                  send(this.value);
                }
              }
            });

            var commentSend = document.querySelector('.sf-review-send');
            commentSend.addEventListener('click', function (event) {
              var message = commentBox.value;
              send(message);
            });
          }
        });
      }
    }
  },
  addTextWriteBox: function(){
    var push = document.querySelector('.sf-push');
    if(push) {
      sf_sdk.clearOptions();
      var send = '<div class="sf-send">' +
        '<svg fill="#00000080" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="535.5px" height="535.5px" viewBox="0 0 535.5 535.5" style="enable-background:new 0 0 535.5 535.5;" xml:space="preserve">' +
        '<g>' +
        '\t<g id="send">' +
        '\t\t<polygon points="0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75 \t\t"></polygon>' +
        '\t</g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '<g>' +
        '</g>' +
        '</svg>' +
        '</div>';

      var html = '<div class="sf-options sf-options-type-textfields sf-livechat">';
      html += '<div class="servicechat-admin-question">' +
        '<div class="servicechat-question">' +
        '<textarea rows="1" placeholder="'+sf_sdk.tS('Write reply')+'.." class="sf-chat-textfields" type="textfield">' + '</textarea>' + send +
        '</div>' +
        '</div>';
      html += '</div>';

      var push = document.querySelector('.sf-push');

      if(push) {
        var discussionWrapper = document.querySelector('.sf-push-discussion');
        if(discussionWrapper) {
          discussionWrapper.insertAdjacentHTML('beforeend', html);
          sf_sdk.scrollBottom();
        }

        var doc = document.querySelector('.sf-push .sf-push-discussion .sf-send');
        var hep = document.querySelector('.sf-push .sf-push-discussion .sf-chat-textfields');

        if (doc) {
          doc.addEventListener('click', function () {
            var text = document.querySelector('.sf-push-discussion .sf-chat-textfields');
            var message = text.value;
            text.value = '';

            if (message.trim() !== '') {

              var html = '<div class="sf-msg-wrp sf-current">' +
                '<div class="sf-message sf-current">' + message.trim() + '</div>' +
                '</div>';
              sf_sdk.pushToDiscussion(html);
              sf_sdk.addTextWriteBox();

              sf_sdk.sendLivechatMessage(message, 0, 0, 'automatic');
            }
          });
        }

        if (hep) {
          hep.addEventListener('keyup', function (event) {

            // if (this.value.length > 2) {
            //   writing = 1;
            //   text = this.value
            //
            //   sf_sdka.database().ref('/messages/' + window.sfpid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/user-writing').set({
            //     writing: writing,
            //     author: 0,
            //     message: text,
            //     timestamp: sf_sdka.database.ServerValue.TIMESTAMP
            //   });
            // }
            // else {
            //   writing = 0;
            //   text = '';
            //
            //   sf_sdka.database().ref('/messages/' + window.sfpid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/user-writing').remove();
            // }

            if (event.keyCode === 13) {
              event.preventDefault();
              if (!event.shiftKey) {
                var message = this.value;
                this.value = '';

                if (message.trim() !== '') {
                  sf_sdk.sendLivechatMessage(message, 0, 0, 'automatic');

                  var html = '<div class="sf-msg-wrp sf-current">' +
                    '<div class="sf-message sf-current">' + message.trim() + '</div>' +
                    '</div>';
                  sf_sdk.pushToDiscussion(html);
                  sf_sdk.addTextWriteBox();
                }
              }
            }
          });
        }
      }
    }
  },
  pushToDiscussion: function(html){
    var discussionWrapper = document.querySelector('.sf-push-discussion');
    if(!discussionWrapper){
      discussionWrapper = document.querySelector('.livechat-container');
    }
    discussionWrapper.insertAdjacentHTML('beforeend', html);
    sf_sdk.scrollBottom();
  },
  addFileUploadQuestion: function() {
    var html = '<div class="sf-image-upload"><input type="hidden" role="uploadcare-uploader" id="uploadedImage" /></div>';

    sf_sdk.pushToDiscussion(html);

    var widget = uploadcare.Widget('[role=uploadcare-uploader]');

    var page = window.sfChatFlow.page;
    var sfData = serviceChatData.serviceform;

    widget.onUploadComplete(function (info) {
      var savedFile = info.cdnUrl;
      sf_sdk.addAnswer(savedFile, 'na');
      sf_sdk.nextQuestion(page,'');
    });

    sf_sdk.scrollBottom();
  },
  addCalendarQuestion: function() {
    var page = parseInt(window.sfChatFlow.page);
    var sfData = serviceChatData.serviceform;
    var calendarTypeSelect = sfData.questions[page].calendarType;

    if(typeof calendarTypeSelect == 'undefined' || calendarTypeSelect === "calendar-day" || calendarTypeSelect === "calendar-time" || calendarTypeSelect === "calendar-day-time") {

      var options = {};
      if(typeof calendarTypeSelect == 'undefined' || calendarTypeSelect === "calendar-day") {
        var placeholderCalendarPicker = sf_sdk.tS('Choose a date');
        options = {
          dateFormat:"j/n/Y",
          enableTime: 0,
          allowInput: true,
          minDate: "today",
          locale: sfData.language
        };
      } else if (calendarTypeSelect === "calendar-time") {
         placeholderCalendarPicker = sf_sdk.tS('Choose a time');

        options = {
          enableTime: true,
          noCalendar: true,
          dateFormat: "H:i",
          locale: sfData.language

        }
      } else if (calendarTypeSelect === "calendar-day-time"){
         placeholderCalendarPicker = sf_sdk.tS('Choose a time and date');

        options = {
          dateFormat:"j/n/Y H:i",
          enableTime:true,
          allowInput:true,
          minDate: "today",
          locale: sfData.language
        }
      }

      var html = '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">'+
        '<div class="servicechat-admin-time">' +
        '<div style="display:block" class="servicechat-admin-question servicechat-admin-question-question">' +
        '<div class="sf-time-picker"><input class="sf-time-picker-input" placeholder="'+placeholderCalendarPicker+'"></div>' +
        '<div class="sf-calen-confirm sf-disabled">' +
        window.saveBtn +
        '</div>' +
        '</div>' +
        '</div>';

      sf_sdk.pushToDiscussion(html);

      var ansCal = flatpickr(".sf-time-picker-input", options);

      document.querySelector(".sf-calen-confirm").addEventListener("click", function(){
        var answer = '';
        if(typeof ansCal === 'undefined' || typeof ansCal.input === 'undefined'){
          answer = document.querySelector('.sf-time-picker-input').value;
        } else {
          answer = ansCal.input.value;
        }

        if (answer){

          var html = '<div class="sf-msg-wrp sf-current">' +
            '<div class="sf-message sf-current">' + answer.trim() + '</div>' +
            '</div>';
          sf_sdk.pushToDiscussion(html);

          sf_sdk.addAnswer(answer, 'na');

          var adminTime = document.querySelector('.servicechat-admin-time');
          if(adminTime){
            sfPixel.sfRemoveElement(adminTime);
          }

          sf_sdk.nextQuestion(page,'');
          this.disabled=true;
        }

      });

    }
  },
  introMode: function(){
    if(typeof sfChatFlow !== 'undefined' && sfChatFlow.submitted === 1){
      window.location.reload();
    }

    var livechatBox = document.querySelector('.livechat-box');
    if(livechatBox){
      livechatBox.classList.add('intro-mode');
      livechatBox.classList.remove('livechat-mode');
    }

    if(typeof sfChatFlow.amount !== 'undefined' && sfChatFlow.amount !== ''){
      sfChatFlow.amount = 0;
    }

    sfPixel.stats.mode = 'box';
  },
  playAudio: function(type){
    if(window.playingAudio !== 1) {
      window.playingAudio = 1;
      if (type === 'new-message') {
        var audio = new Audio('https://app.serviceform.com/nw-lc/message.mp3');


        var bubble = document.querySelector('.sf-prem-bubble');
        if(bubble) {
          bubble.classList.add('sf-prem-note');
        }

        audio.play();
      }

      setTimeout(function () {
        window.playingAudio = 0;
      }, 2000);
    }
  },
  onFocus: function(){
    document.title = window.sfDocTitle;

    (function() {
      var link = document.querySelector("link[rel*='icon']") || document.createElement('link');
      link.type = 'image/x-icon';
      link.rel = 'shortcut icon';
      link.href = '/assets/favicon/apple-touch-icon.png';
      document.getElementsByTagName('head')[0].appendChild(link);
    })();
  },
  promptLiveChat: function(image,name,text){

    var send = '<div class="sf-send"><!--?xml version="1.0" encoding="iso-8859-1"?-->' +
      '<svg fill="#00000080" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" width="535.5px" height="535.5px" viewBox="0 0 535.5 535.5" style="enable-background:new 0 0 535.5 535.5;" xml:space="preserve">' +
      '<g>' +
      '\t<g id="send">' +
      '\t\t<polygon points="0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75 \t\t"></polygon>' +
      '\t</g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '<g>' +
      '</g>' +
      '</svg>' +
      '</div>';

    var html = '<div class="sf-push">' +
      ' <div class="sf-push-box">' +
      '  <div class=""></div>'+
      '  <div class="sf-push-message sf-push-livechat">' +
      ' <div class="sf-team-member">' +
      '<div class="livechat-agent" style="background-image:url('+image+')">' +
      '</div>'+
      '  </div>' +
      '<div class="sf-push-descr">'+
      '  <div class="sf-push-user-name">'+name+'</div>' +
      '  <div class="sf-push-text">'+text+'</div>' +
      '  </div>' +
      '</div>'+
      '<div class="livechat-bottom">' +
      '<div class="livechat-textarea">' +
      '<textarea placeholder="'+sf_sdk.tS('Write reply')+'…" id="sf-livechat-textarea"></textarea>' +
      '</div>' +
      '<div class="livechat-textarea-send" role="button" tabindex="0" aria-label="'+sf_sdk.tS('Send')+'" aria-controls="sf-send">'+send+'</div>' +
      '</div>' +
      '</div>';

    var div = document.querySelector('html');
    div.insertAdjacentHTML('beforeend', html);
  },
  markLiveChat: function(livechatTeam){
    if(typeof window.sfLivechatId === 'undefined') {
      window.sfLivechatId = 1;

      var addTeam = 1;
      var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');
      if (typeof livechatId !== 'undefined' && livechatId !== '') {
        addTeam = 0;
      }

      if (typeof livechatTeam === 'undefined') {
        livechatTeam = "0";

        if(typeof serviceChatData.serviceform.defaultTeam !== 'undefined'){
          livechatTeam = serviceChatData.serviceform.defaultTeam;
        }
      }

      var livechatExpiry = 0.15;
      if(typeof serviceChatData.serviceform.livechatExpiry !== 'undefined' && serviceChatData.serviceform.livechatExpiry !== ''){
        livechatExpiry = serviceChatData.serviceform.livechatExpiry;
        livechatExpiry = parseFloat(livechatExpiry);
      }

      sfPixel.sfSetPixelCookie('sf-livechat-pixel', window.sfLiveChatCid, livechatExpiry);

      if(typeof sfPixel.ruleDetails !== 'undefined' && typeof sfPixel.ruleDetails.genericTeam !== 'undefined' && sfPixel.ruleDetails.genericTeam !== '') {
        livechatTeam = sfPixel.ruleDetails.genericTeam;
      }

      var cookieTeam = sfPixel.sfGetPixelCookie('sf-livechat-team');
      if (typeof cookieTeam !== 'undefined' && cookieTeam !== '') {
        livechatTeam = cookieTeam;
      } else {
        sfPixel.sfSetPixelCookie('sf-livechat-team', window.livechatTeam, livechatExpiry);
      }

      var logic = {
        livechat: 1,
        agentJoined: 0,
        cid: window.sfLiveChatCid,
        livechatStarted: sf_sdka.database.ServerValue.TIMESTAMP,
        lastEvent: 'start'
      }

      // Only add team if a new chat.
      if(addTeam) {
        logic['team'] = livechatTeam;
      }

      if(typeof serviceChatData.serviceform.defaultAgent !== 'undefined'){
        logic['agentId'] = serviceChatData.serviceform.defaultAgent;
      }

      sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid).update(logic);

      window.dataLayer = window.dataLayer || [];
      window.dataLayer.push({
        'event': 'serviceform',
        'chatProgress': 'live chat'
      });
    }
  },
  destroy: function(){
    var sfPremChat = document.querySelectorAll('#sf-prem-chat');
    if(sfPremChat){
      for (var i = 0; i < sfPremChat.length; i++) {
        sfPixel.sfRemoveElement(sfPremChat[i]);
      }
    }

    var sfPremBubble = document.querySelectorAll('.sf-prem-bubble');
    if(sfPremBubble){
      for (var i = 0; i < sfPremBubble.length; i++) {
        sfPixel.sfRemoveElement(sfPremBubble[i]);
      }
    }

    var sfChatForm = document.querySelectorAll('#sf-chat-form');
    if(sfChatForm){
      for (var i = 0; i < sfChatForm.length; i++) {
        sfPixel.sfRemoveElement(sfChatForm[i]);
      }
    }

    var sfPush = document.querySelectorAll('.sf-push');
    if(sfPush){
      for (var i = 0; i < sfPush.length; i++) {
        sfPixel.sfRemoveElement(sfPush[i]);
      }
    }
    window.sfChatFlow = [];
  },
  openWithQuestion: function(page){
    sf_sdk.destroy();
    sf_sdk.startLiveChat();
    sfChatFlow.page = page;
    sf_sdk.openBox();
    sf_sdk.livechatMode();
    sf_sdk.renderNextQuestion();

  },
  livechatMode: function(type, chatType){
    sfPixel.stats.mode = 'livechat';

    var wrapper = document.querySelector('.livechat-wrapper');
    if(wrapper){
      sf_sdk.addLoader(wrapper);
    }

    if(type === 'new') {
      sf_sdk.markLiveChat();

      sfPixel.stats.live = 1;
      sf_sdk.initChatListener('new');
    } else {
      if(typeof window.sfLiveChatCid === 'undefined') {
        sf_sdk.initChatListener('new');
      } else {
        sf_sdk.initChatListener(type);
      }
    }
    window.sfPreviousArray = 0;

    if(type === 'new'){
      var livechatBox = document.querySelector('.livechat-box');
      if(livechatBox){
        livechatBox.classList.remove('intro-mode');
        livechatBox.classList.add('livechat-mode');
      }
    } else {
      var livechatBox = document.querySelector('.livechat-box');
      if(livechatBox){
        livechatBox.classList.remove('intro-mode');
        livechatBox.classList.add('livechat-mode');
      }
    }

    var doc = document.querySelector('.livechat-textarea-send');
    var hep = document.querySelector('#sf-livechat-textarea');

    var emoji = document.querySelector('.livechat-textarea-emoji');
    if(emoji){
      emoji.addEventListener('mouseover', function (){
        if (typeof EmojiButton === "function") {
          startEmojis();
        } else {
          sfPixel.loadScript2(
            "https://cdn.jsdelivr.net/npm/emoji-button@latest/dist/index.min.js",
            startEmojis
          );
        }
      });
    }

    function startEmojis() {
      var emojiButton = document.querySelector(".livechat-textarea-emoji");
      if(emojiButton.classList.contains('emoji-triggered')){
      } else {
        var picker = new EmojiButton({
          rootElement: document.querySelector("#sf-prem-chat")
        });
        picker.on("emoji", function(emoji) {
          document.querySelector("#sf-prem-chat #sf-livechat-textarea").value += emoji;
        });
        emojiButton.addEventListener("click", function() {
          picker.pickerVisible
            ? picker.hidePicker()
            : picker.showPicker(emojiButton);
        });

        emojiButton.classList.add('emoji-triggered');
      }
    }

    hep.addEventListener('keyup',function(event) {

      if(this.value.length > 2) {
        writing = 1;
        text = this.value

        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/user-writing').set({
          writing: writing,
          author: 0,
          message: text,
          timestamp: sf_sdka.database.ServerValue.TIMESTAMP
        });
      } else {
        writing = 0;
        text = '';

        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/user-writing').remove();
      }

      if (event.keyCode === 13) {
        event.preventDefault();
        if (!event.shiftKey && sf_sdk.allowWriting) {
          var message = this.value;
          this.value = '';

          if (message.trim() !== '') {
            if(typeof serviceChatData.serviceform.questions[sfChatFlow.page] !== 'undefined' && typeof sfChatFlow.page !== 'undefined' && serviceChatData.serviceform.questions[sfChatFlow.page].type === 'textfields' && window.sfChatLivechat === 0){
              if(sf_sdk.validateField(sfChatFlow.page, 0, message)) {
                if(serviceChatData.serviceform.questions[sfChatFlow.page].type === 'textfields') {
                  sf_sdk.processMessage(message, serviceChatData.serviceform.questions[sfChatFlow.page]);
                }else{
                  sf_sdk.processMessage(message, sfChatFlow.page);
                }
              }
            } else {
              sf_sdk.markLiveChat();

              var html = '<div class="sf-msg-wrp sf-current">' +
                '<div class="sf-message sf-current">' + message.trim() + '</div>' +
                '</div>';
              sf_sdk.pushToDiscussion(html);

              sf_sdk.sendLivechatMessage(message,0,0, 'manual');
              sf_sdk.botAnswer(message);
            }
          }
        }
      }
    });

    doc.addEventListener('click',function(){
      var text = document.querySelector('#sf-livechat-textarea');
      var message = text.value;
      text.value = '';
      text.style.height = "auto";
      text.style.setProperty("height", "55px", "important");
      if (message.trim() !== '' && sf_sdk.allowWriting) {
        if(typeof sfChatFlow.page !== 'undefined' && serviceChatData.serviceform.questions[sfChatFlow.page].type === 'textfields' && window.sfChatLivechat === 0){
          if(sf_sdk.validateField(sfChatFlow.page, 0, message)) {
            if(serviceChatData.serviceform.questions[sfChatFlow.page].type === 'textfields') {
              sf_sdk.processMessage(message, serviceChatData.serviceform.questions[sfChatFlow.page]);
            }else{
              sf_sdk.processMessage(message, sfChatFlow.page);
            }
          }
        } else {
          sf_sdk.markLiveChat();

          var html = '<div class="sf-msg-wrp sf-current">' +
            '<div class="sf-message sf-current">' + message.trim() + '</div>' +
            '</div>';

          sf_sdk.pushToDiscussion(html);
          sf_sdk.sendLivechatMessage(message, 0, 0, 'manual');
          sf_sdk.botAnswer(message);

        }

      }
    });

  },
  botAnswer: function(answer){
    if(window.sfChatLivechat !== 1) {
      if(typeof window.serviceChatData.serviceform.nlp !== 'undefined' && window.serviceChatData.serviceform.nlp === '1') {
        var originalAnswer = answer;
        var answer = sf_sdk.humanBehaviors(answer);
        var message = '';

        if (answer === 0) {
          if (typeof serviceChatData.serviceform.nlpDefaultAnswer !== 'undefined') {
            message = serviceChatData.serviceform.nlpDefaultAnswer;
          } else if(typeof serviceChatData.serviceform.nlpFailureText !== 'undefined' && serviceChatData.serviceform.nlpFailureText !== '') {
            sf_sdk.pushToFailedQuestions(originalAnswer);
            message = serviceChatData.serviceform.nlpFailureText;
          } else {
            sf_sdk.pushToFailedQuestions(originalAnswer);
            message = sf_sdk.tS('Sorry, I didnt understand your question.');
          }

          sf_sdk.newStatistics('failed', originalAnswer);

          if(typeof serviceChatData.serviceform.knowledgeBaseDisplay !== 'undefined' && serviceChatData.serviceform.knowledgeBaseDisplay === '1') {
            sfPixel.loadScript2('https://cdn.jsdelivr.net/npm/fuse.js/dist/fuse.js', startFuseSearch);

            function startFuseSearch() {
              var qaHTML = '';
              var qa = serviceChatData.serviceform.questionAnswer;

              var options = {
                includeScore: true,
                threshold: 0.8,
                tokenize: 1,
                keys: ["question", "answer"]
              };

              var fuse = new Fuse(qa, options);
              var fuseResult = fuse.search(originalAnswer);

              var results = 0;
              for (var i = 0; i < fuseResult.length; i++) {
                var ir = fuseResult[i].item.question.split(',');
                results++;
                if (results < 7) {
                  qaHTML += '<div class="nearby-suggestion">' + ir[0] + '</div>';
                }
              }

              var html = '<div class="nearby-suggestions">' +
                '<div class="nearby-cloud"><div class="nearby-title">'+sf_sdk.tS('Did you mean')+'..</div>' +
                qaHTML +
                '</div>' +
                '</div>';

              sf_sdk.pushToDiscussion(html);

              var suggestionLogic = document.getElementsByClassName('nearby-suggestion');
              for (var k = 0; k < suggestionLogic.length; k++) {
                suggestionLogic[k].addEventListener('click', function () {
                  var message = this.textContent;
                  var html = '<div class="sf-msg-wrp sf-current">' +
                    '<div class="sf-message sf-current">' + message.trim() + '</div>' +
                    '</div>';
                  sf_sdk.pushToDiscussion(html);
                  sf_sdk.sendLivechatMessage(message, 0, 0, 'automatic');
                  sf_sdk.botAnswer(message);
                });
              }
            }
          }

          var failureQuestion = serviceChatData.serviceform.nlpFailureQuestion;
          if(typeof failureQuestion !== 'undefined') {
            answer = {
              jump: failureQuestion
            }
          } else {
            answer = {
              jump: 0
            }
          }
        } else {
          message = answer.answer;
          if(typeof answer.jump === 'undefined' || answer.jump === ''){
            var successQuestion = serviceChatData.serviceform.nlpDefaultQuestion;
            if(typeof successQuestion !== 'undefined') {
              answer.jump = successQuestion;
            } else {
              answer.jump = 0;
            }
          }
        }

        window.sfChatFlow.page = 'train';
        sf_sdk.clearOptions();
        sf_sdk.addAdminAnswer(message);

        setTimeout(function () {
          if (typeof answer.jump !== 'undefined' && answer.jump !== '') {
            var page = sf_sdk.getPageFromId(answer.jump);
            if (typeof page === 'undefined') {
              page = 0;
            }
            var question = serviceChatData.serviceform.questions[page];
            window.sfChatFlow.page = page;
            sf_sdk.renderNextQuestion();
          } else {
            sf_sdk.nextQuestion();
          }
        }, 1500);
      }
    }
  },
  openBox: function(type){
    sf_sdk.clearPush();


    var extraButton = document.querySelector('.sf-chat-one-new');
    if(extraButton) {
      extraButton.style.display = 'none';
    }

    var bubble = document.querySelector('.sf-prem-bubble');
    if(bubble) {
      bubble.classList.add('sf-open');
    }
    var livechatBox = document.querySelector('.livechat-box');
    if (livechatBox) {
      livechatBox.classList.add('sf-open');
    }

    var body = document.querySelector('html');
    if (body) {
      body.classList.add('serviceform-chat-open');
    }

    var htmlElement = document.querySelector('html');
    if (htmlElement) {
      htmlElement.classList.add('serviceform-chat-open');
    }

    //sf_sdk.calendlyScheduling();
    sfPixel.stats.chatOpen = 1;

    if(type === 'mark'){
      sfPixel.stats.mode = 'box';
    }

    var s = serviceChatData.serviceform;
    if (typeof s.productSearch !== 'undefined' && s.productSearch === 1 && typeof window.sfInitedSearch === 'undefined') {
      window.sfInitedSearch = '1';
      sfPixel.loadScript2('https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearch.min.js', loadHelper);

      function loadHelper() {
        sfPixel.loadScript2('https://cdnjs.cloudflare.com/ajax/libs/algoliasearch-helper-js/2.28.1/algoliasearch.helper.min.js', loadSecond);
      }

      function loadSecond() {

        // Init algolia.
        var client = algoliasearch('GOXZGNOT9K', '5c59faa194e55d17443733228f3dd4a9');
        window.relevantHelper = algoliasearchHelper(client, 'firstTeam', {
          hitsPerPage: 6
        });

        // Add listener to box.
        var input = document.querySelector('#sf-product-search-box');
        if (input) {
          input.addEventListener('keyup', function () {
            relevantHelper.setQuery(this.value).search(this.value);
          });
        }

        relevantHelper.on('result', function (event) {
          var hits = event['hits'];
          document.querySelector('#sf-product-search').innerHTML = '';

          var html = '';
          var title = '<span class="upsy-subcategory-list"><style>.upsy-nav_buttons {' +
            '    display: none;' +
            '}</style>Tuloksia kaikista kategorioista</span>';
          if (hits.length === 0) {
            title = '';
          }
          for (var i = 0; i < hits.length; i++) {
            html += '<a href="' + hits[i]['action_url'] + '" class="sf-search-item">' +
              '<div class="sf-search-item-image"><img class="sf-search-image" src="' + hits[i]['image_url'] + '"></div>' +
              '<div class="sf-search-item-descr">' + hits[i]['title'] + '</div>' +
              '<div class="sf-search-item-price">' + hits[i]['subtitle'] + '</div>' +
              '</a>';
          }

          document.querySelector('#sf-product-search').innerHTML = html;

        });

        relevantHelper.setQuery('').search('');

      }
    }


    if(typeof serviceChatData.serviceform.skipStartPage !== 'undefined' && serviceChatData.serviceform.skipStartPage === "1" && typeof sfChatFlow !== 'undefined' && typeof sfChatFlow.page === 'undefined'){
      sf_sdk.livechatMode('bot', 'bot');

      var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');
      if (typeof livechatId === 'undefined' || livechatId === '') {
        sf_sdk.nextQuestion(-1);
      }

      var s = serviceChatData.serviceform;
      if(typeof s.notifyEverything !== 'undefined' && s.notifyEverything === "1"){
        if(sf_sdk.livechatInitiated() === false) {
          sf_sdk.initLivechatWithDefault('keep');
        }
      }
    } else {
      sfPixel.stats.mode = 'box';
      if(typeof sfChatFlow !== 'undefined' && typeof sfChatFlow.page !== 'undefined' && sfChatFlow.page !== 0) {
        sf_sdk.livechatMode();
      }
    }
  },
  livechatInitiated: function(){
    var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');

    if(window.livechatMessage === 1){
      return true;
    }

    if (typeof livechatId === 'undefined' || livechatId === '') {
      return false;
    } else {
      return true;
    }
  },
  agentJoined: function(){
    if(window.sfAgentJoined){
      return true;
    } else {
      return false;
    }
  },
  closeLivechat() {

    var sfData = window.serviceChatData.serviceform;

    var close = sfData.closeChatOnClose;
    var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');

    if(window.sfLivePid === '541546' || window.sfLivePid === '1068357' || window.sfLivePid === '934370'){
    } else {
      if (typeof livechatId !== 'undefined' && livechatId !== '') {
        // If setting and livechat initated ask user to close, if click on close. If review ask review.
        var r = confirm(sf_sdk.tS("Do you want to close the live chat?"));

        if (r == true) {
          var sid = sfPixel.stats.session;
          var cid = window.sfLiveChatCid;

          var newPostKey = firebase.database().ref('/messages/' + window.sfpid + '/' + sid + '/' + cid + '/').push().key;

          firebase.database().ref('/messages/' + window.sfpid + '/' + sid + '/' + cid + '/' + newPostKey).set({
            message: sf_sdk.tS('User has left the chat'),
            author: 0,
            type: 'user-left',
            typeValue: 'left',
            writing: 0,
            livechat: 1,
            bot: 0,
            timestamp: firebase.database.ServerValue.TIMESTAMP,
            agentName: sf_sdk.tS("Automatic message")
          });

          firebase.database().ref('/livechat/' + window.sfpid + '/' + cid).update({
            closed: 1,
            type: 'user-left',
            agentLeftTime: firebase.database.ServerValue.TIMESTAMP,
            lastEventType: "user-left"
          });

          sfPixel.sfSetPixelCookie('sf-livechat-pixel', "", 0);
          sfPixel.sfSetPixelCookie('sf-livechat-team', "", 0);

          if (typeof serviceChatData.serviceform.review !== 'undefined' && serviceChatData.serviceform.review === '1') {
            if (typeof window.sfDevMode === 'undefined') {
              sf_sdk.reviewBox('outside');
            }
          }
        }
      }
    }
  },
  closeBox: function(){
    var bubble = document.querySelector('.sf-prem-bubble');
    if(bubble) {
      bubble.classList.remove('sf-open');
    }
    var livechatBox = document.querySelector('.livechat-box');
    if (livechatBox) {
      livechatBox.classList.remove('sf-open');
    }

    var body = document.querySelector('html');
    if (body) {
      body.classList.remove('serviceform-chat-open');
    }
    var htmlElement = document.querySelector('html');
    if (htmlElement) {
      htmlElement.classList.remove('serviceform-chat-open');
    }

    sf_sdk.newStatistics('close');

    sfPixel.stats.chatOpen = 0;
    sfPixel.stats.mode = 'closed';

    sfPixel.post();

    setTimeout(function () {
      if (typeof serviceChatData.serviceform.review !== 'undefined' && serviceChatData.serviceform.review === '1') {
        if (typeof window.sfDevMode === 'undefined') {
          sf_sdk.reviewBox('outside');
        }
      }
    }, 1000);

  },
  pushDelay: function () {

    var pushDelay = 1000;

    var cH = serviceChatData.serviceform;
    var s = cH;

    var popupTiming = serviceChatData.serviceform.sfPopupTiming;
    if(typeof popupTiming !== 'undefined') {
      if (popupTiming !== ''){
        if(popupTiming === '0'){
          pushDelay = 1000;
        } else if(popupTiming === '1'){
          pushDelay = 5000;
        } else if(popupTiming === '2'){
          pushDelay = 10000;
        } else if(popupTiming === '3'){
          pushDelay = 15000;
        } else if(popupTiming === '4'){
          pushDelay = 20000;
        } else if(popupTiming === '5'){
          pushDelay = 30000;
        } else if(popupTiming === '6'){
        }
      }
    }


    if (typeof window.sfDynamicPushTime !== 'undefined') {
      pushDelay = window.sfDynamicPushTime;
    }

    var sfData = serviceChatData.serviceform;
    var sfChatName = sfData.serviceChatName;
    var sfChatImage = sfData.serviceChatImage;
    var sfChatText = sfData.chatPushSettingsIntroText;

    if (typeof sfChatText === 'undefined') {
      sfChatText = '';
    }

    var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');
    if (typeof livechatId !== 'undefined' && livechatId !== '') {
      window.sfLiveChatCid = livechatId;
    }

    var noPush = 0;
    var showAgain = serviceChatData.serviceform.showAgainAfter;

    if (typeof showAgain !== 'undefined') {
      if (showAgain !== '' && showAgain !== '0') {
        noPush = sfPixel.sfGetPixelCookie('sf-hidden-push-' + window.sfId);
      }
    }

    if(typeof s.ifClosedHidePopup !== 'undefined' && s.ifClosedHidePopup === '1' ) {
      noPush = sfPixel.sfGetPixelCookie('sf-hidden-push-' + window.sfId);
    }

    var livechatId = sfPixel.sfGetPixelCookie('sf-livechat-pixel');
    if (livechatId !== '') {
      //  sf_sdk.openBox('normal');
      if (sfPixel.stats.chatOpen === 1) {
        if (window.sfNeverPopup !== 1) {
          sf_sdk.openBox('normal');
          sf_sdk.livechatMode(sfPixel.stats.activeChatCid, '');
        }
      }
    } else {
      if(typeof serviceChatData.serviceform.loadLastSessions !== 'undefined' && serviceChatData.serviceform.loadLastSessions === '1'){
        if(typeof sfPixel !== 'undefined' && typeof sfPixel.stats !== 'undefined' &&
          typeof sfPixel.stats.activeChatCid !== 'undefined' && sfPixel.stats.activeChatCid !== '' &&
          typeof sfPixel.stats.chatOpen !== 'undefined' && sfPixel.stats.chatOpen) {
          sf_sdk.openBox('normal');
          sf_sdk.livechatMode(sfPixel.stats.activeChatCid, '');
          window.sfLiveChatCid = sfPixel.stats.activeChatCid;
          sf_sdk.initChatListener(window.sfLiveChatCid);
        }
      }
    }

    var chatPush = serviceChatData.serviceform.chatPush;
    if (typeof chatPush !== 'undefined') {
      if (chatPush === '0') {
        noPush = '1';
      }
    }

    if (noPush !== '1') {
      setTimeout(function () {
        var delay = document.querySelectorAll('#servicechat .push-delay');
        if (delay) {
          for (var i = 0; i < delay.length; i++) {
            // Popup here.
          }
        }

        if (sfPixel.stats.mode === 'inline') {

          var type = 'bot';
          if(typeof s.popupType !== 'undefined' && s.popupType === '2'){
            type = 'livechat';
          }
          sf_sdk.popup(type, sfChatText, sfChatImage, sfChatName);

          var wrap = document.querySelector('.sf-push-wrapper');
          if (wrap) {
            wrap.innerHTML = '<div class="sf-push-discussion">' +
              '<div class="sf-msg-wrp sf-current">' +
              '<div class="sf-message sf-current"></div>' +
              '</div>' +
              '</div>';
          }
          sf_sdk.liveChatListener();
        } else {
          if (typeof window.sfType === 'undefined' || window.sfType !== 'inline-load') {

            var type = 'bot';
            if(typeof s.popupType !== 'undefined' && s.popupType === '2'){
              type = 'livechat';
            }
            sf_sdk.popup(type, sfChatText, sfChatImage, sfChatName);
          }
        }
      }, pushDelay);
    }

  },
  stringTokens: function(answer) {
    if (typeof answer === 'string' || answer instanceof String) {
      var cF = window.sfChatFlow;

      if (typeof cF.customerName !== 'undefined') {
        answer = answer.replace("#customerName", cF.customerName);
        answer = answer.replace("#customerFirstName", cF.customerName);
      }
      else {
        answer = answer.replace("#customerName", '');
        answer = answer.replace("#customerFirstName", '');
      }

      if (typeof window.serviceChatDynamicTag10 !== 'undefined') {
        var answer = answer.replace("#dynamicTag10", window.serviceChatDynamicTag10);
        cF.serviceChatDynamicTag9 = window.serviceChatDynamicTag10;
      }
      else {
        var answer = answer.replace("#dynamicTag10", '');
      }

      if (typeof window.serviceChatDynamicTag11 !== 'undefined') {
        var answer = answer.replace("#dynamicTag11", window.serviceChatDynamicTag11);
        cF.serviceChatDynamicTag11 = window.serviceChatDynamicTag11;
      }
      else {
        var answer = answer.replace("#dynamicTag11", '');
      }

      if (typeof window.serviceChatDynamicTag12 !== 'undefined') {
        var answer = answer.replace("#dynamicTag12", window.serviceChatDynamicTag12);
        cF.serviceChatDynamicTag12 = window.serviceChatDynamicTag12;
      }
      else {
        var answer = answer.replace("#dynamicTag12", '');
      }

      if (typeof window.serviceChatDynamicTag1 !== 'undefined') {
        var answer = answer.replace("#dynamicTag1", window.serviceChatDynamicTag1);
        cF.serviceChatDynamicTag1 = window.serviceChatDynamicTag1;
      } else {
        var answer = answer.replace("#dynamicTag1", '');
      }

      if (typeof window.serviceChatDynamicTag2 !== 'undefined') {
        var answer = answer.replace("#dynamicTag2", window.serviceChatDynamicTag2);
        cF.serviceChatDynamicTag2 = window.serviceChatDynamicTag2;
      }
      else {
        var answer = answer.replace("#dynamicTag2", '');
      }

      if (typeof window.serviceChatDynamicTag3 !== 'undefined') {
        var answer = answer.replace("#dynamicTag3", window.serviceChatDynamicTag3);
        cF.serviceChatDynamicTag3 = window.serviceChatDynamicTag3;
      }
      else {
        var answer = answer.replace("#dynamicTag3", '');
      }

      if (typeof window.serviceChatDynamicTag4 !== 'undefined') {
        var answer = answer.replace("#dynamicTag4", window.serviceChatDynamicTag4);
        cF.serviceChatDynamicTag4 = window.serviceChatDynamicTag4;
      }
      else {
        var answer = answer.replace("#dynamicTag4", '');
      }

      if (typeof window.serviceChatDynamicTag5 !== 'undefined') {
        var answer = answer.replace("#dynamicTag5", window.serviceChatDynamicTag5);
        cF.serviceChatDynamicTag5 = window.serviceChatDynamicTag5;
      }
      else {
        var answer = answer.replace("#dynamicTag5", '');
      }

      if (typeof window.serviceChatDynamicTag6 !== 'undefined') {
        var answer = answer.replace("#dynamicTag6", window.serviceChatDynamicTag6);
        cF.serviceChatDynamicTag6 = window.serviceChatDynamicTag6;
      }
      else {
        var answer = answer.replace("#dynamicTag6", '');
      }

      if (typeof window.serviceChatDynamicTag7 !== 'undefined') {
        var answer = answer.replace("#dynamicTag7", window.serviceChatDynamicTag7);
        cF.serviceChatDynamicTag7 = window.serviceChatDynamicTag7;
      }
      else {
        var answer = answer.replace("#dynamicTag7", '');
      }

      if (typeof window.serviceChatDynamicTag8 !== 'undefined') {
        var answer = answer.replace("#dynamicTag8", window.serviceChatDynamicTag8);
        cF.serviceChatDynamicTag8 = window.serviceChatDynamicTag8;
      }
      else {
        var answer = answer.replace("#dynamicTag8", '');
      }

      if (typeof window.serviceChatDynamicTag9 !== 'undefined') {
        var answer = answer.replace("#dynamicTag9", window.serviceChatDynamicTag9);
        cF.serviceChatDynamicTag9 = window.serviceChatDynamicTag9;
      }
      else {
        var answer = answer.replace("#dynamicTag9", '');
      }

      answer = answer.replace("#amount", cF.amount);
      answer = answer.replace("#amount", cF.amount);
      answer = answer.replace("#amount", cF.amount);
      answer = answer.replace("#amount", '');

      var tokens = cF.tokens;
      if (tokens) {
        for (var i = tokens.length - 1; i >= 0; i--) {
          var answer = answer.replace(tokens[i].token, tokens[i].answer);
          var answer = answer.replace(tokens[i].token, tokens[i].answer);
          var answer = answer.replace(tokens[i].token, tokens[i].answer);
        }
      }

      var hiddenTokens = cF.hiddenTokens;
      if (hiddenTokens) {
        for (var ik = hiddenTokens.length - 1; ik >= 0; ik--) {
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
        }

        var questions = serviceChatData.serviceform.questions;
        if (questions) {
          for (var ikk = questions.length - 1; ikk >= 0; ikk--) {
            answer = answer.replace('#token' + ikk, '');
          }
        }
      }

      function evil(fn) {
        var fn = sf_sdk.sfTrimHtml(fn);
        return new Function('return ' + fn)();
      }


      var answer = answer.replace(/{{.*?\}}/, function (x) {
        var x = x.replace('{{', '');
        var x = x.replace('}}', '');
        return evil(x).toFixed(0);
      });

      var answer = answer.replace(/{{.*?\}}/, function (x) {
        var x = x.replace('{{', '');
        var x = x.replace('}}', '');
        return evil(x).toFixed(0);
      });

      var answer = answer.replace(/{{.*?\}}/, function (x) {
        var x = x.replace('{{', '');
        var x = x.replace('}}', '');
        return evil(x).toFixed(0);
      });
    }

    return answer;
  },
  sfTrimHtml: function(answer) {
    var html = answer;
    var div = document.createElement("div");
    div.innerHTML = html;
    return(div.innerText);
    return html;
  },
  processData: function(array){

    var newQuestionsArray = [];

    var type = 'all';
    if(window.sfPreviousArray && window.sfChatLivechat === 0) {
      type = 'one';
      var newLength = window.sfPreviousArray.length;
      var oldLength = array.length;
      var diff = oldLength - newLength;

      if(diff) {
        var secondArray = [];
        var size = array.length;
        // for (var i = diff; i < array.length; i++) {
        //   if (array[i].author === 1) {
        //     secondArray.push(array[i]);
        //   }
        // }

        secondArray.push(array[size-1]);

        newQuestionsArray = secondArray;

        if(newQuestionsArray[0].author === 0){
          return 0;
        }
      }
    } else {
      var doc = document.querySelector('.livechat-container');
      doc.innerHTML = '';

      var discussionWrapper = document.querySelector('.sf-push-discussion');
      if (discussionWrapper) {
        discussionWrapper.innerHTML = '';
      }

      newQuestionsArray = array;
    }

    var html = sf_sdk.arrayToHtml(newQuestionsArray, type);

    sf_sdk.killLoader();
    sf_sdk.pushToDiscussion(html);

    if(typeof newQuestionsArray[0] !== 'undefined' && window.sfChatLivechat === 0 && sf_sdk.agentJoined() === false) {
      if (typeof newQuestionsArray[0].agentId === 'undefined' || newQuestionsArray[0].agentId === '') {
        setTimeout(function () {
          sf_sdk.getLatestOptions();
        }, 700);
      }
    } else if(window.sfChatLivechat === 1) {
      sf_sdk.addTextWriteBox();
    }

    setTimeout(function () {
      var delays = document.getElementsByClassName('sf-delay');
      for (var i = 0; i < delays.length; i++) {
        delays[i].classList.remove('sf-delay');
      }
      var loaders = document.getElementsByClassName('sf-loader-hep');
      for (var i = 0; i < loaders.length; i++) {
        sfPixel.sfRemoveElement(loaders[i]);
      }
    }, 500);
    sf_sdk.scrollBottom();
    window.processing = 0;
    window.sfPreviousArray = array;

    sf_sdk.removeLoader();
  },
  arrayToHtml: function(array, type){

    var k = 0;

    if(sfPixel.stats.mode === 'inline') {
      if (array.length > 4) {
        k = array.length - 3;
      }
    }

    var html = '';

    var loader = '<div class="sf-chat-loader _5wd9 _n4o">' +
      '    <div class="_5w1r _5wdf _3_om">' +
      '      <div class="_5x7x _4a0v _4a0x" data-hover="tooltip" aria-label="Joseph is typing..." id="js_3o">' +
      '        <div class="_4b0g">' +
      '          <div class="_5pd7"></div>' +
      '          <div class="_5pd7"></div>' +
      '          <div class="_5pd7"></div>' +
      '        </div>' +
      '      </div>' +
      '    </div>' +
      '  </div>';

    for (var i = k; i < array.length; i++) {
      var data = array[i];

      if(data.author === 1 && data.bot !== 0 && typeof data.agentImage !== 'undefined'){
        var sfChatElement = document.querySelector('#sf-prem-chat');
        if(sfChatElement){
          sfChatElement.classList.add('sf-initiated-live-chat');
        }
      }

      if(typeof data !== 'undefined' && data.livechatMessage === 1){
        window.sfChatLivechat = 1;
        window.sfAgentJoined = 1;

        sf_sdk.clearOptions();

        if(typeof sf_sdk.waitHelper !== 'undefined'){
          clearTimeout(sf_sdk.waitHelper);
          sf_sdk.killLoader();
        }
      }
      if(array[i].type === 'block') {
        sfPixel.sfSetPixelCookie('sf-livechat-pixel', 'blocked', 7);
        sf_sdk.destroy();
      } else if(array[i].type === 'note') {

        if(data.livechat === 1){
          window.sfChatLivechat = data.livechat;
          window.sfAgentJoined = 1;
          var sfChatElement = document.querySelector('#sf-prem-chat');
          if(sfChatElement){
            sfChatElement.classList.add('sf-initiated-live-chat');
          }

          sf_sdk.livechatStart();

          if(typeof sf_sdk.waitHelper !== 'undefined'){
            clearTimeout(sf_sdk.waitHelper);
            sf_sdk.killLoader();

          }
        }
      }
      var agentImage = serviceChatData.serviceform.serviceChatImage;
      if (typeof data.agentImage !== 'undefined' && data.agentImage !== '') {
        agentImage = data.agentImage;
        if(agentImage === '/course_manager/image-upload.svg'){
          if(window.sfpid === 260735){
            agentImage = 'https://app.serviceform.com/yellow/whitelabel-files/pop-icon.jpg';
          } else {
            agentImage = 'https://app.serviceform.com/course_manager/image-upload.svg';
          }
        }
      }

      if(typeof window.dynamicAgentImage !== 'undefined'){
        agentImage = window.dynamicAgentImage;
      }

      if (typeof data.agentName !== 'undefined' && data.agentName !== '') {
        agentName = data.customerFirstName;
      }

      if (array[i].author === 0) {
        if (array[i].type === 'file') {
          var data = array[i];

          var message = '';
          var fileType = data.fileType;
          if (typeof fileType !== 'undefined' && fileType.indexOf("image") != -1) {
            html += '<div class="sf-conv-message sf-file-chat sf-current">' +
              '                  <img alt="You sent a file" class="sf-file-upload" src="'+data.typeValue+'">' +
              '                  <div class="sf-file-note">'+sf_sdk.tS('You sent a file')+'</div>' +
              '                </div>';
          } else {
            html += '<div class="sf-conv-message sf-file-chat sf-current">' +
              '                  <a class="material-icons" href="'+data.typeValue+'" target="_blank">file_present</a>' +
              '                  <div class="sf-file-note">'+sf_sdk.tS('You sent a file')+'</div>' +
              '                </div>';
          }

        }
      }

      if (array[i].author === 0 && array[i].writing === 0) {
        if (array[i].message !== '') {
          if(array[i].type === 'note') {
            if(array[i].typeValue === 'joined') {
              var agentName = data.agentName;
              if (typeof agentName !== 'undefined') {
                agentName = agentName.split(' ');
                agentName = agentName[0];
              } else {
                agentName = '';
              }
              var messageValue = array[i].message;
              if (typeof array[i].typeValue !== 'undefined') {
                if (array[i].typeValue === 'new-chat') {
                  messageValue = sf_sdk.tS('Started a new chat');
                } else if (array[i].typeValue === 'new-chat') {
                  messageValue = agentName + ' ' + sf_sdk.tS('has joined the chat');
                } else if (array[i].typeValue === 'new-chat') {
                  messageValue = agentName + ' ' + sf_sdk.tS('has left the chat');
                }
              }

              html += '<div class="sf-msg-wrp sf-note">' +
                '<div class="sf-msg-ava"></div>' +
                '<div class="sf-message sf-business sf-note">' + messageValue + '</div>' +
                '</div>';
            }
          }
          else {
            html += '<div class="sf-msg-wrp sf-current">' +
              '<div class="sf-message sf-current">' + array[i].message + '</div></div>';
          }
        }
      }
      else if (array[i].author === 1) {
        if (array[i].writing === 1) {
          html += '<div class="sf-msg-wrp"><div class="sf-message">writing</div></div>';
        }
        else if (array[i].message !== '') {

          var delay = '';
          var load = '';
          if(type === 'one'){
            delay = 'sf-delay';
            load = '<div class="sf-loader-hep">'+loader+'</div>'
          }

          if(array[i].type === 'note') {

            if(array[i].typeValue === 'joined') {
              var agentName = array[i].agentName;
              if (typeof agentName !== 'undefined') {
                agentName = agentName.split(' ');
                agentName = agentName[0];
              } else {
                agentName = '';
              }

              if (agentImage) {

                if(typeof window.dynamicAgentImage !== 'undefined'){
                  agentImage = window.dynamicAgentImage;
                }

                html += '<div class="sf-msg-wrp sf-note">' +
                  '<div class="sf-msg-ava"><img src="' + agentImage + '"></div>' +
                  '<div class="sf-message sf-business sf-note ' + delay + '">' + load + agentName + ' ' + array[i].message + '</div>' +
                  '</div>';
              }
            } else if(array[i].typeValue === 'left') {
              setTimeout(function(){
                if(typeof serviceChatData.serviceform.review !== 'undefined' && serviceChatData.serviceform.review === '1') {
                  sf_sdk.reviewBox('inside');
                }
              }, 1000);

            }
          }
          else if (array[i].type === 'file') {
            var data = array[i];

            var message = '';
            var fileType = data.fileType;
            if (typeof fileType !== 'undefined' && fileType.indexOf("image") != -1) {
              html += '<div class="sf-conv-message sf-file-chat sf-business">' +
                '                  <img onclick="window.open(this.src, \'_blank\');" alt="'+data.message+'" class="sf-file-upload" src="'+data.typeValue+'">' +
                '                  <div class="sf-file-note">' + data.agentName + ' ' + data.message + '</div>' +
                '                </div>';
            } else {

              html += '<div class="sf-conv-message sf-file-chat sf-business">' +
                '                  <a class="material-icons" href="' + data.typeValue + '" target="_blank">file_present</a>' +
                '                  <div class="sf-file-note">' + data.agentName + ' ' + data.message + '</div>' +
                '                </div>';
            }
          }
          else if (array[i].type === 'videoCall') {
            var data = array[i];
            html += '<iframe allow="camera; microphone; display-capture; autoplay;" src="https://app.vooler.fi/serviceform-dlkvykjpaz" name="jitsiConferenceFrame0" id="jitsiConferenceFrame0" allowfullscreen="true"></iframe>';
            // html += '<iframe class="tokbox-sf" src="https://tokbox.com/embed/embed/ot-embed.js?embedId=57f4860e-8b9b-45de-9558-b452a90df3b7&room='+data.typeValue+'&iframe=true" width="800" height="640" scrolling="auto" allow="microphone; camera"/><iframe>';
          } else if(array[i].bot === 1){
            html += '<div class="sf-msg-wrp">' +
              '<div class="sf-msg-ava"><img src="' + agentImage + '"></div>' +
              '<div class="sf-message sf-business '+delay+'">'+ load + array[i].message + '</div>' +
              '</div>';
          } else {
            var options = {
              defaultProtocol: 'https'
            };
            html += '<div class="sf-msg-wrp">' +
              '<div class="sf-msg-ava"><img src="' + agentImage + '"></div>' +
              '<div class="sf-message sf-business '+delay+'">'+ load + sf_sdk.linkifyHtml(array[i].message, options) + '</div>' +
              '</div>';
          }
        }
      }
      if (i === 0) {
        if (typeof array[i].page !== 'undefined') {
          options = array[i].page;
        }
      }
    }

    return html;
  },
  calendlyScheduling: function(){
    sfPixel.loadScript2('https://assets.calendly.com/assets/external/widget.js',loadInline);

    function loadInline(){
      Calendly.initInlineWidget({
        url: 'https://calendly.com/marina-square/15min',
        parentElement: document.getElementById('sf-calendly'),
        prefill: {},
        utm: {}
      });
    }
  },
  sfOpenInNewTab: function(url, type) {
    if(type){
      var win = window.open(url, '_blank');
      win.focus();
    } else {
      setTimeout(function () {
        window.location.replace(url);
      }, 1000);
    }
  },
  sendStuff: function(type, text){

    if(typeof window.sfLiveChatCid === 'undefined') {
      sf_sdk.initChatListener('new');
    }

    // Update last message in conversation.
    if(text && text !== '') {
      sf_sdka.database().ref('/session/'+window.sfLivePid+'/'+sfPixel.stats.session+'/conversations/'+window.sfLiveChatCid).update({
        lastMessageTime: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: text,
        lastMessageAuthor: 0
      });

      sf_sdka.database().ref('/session/'+window.sfLivePid+'/'+sfPixel.stats.session).update({
        lastMessageTime: sf_sdka.database.ServerValue.TIMESTAMP,
        lastMessage: text,
        lastMessageAuthor: 0
      });
    }

    sfPixel.stats.activeChatCid = window.sfLiveChatCid;

    if(typeof text !== 'undefined' && text !== ''){
      if(type !== 'bot') {
        sf_sdk.sendLivechatMessage(text,0,0, 'automatic');
      } else {
        sf_sdk.sendLivechatMessage(text,1,0, 'automatic');
      }
    }
  },
  scrollBottom: function(){
    var myElement = document.querySelector('.livechat-container');
    if(myElement) {
      myElement.scrollTop = myElement.scrollHeight;
    }

    var myElement = document.querySelector('.sf-push');
    if(myElement) {
      myElement.scrollTop = myElement.scrollHeight;
    }
  },
  revertHeight: function() {
    var txt = document.getElementById('sf-livechat-textarea');
    var chatContainer = document.getElementsByClassName('livechat-container')[0];
    txt.style.cssText = 'height: 0';
    chatContainer.style.cssText = 'height: 0'
  },
  disableTextArea: function(){
    sf_sdk.allowWriting = 0;
    setTimeout(function () {
      sf_sdk.allowWriting = 1;
    }, 500);
  },
  sendLivechatMessage: function(message, author, writing, messageType){
    sf_sdk.revertHeight();
    sf_sdk.disableTextArea();
    window.sfWriting = 0;

    sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/user-writing').remove();

    if(writing) {
      sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/user-writing').set({
        writing: writing,
        author: 0,
        message: message,
        timestamp: sf_sdka.database.ServerValue.TIMESTAMP
      });
    } else {
      var newPostKey = sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/').push().key;
      var sfChatName = serviceChatData.serviceform.serviceChatName;

      if (author) {
        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set({
          message: message,
          author: author,
          bot: 1,
          agentName: sfChatName,
          writing: 0,
          timestamp: sf_sdka.database.ServerValue.TIMESTAMP
        });
      } else if(author === 3) {
        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set({
          message: message,
          author: author,
          bot: 1,
          type: 'note',
          livechat: 1,
          agentName: sfChatName,
          writing: 0,
          timestamp: sf_sdka.database.ServerValue.TIMESTAMP
        });
      } else {
        sf_sdka.database().ref('/messages/' + window.sfLivePid + '/' + sfPixel.stats.session + '/' + window.sfLiveChatCid + '/' + newPostKey).set({
          message: message,
          author: author,
          writing: 0,
          bot: 0,
          timestamp: sf_sdka.database.ServerValue.TIMESTAMP
        });

        if(messageType === 'manual') {

          // Handle manual messages.
          var emailsArray = message.match(/([a-zA-Z0-9._-]+@[a-zA-Z0-9._-]+\.[a-zA-Z0-9._-]+)/gi);
          if (emailsArray != null && emailsArray.length && emailsArray[0]) {
            sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid).update({
              submission: 1,
              livechatCustomEmail: 1,
              email: emailsArray[0].trim()
            });
            sfChatFlow.customerEmail = emailsArray[0].trim();
          }

          var phoneNumberArray = message.match(/(?:[-+() ]*\d){10,13}/gm);
          if (phoneNumberArray != null && phoneNumberArray.length && phoneNumberArray[0]) {
            sf_sdka.database().ref('/livechat/' + window.sfLivePid + '/' + window.sfLiveChatCid).update({
              submission: 1,
              livechatCustomPhone: 1,
              phone: phoneNumberArray[0].trim()
            });
            sfChatFlow.customerPhone = phoneNumberArray[0].trim();
          }

          var summaryItemAnswer = {
            "answer": [{
              "answer": message,
              "amount": '',
              "qid": "message"
            }],
            "label": "Message",
            "question": 0,
            "price": '',
            "qid": "message"
          }

          sfChatFlow.summaryItems.push(summaryItemAnswer);
        }
      }

      sf_sdk.updateRealtime('normal', message, '');
    }
  },
  generateId: function(length) {
    var s = '';
    do { s += Math.random().toString(36).substr(2); } while (s.length < length);
    s = s.substr(0, length);

    return s;
  },
  getChatFlows: function(){
    var question = 0;
    var sfData = serviceChatData.serviceform;
    if(typeof sfData.chatPushSettingsQuestion !== 'undefined'){
      question = sf_sdk.getPageFromId(sfData.chatPushSettingsQuestion);
    }
    if(typeof question === 'undefined' || question === 'none'){
      question = 0;
    }
    var q = sfData.questions[question];

    return q;
  },
  buildPushOptions: function(){
    var options = sf_sdk.getChatFlows();
    if(options) {
      var qid = options.qid;
      options = options.options;
      var html = '<div class="sf-options">';
      for (var i = 0; i < options.length; i++) {
        if (typeof options[i].oid === 'undefined') {
          options[i].oid = i;
        }

        var show = sf_sdk.showOption(options[i]);

        if (show) {
          html += sf_sdk.optionHTML(options[i], qid);
        }
      }
      html += '</div>';
      return html;
    }
  },
  optionHTML: function(option, qid){
    var html;

    var liveChatClass = '';
    if(typeof option.livechatOption !== 'undefined' && option.livechatOption === '1'){
      liveChatClass = 'sf-livechat-option';
    }

    if(typeof option.image !== 'undefined' && option.image !== ''){
      html = '<div class="sf-conversation-cta sf-has-image '+liveChatClass+'" qid="'+qid+'" oid="'+option.oid+'" role="button" tabindex="0">' +
        '<img src="'+option.image+'">'+
        '<div class="sf-internal">'+sf_sdk.stringTokens(option.answer)+'</div></div>';
    } else {
      html = '<div class="sf-conversation-cta '+liveChatClass+'" qid="'+qid+'" oid="'+option.oid+'"  role="button" tabindex="0">'+sf_sdk.stringTokens(option.answer)+'</div>';
    }
    return html;
  },
  addOptionWithFallback: function(options){
    for (var i = 0; i < options.length; i++) {
      var option = options[i];
      var page = sf_sdk.getPageFromId(option.addTo);
      var jumpTo = sfPixel.generateId(12);

      var newQuestion = {
        defaultWaitingTime: "5000",
        jump: option.addTo,
        options: [{
          answer: "Continue tour",
          description: "",
          image: "",
          jump: option.addTo,
          oid: sfPixel.generateId(12),
        }],
        qid: jumpTo,
        subtitle: "",
        title: option.description,
        background: option.background,
        type: "radio"
      }

      serviceChatData.serviceform.questions.push(newQuestion);

      var newOption = {
        answer: option.text,
        description: "",
        image: "",
        jump: jumpTo,
        oid: sfPixel.generateId(12),
        qid: option.addTo,
        range: "",
      }

      serviceChatData.serviceform.questions[page].options.push(newOption);
    }
  },
  buildFlows: function(){
    var options = sf_sdk.getChatFlows();
    if(options) {
      var qid = options.qid;
      options = options.options;
      var html = '';

      for (var i = 0; i < options.length; i++) {
        var oid = options[i].oid;
        if (typeof oid === 'undefined') {
          oid = i;
        }

        var show = sf_sdk.showOption(options[i]);

        var liveChatClass = '';
        if(typeof options[i].livechatOption !== 'undefined' && options[i].livechatOption === '1'){
          liveChatClass = 'sf-livechat-option';
        }

        if (show) {
          if (typeof options[i].image !== 'undefined' && options[i].image !== '') {
            html += '<div class="sf-intro-block-content-cta sf-has-image '+liveChatClass+'" qid="' + qid + '" oid="' + oid + '">' +
              '<img src="' + options[i].image + '">' +
              '<div class="sf-internal">' + sf_sdk.stringTokens(options[i].answer) + '</div></div>';
          } else {
            html += '<div class="sf-intro-block-content-cta '+liveChatClass+'" qid="' + qid + '" oid="' + oid + '">' + sf_sdk.stringTokens(options[i].answer) + '</div>';
          }
        }
      }
      return html;
    } else {
      return '';
    }
  },
  getPageFromId: function(id){
    if(typeof id !== 'undefined') {
      var id = id;
      if (id.length > 4) {
        var questions = serviceChatData.serviceform.questions;
        for (var i = 0; i < questions.length; i++) {

          if (questions[i].qid === id) {
            return i;
          }
        }
      } else {
        return id;
      }
    } else {
      return "und";
    }
  },
  timeSince: function(timeStamp) {
    var now = new Date(),
      secondsPast = (now.getTime() - timeStamp) / 1000;
    if (secondsPast < 60) {
      return parseInt(secondsPast) + sf_sdk.tS('s ago');
    }
    if (secondsPast < 3600) {
      return parseInt(secondsPast / 60) + sf_sdk.tS('m ago');
    }
    if (secondsPast <= 86400) {
      return parseInt(secondsPast / 3600) + sf_sdk.tS('h ago');
    }
    if (secondsPast > 86400) {
      return sf_sdk.tS('Some time ago');
    }
  },
  validatePhone: function(value) {
    value = value.replace(/\s/g, '');
    var regex = /^(\+{0,})(\d{0,})([(]{1}\d{1,3}[)]{0,}){0,}(\s?\d+|\+\d{2,3}\s{1}\d+|\d+){1}[\s|-]?\d+([\s|-]?\d+){1,2}(\s){0,}$/gm;
    if (regex.test(value)) {
      return true;
    }
    else {
      return false;
    }
  },
  validateEmail: function(email) {
    var re = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
    return re.test(String(email).toLowerCase());
  },
  initWelcomeBot: function(text){

    var agentImage = serviceChatData.serviceform.serviceChatImage;
    html = '<div class="sf-msg-wrp">' +
      '<div class="sf-msg-ava"><img src="' + agentImage + '"></div>' +
      '<div class="sf-message sf-business">'+text+'</div>' +
      '</div>';

    sf_sdk.addAdminAnswer(text);
    sf_sdk.pushToDiscussion(html);

  },
  showOption: function(options){

    var show = 1;
    var chatLive = 1;
    var globalDefault = serviceChatData.serviceform.defaultTeam;

    if (typeof options.livechatOption !== 'undefined') {
      if (typeof options.chatDefaultTeam !== 'undefined' && typeof sfPixel.ruleDetails !== 'undefined' && typeof sfPixel.ruleDetails.teams !== 'undefined'
        || typeof globalDefault !== 'undefined' && globalDefault !== '' && typeof sfPixel.ruleDetails !== 'undefined' && typeof sfPixel.ruleDetails.teams !== 'undefined') {
        var teams = sfPixel.ruleDetails.teams;
        var team = '';
        if (typeof options.chatDefaultTeam !== 'undefined' && options.chatDefaultTeam !== '') {
          team = options.chatDefaultTeam;
        } else if (typeof globalDefault !== 'undefined' && globalDefault !== '') {
          team = globalDefault;
        }
        if (team === '') {
          return 1;
        }

        for (var i = 0; i < teams.length; i++) {
          if (teams[i].teamId === team) {
            chatLive = teams[i].chatOnline;
            break;
          }
        }
        if (typeof options.livechatOption !== 'undefined' && options.livechatOption === '1' && chatLive === 0) {
          show = 0;
        } else if (typeof options.livechatOption !== 'undefined' && options.livechatOption === '2' && chatLive === 1) {
          show = 0;
        }
      } else {
        if (typeof options.livechatOption !== 'undefined' && options.livechatOption === '1' && typeof sfPixel.ruleDetails !== 'undefined' && sfPixel.ruleDetails.chatOnline === 0) {
          show = 0;
        }
      }
    }

    return show;
  },
  humanBehaviors: function (string) {
    string = string.toLowerCase();
    var cH = serviceChatData.serviceform;

    if (typeof cH.questionAnswer !== 'undefined') {
      var responses = cH.questionAnswer;
    }
    else {
      responses = [];
    }

    var answer = 0;
    // Loop through responses.
    for (var iq = 0; iq < responses.length; iq++) {
      var value = 0;

      if (responses[iq].question !== '') {
        var ir = responses[iq].question.split(',');
        for (var iqq = 0; iqq < ir.length; iqq++) {
          var helper = ir[iqq];
          if (helper !== '') {
            helper = helper.trim();
            helper = helper.replace(/^(&nbsp;|<br>)+/, '');

            helper = helper.toLowerCase();

            if (string.indexOf(helper) != -1) {
              value = 1;
              answer = responses[iq];
              return answer;
            }
          }
        }
      }
    }

    return answer;
  },
  sendChatLoadedEvent() {

    if(typeof window.onServiceformChatLoad === 'function') {
      window.onServiceformChatLoad();
    }

    window.dataLayer = window.dataLayer || [];

    var eventName = 'Chat loaded';

    window.dataLayer.push({
      'event': 'serviceform',
      'chatProgress': eventName
    });

    if(typeof serviceChatData.serviceform.sfGaPush !== 'undefined' && serviceChatData.serviceform.sfGaPush === '0') {
    } else {
      if (typeof ga === 'function') {
        if ("ga" in window) {
          if (typeof ga.getAll === 'function') {
            var tracker = ga.getAll();
            for (var i = 0; i < tracker.length; i++) {
              if (tracker[i]) {
                tracker[i].send("event", "Serviceform", eventName);
              }
            }
          }
        }
      }
      if(typeof gtag !== 'undefined' && typeof gtag === 'function') {
        gtag('event', eventName, {
          'app_name': 'Serviceform',
        });
      }
    }
  },
  dataLayerStart() {
    if (window.dataLayerStartedNow !== '1') {
      window.dataLayer = window.dataLayer || [];

      var startName = serviceChatData.serviceform.sfGaChatStartName;

      var eventName = 'Chat started';
      var datalayerName = 'chat start';
      if(typeof startName !== 'undefined' && startName !== ''){
        eventName = startName;
        datalayerName = startName;
      }

      window.dataLayer.push({
        'event': 'serviceform',
        'chatProgress': datalayerName
      });

      if(typeof serviceChatData.serviceform.sfGaPush !== 'undefined' && serviceChatData.serviceform.sfGaPush === '0') {
      } else {
        if (typeof ga === 'function') {
          if ("ga" in window) {
            if (typeof ga.getAll === 'function') {
              var tracker = ga.getAll();
              for (var i = 0; i < tracker.length; i++) {
                if (tracker[i]) {
                  tracker[i].send("event", "Serviceform", eventName);
                }
              }
            }
          }
        }
        if(typeof gtag !== 'undefined' && typeof gtag === 'function') {
          gtag('event', eventName, {
            'app_name': 'Serviceform',
          });
        }
      }

      if (typeof window.sfGoogleDataClickId !== 'undefined') {
        var callback = function () {
          if (typeof(url) != 'undefined') {
            window.location = url;
          }
        };

        if(typeof gtag !== 'undefined' && typeof gtag === 'function') {
          gtag('event', 'conversion', {
            'send_to': window.sfGoogleDataClickId,
            'event_callback': callback
          });
        }
      }

      window.dataLayerStartedNow = '1';
    }
  },
  dataLayerEnd() {
    window.dataLayer = window.dataLayer || [];

    var completeName = serviceChatData.serviceform.sfGaChatCompleteName;

    var eventName = 'Chat complete';
    var datalayerName = 'chat complete';
    if(typeof completeName !== 'undefined' && completeName !== ''){
      eventName = completeName;
      datalayerName = completeName;
    }

    window.dataLayer.push({
      'event': 'serviceform',
      'chatProgress': datalayerName
    });

    if(typeof serviceChatData.serviceform.sfGaPush !== 'undefined' && serviceChatData.serviceform.sfGaPush === '0') {
    } else {
      if (typeof ga === 'function') {
        if ("ga" in window) {
          if (typeof ga.getAll === 'function') {
            var tracker = ga.getAll();
            for (var i = 0; i < tracker.length; i++) {
              if (tracker[i]) {
                tracker[i].send("event", "Serviceform", eventName);
              }
            }
          }
        }
      }

      if(typeof gtag !== 'undefined' && typeof gtag === 'function') {
        gtag('event', eventName, {
          'app_name': 'Serviceform',
        });
      }
    }

    if (typeof window.sfGoogleDataConversionId !== 'undefined') {
      if (typeof gtag === 'function') {
        var callback = function () {
          if (typeof(url) != 'undefined') {
            window.location = url;
          }
        };

        if(typeof gtag !== 'undefined' && typeof gtag === 'function') {
          gtag('event', 'conversion', {
            'send_to': window.sfGoogleDataConversionId,
            'event_callback': callback
          });
        }
      }
    }
  },
  sfStatsSend(context) {
    var data = {
      ... context,
      type: "chatbot",
      nid: serviceChatData.serviceform.nid,
      pid: serviceChatData.serviceform.uid
    }
    var url = "https://eu.serviceform.com/statistics-endpoint";

    var xhr = new XMLHttpRequest();
    xhr.open("POST", url);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.send(JSON.stringify(data));
  },
  // handle with LocalStorage
  saveToLocalStorage(key, value){
    if (window.sessionStorage) {
      sessionStorage.setItem(`sf_${key}`, value)
    }
  },
  getFromLocalStorage(key){
    if (window.sessionStorage) {
      return sessionStorage.getItem(`sf_${key}`);
    } else {
      return '';
    }
  }
}

sf_sdk.linkify = function(u){"use strict";function D(u){this.j={},this.jr=[],this.jd=null,this.t=u}D.prototype={accepts:function(){return!!this.t},tt:function(u,D){if(D&&D.j)return this.j[u]=D,D;var t=D,a=this.j[u];if(a)return t&&(a.t=t),a;a=e();var r=i(this,u);return r?(Object.assign(a.j,r.j),a.jr.append(r.jr),a.jr=r.jd,a.t=t||r.t):a.t=t,this.j[u]=a,a}};var e=function(){return new D},t=function(u){return new D(u)},a=function(u,D,e){u.j[D]||(u.j[D]=e)},r=function(u,D,e){u.jr.push([D,e])},i=function(u,D){var e=u.j[D];if(e)return e;for(var t=0;t<u.jr.length;t++){var a=u.jr[t][0],r=u.jr[t][1];if(a.test(D))return r}return u.jd},n=function(u,D,e){for(var t=0;t<D.length;t++)a(u,D[t],e)},o=function(u,D){for(var e=0;e<D.length;e++){var t=D[e][0],r=D[e][1];a(u,t,r)}},s=function(u,D,e,t){for(var r,i=0,n=D.length;i<n&&(r=u.j[D[i]]);)u=r,i++;if(i>=n)return[];for(;i<n-1;)r=t(),a(u,D[i],r),u=r,i++;a(u,D[n-1],e)},l="DOMAIN",c="LOCALHOST",F="TLD",E="NUM",A="PROTOCOL",C="MAILTO",g="WS",h="NL",f="OPENBRACE",m="OPENBRACKET",d="OPENANGLEBRACKET",p="OPENPAREN",B="CLOSEBRACE",b="CLOSEBRACKET",v="CLOSEANGLEBRACKET",y="CLOSEPAREN",k="AMPERSAND",w="APOSTROPHE",j="ASTERISK",x="AT",O="BACKSLASH",z="BACKTICK",L="CARET",N="COLON",P="COMMA",S="DOLLAR",T="DOT",R="EQUALS",H="EXCLAMATION",M="HYPHEN",I="PERCENT",K="PIPE",U="PLUS",q="POUND",_="QUERY",Q="QUOTE",Y="SEMI",G="SLASH",W="TILDE",X="UNDERSCORE",Z="SYM",$=Object.freeze({__proto__:null,DOMAIN:l,LOCALHOST:c,TLD:F,NUM:E,PROTOCOL:A,MAILTO:C,WS:g,NL:h,OPENBRACE:f,OPENBRACKET:m,OPENANGLEBRACKET:d,OPENPAREN:p,CLOSEBRACE:B,CLOSEBRACKET:b,CLOSEANGLEBRACKET:v,CLOSEPAREN:y,AMPERSAND:k,APOSTROPHE:w,ASTERISK:j,AT:x,BACKSLASH:O,BACKTICK:z,CARET:L,COLON:N,COMMA:P,DOLLAR:S,DOT:T,EQUALS:R,EXCLAMATION:H,HYPHEN:M,PERCENT:I,PIPE:K,PLUS:U,POUND:q,QUERY:_,QUOTE:Q,SEMI:Y,SLASH:G,TILDE:W,UNDERSCORE:X,SYM:Z}),J="aaa aarp abarth abb abbott abbvie abc able abogado abudhabi ac academy accenture accountant accountants aco actor ad adac ads adult ae aeg aero aetna af afamilycompany afl africa ag agakhan agency ai aig airbus airforce airtel akdn al alfaromeo alibaba alipay allfinanz allstate ally alsace alstom am amazon americanexpress americanfamily amex amfam amica amsterdam analytics android anquan anz ao aol apartments app apple aq aquarelle ar arab aramco archi army arpa art arte as asda asia associates at athleta attorney au auction audi audible audio auspost author auto autos avianca aw aws ax axa az azure ba baby baidu banamex bananarepublic band bank bar barcelona barclaycard barclays barefoot bargains baseball basketball bauhaus bayern bb bbc bbt bbva bcg bcn bd be beats beauty beer bentley berlin best bestbuy bet bf bg bh bharti bi bible bid bike bing bingo bio biz bj black blackfriday blockbuster blog bloomberg blue bm bms bmw bn bnpparibas bo boats boehringer bofa bom bond boo book booking bosch bostik boston bot boutique box br bradesco bridgestone broadway broker brother brussels bs bt budapest bugatti build builders business buy buzz bv bw by bz bzh ca cab cafe cal call calvinklein cam camera camp cancerresearch canon capetown capital capitalone car caravan cards care career careers cars casa case cash casino cat catering catholic cba cbn cbre cbs cc cd center ceo cern cf cfa cfd cg ch chanel channel charity chase chat cheap chintai christmas chrome church ci cipriani circle cisco citadel citi citic city cityeats ck cl claims cleaning click clinic clinique clothing cloud club clubmed cm cn co coach codes coffee college cologne com comcast commbank community company compare computer comsec condos construction consulting contact contractors cooking cookingchannel cool coop corsica country coupon coupons courses cpa cr credit creditcard creditunion cricket crown crs cruise cruises csc cu cuisinella cv cw cx cy cymru cyou cz dabur dad dance data date dating datsun day dclk dds de deal dealer deals degree delivery dell deloitte delta democrat dental dentist desi design dev dhl diamonds diet digital direct directory discount discover dish diy dj dk dm dnp do docs doctor dog domains dot download drive dtv dubai duck dunlop dupont durban dvag dvr dz earth eat ec eco edeka edu education ee eg email emerck energy engineer engineering enterprises epson equipment er ericsson erni es esq estate et etisalat eu eurovision eus events exchange expert exposed express extraspace fage fail fairwinds faith family fan fans farm farmers fashion fast fedex feedback ferrari ferrero fi fiat fidelity fido film final finance financial fire firestone firmdale fish fishing fit fitness fj fk flickr flights flir florist flowers fly fm fo foo food foodnetwork football ford forex forsale forum foundation fox fr free fresenius frl frogans frontdoor frontier ftr fujitsu fujixerox fun fund furniture futbol fyi ga gal gallery gallo gallup game games gap garden gay gb gbiz gd gdn ge gea gent genting george gf gg ggee gh gi gift gifts gives giving gl glade glass gle global globo gm gmail gmbh gmo gmx gn godaddy gold goldpoint golf goo goodyear goog google gop got gov gp gq gr grainger graphics gratis green gripe grocery group gs gt gu guardian gucci guge guide guitars guru gw gy hair hamburg hangout haus hbo hdfc hdfcbank health healthcare help helsinki here hermes hgtv hiphop hisamitsu hitachi hiv hk hkt hm hn hockey holdings holiday homedepot homegoods homes homesense honda horse hospital host hosting hot hoteles hotels hotmail house how hr hsbc ht hu hughes hyatt hyundai ibm icbc ice icu id ie ieee ifm ikano il im imamat imdb immo immobilien in inc industries infiniti info ing ink institute insurance insure int international intuit investments io ipiranga iq ir irish is ismaili ist istanbul it itau itv iveco jaguar java jcb je jeep jetzt jewelry jio jll jm jmp jnj jo jobs joburg jot joy jp jpmorgan jprs juegos juniper kaufen kddi ke kerryhotels kerrylogistics kerryproperties kfh kg kh ki kia kim kinder kindle kitchen kiwi km kn koeln komatsu kosher kp kpmg kpn kr krd kred kuokgroup kw ky kyoto kz la lacaixa lamborghini lamer lancaster lancia land landrover lanxess lasalle lat latino latrobe law lawyer lb lc lds lease leclerc lefrak legal lego lexus lgbt li lidl life lifeinsurance lifestyle lighting like lilly limited limo lincoln linde link lipsy live living lixil lk llc llp loan loans locker locus loft lol london lotte lotto love lpl lplfinancial lr ls lt ltd ltda lu lundbeck luxe luxury lv ly ma macys madrid maif maison makeup man management mango map market marketing markets marriott marshalls maserati mattel mba mc mckinsey md me med media meet melbourne meme memorial men menu merckmsd mg mh miami microsoft mil mini mint mit mitsubishi mk ml mlb mls mm mma mn mo mobi mobile moda moe moi mom monash money monster mormon mortgage moscow moto motorcycles mov movie mp mq mr ms msd mt mtn mtr mu museum mutual mv mw mx my mz na nab nagoya name nationwide natura navy nba nc ne nec net netbank netflix network neustar new news next nextdirect nexus nf nfl ng ngo nhk ni nico nike nikon ninja nissan nissay nl no nokia northwesternmutual norton now nowruz nowtv np nr nra nrw ntt nu nyc nz obi observer off office okinawa olayan olayangroup oldnavy ollo om omega one ong onl online onyourside ooo open oracle orange org organic origins osaka otsuka ott ovh pa page panasonic paris pars partners parts party passagens pay pccw pe pet pf pfizer pg ph pharmacy phd philips phone photo photography photos physio pics pictet pictures pid pin ping pink pioneer pizza pk pl place play playstation plumbing plus pm pn pnc pohl poker politie porn post pr pramerica praxi press prime pro prod productions prof progressive promo properties property protection pru prudential ps pt pub pw pwc py qa qpon quebec quest qvc racing radio raid re read realestate realtor realty recipes red redstone redumbrella rehab reise reisen reit reliance ren rent rentals repair report republican rest restaurant review reviews rexroth rich richardli ricoh ril rio rip rmit ro rocher rocks rodeo rogers room rs rsvp ru rugby ruhr run rw rwe ryukyu sa saarland safe safety sakura sale salon samsclub samsung sandvik sandvikcoromant sanofi sap sarl sas save saxo sb sbi sbs sc sca scb schaeffler schmidt scholarships school schule schwarz science scjohnson scot sd se search seat secure security seek select sener services ses seven sew sex sexy sfr sg sh shangrila sharp shaw shell shia shiksha shoes shop shopping shouji show showtime si silk sina singles site sj sk ski skin sky skype sl sling sm smart smile sn sncf so soccer social softbank software sohu solar solutions song sony soy spa space sport spot spreadbetting sr srl ss st stada staples star statebank statefarm stc stcgroup stockholm storage store stream studio study style su sucks supplies supply support surf surgery suzuki sv swatch swiftcover swiss sx sy sydney systems sz tab taipei talk taobao target tatamotors tatar tattoo tax taxi tc tci td tdk team tech technology tel temasek tennis teva tf tg th thd theater theatre tiaa tickets tienda tiffany tips tires tirol tj tjmaxx tjx tk tkmaxx tl tm tmall tn to today tokyo tools top toray toshiba total tours town toyota toys tr trade trading training travel travelchannel travelers travelersinsurance trust trv tt tube tui tunes tushu tv tvs tw tz ua ubank ubs ug uk unicom university uno uol ups us uy uz va vacations vana vanguard vc ve vegas ventures verisign versicherung vet vg vi viajes video vig viking villas vin vip virgin visa vision viva vivo vlaanderen vn vodka volkswagen volvo vote voting voto voyage vu vuelos wales walmart walter wang wanggou watch watches weather weatherchannel webcam weber website wed wedding weibo weir wf whoswho wien wiki williamhill win windows wine winners wme wolterskluwer woodside work works world wow ws wtc wtf xbox xerox xfinity xihuan xin xxx xyz yachts yahoo yamaxun yandex ye yodobashi yoga yokohama you youtube yt yun za zappos zara zero zip zm zone zuerich zw vermögensberater-ctb vermögensberatung-pwb ελ ευ бг бел дети ею католик ком қаз мкд мон москва онлайн орг рус рф сайт срб укр გე հայ ישראל קום ابوظبي اتصالات ارامكو الاردن البحرين الجزائر السعودية العليان المغرب امارات ایران بارت بازار بھارت بيتك پاکستان ڀارت تونس سودان سورية شبكة عراق عرب عمان فلسطين قطر كاثوليك كوم مصر مليسيا موريتانيا موقع همراه कॉम नेट भारत भारतम् भारोत संगठन বাংলা ভারত ভাৰত ਭਾਰਤ ભારત ଭାରତ இந்தியா இலங்கை சிங்கப்பூர் భారత్ ಭಾರತ ഭാരതം ලංකා คอม ไทย ລາວ 닷넷 닷컴 삼성 한국 アマゾン グーグル クラウド コム ストア セール ファッション ポイント みんな 世界 中信 中国 中國 中文网 亚马逊 企业 佛山 信息 健康 八卦 公司 公益 台湾 台灣 商城 商店 商标 嘉里 嘉里大酒店 在线 大众汽车 大拿 天主教 娱乐 家電 广东 微博 慈善 我爱你 手机 招聘 政务 政府 新加坡 新闻 时尚 書籍 机构 淡马锡 游戏 澳門 点看 移动 组织机构 网址 网店 网站 网络 联通 诺基亚 谷歌 购物 通販 集团 電訊盈科 飞利浦 食品 餐厅 香格里拉 香港".split(" "),V=/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/,uu=/(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEDD-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDDFF\uDE70-\uDE74\uDE78-\uDE7C\uDE80-\uDE86\uDE90-\uDEAC\uDEB0-\uDEBA\uDEC0-\uDEC5\uDED0-\uDED9\uDEE0-\uDEE7\uDEF0-\uDEF6])/,Du=/\uFE0F/,eu=/\d/,tu=/\s/;function au(){var u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],D=e(),i=t(E),n=t(l),$=e(),au=t(g),ru=[[eu,n],[V,n],[uu,n],[Du,n]],iu=function(){var u=t(l);return u.j={"-":$},u.jr=[].concat(ru),u},nu=function(u){var D=iu();return D.t=u,D};o(D,[["'",t(w)],["{",t(f)],["[",t(m)],["<",t(d)],["(",t(p)],["}",t(B)],["]",t(b)],[">",t(v)],[")",t(y)],["&",t(k)],["*",t(j)],["@",t(x)],["`",t(z)],["^",t(L)],[":",t(N)],[",",t(P)],["$",t(S)],[".",t(T)],["=",t(R)],["!",t(H)],["-",t(M)],["%",t(I)],["|",t(K)],["+",t(U)],["#",t(q)],["?",t(_)],['"',t(Q)],["/",t(G)],[";",t(Y)],["~",t(W)],["_",t(X)],["\\",t(O)]]),a(D,"\n",t(h)),r(D,tu,au),a(au,"\n",e()),r(au,tu,au);for(var ou=0;ou<J.length;ou++)s(D,J[ou],nu(F),iu);var su=iu(),lu=iu(),cu=iu(),Fu=iu();s(D,"file",su,iu),s(D,"ftp",lu,iu),s(D,"http",cu,iu),s(D,"mailto",Fu,iu);var Eu=iu(),Au=t(A),Cu=t(C);a(lu,"s",Eu),a(lu,":",Au),a(cu,"s",Eu),a(cu,":",Au),a(su,":",Au),a(Eu,":",Au),a(Fu,":",Cu);for(var gu=iu(),hu=0;hu<u.length;hu++)s(D,u[hu],gu,iu);return a(gu,":",Au),s(D,"localhost",nu(c),iu),r(D,eu,i),r(D,V,n),r(D,uu,n),r(D,Du,n),r(i,eu,i),r(i,V,n),r(i,uu,n),r(i,Du,n),a(i,"-",$),a(n,"-",$),a($,"-",$),r(n,eu,n),r(n,V,n),r(n,uu,n),r(n,Du,n),r($,eu,n),r($,V,n),r($,uu,n),r($,Du,n),D.jd=t(Z),D}function ru(u){return ru="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(u){return typeof u}:function(u){return u&&"function"==typeof Symbol&&u.constructor===Symbol&&u!==Symbol.prototype?"symbol":typeof u},ru(u)}var iu={defaultProtocol:"http",events:null,format:ou,formatHref:ou,nl2br:!1,tagName:"a",target:null,rel:null,validate:!0,truncate:0,className:null,attributes:null,ignoreTags:[]};function nu(u){u=u||{},this.defaultProtocol="defaultProtocol"in u?u.defaultProtocol:iu.defaultProtocol,this.events="events"in u?u.events:iu.events,this.format="format"in u?u.format:iu.format,this.formatHref="formatHref"in u?u.formatHref:iu.formatHref,this.nl2br="nl2br"in u?u.nl2br:iu.nl2br,this.tagName="tagName"in u?u.tagName:iu.tagName,this.target="target"in u?u.target:iu.target,this.rel="rel"in u?u.rel:iu.rel,this.validate="validate"in u?u.validate:iu.validate,this.truncate="truncate"in u?u.truncate:iu.truncate,this.className="className"in u?u.className:iu.className,this.attributes=u.attributes||iu.attributes,this.ignoreTags=[];for(var D=("ignoreTags"in u?u.ignoreTags:iu.ignoreTags),e=0;e<D.length;e++)this.ignoreTags.push(D[e].toUpperCase())}function ou(u){return u}nu.prototype={resolve:function(u){var D=u.toHref(this.defaultProtocol);return{formatted:this.get("format",u.toString(),u),formattedHref:this.get("formatHref",D,u),tagName:this.get("tagName",D,u),className:this.get("className",D,u),target:this.get("target",D,u),rel:this.get("rel",D,u),events:this.getObject("events",D,u),attributes:this.getObject("attributes",D,u),truncate:this.get("truncate",D,u)}},check:function(u){return this.get("validate",u.toString(),u)},get:function(u,D,e){var t,a=this[u];if(!a)return a;switch(ru(a)){case"function":return a(D,e.t);case"object":return"function"==typeof(t=e.t in a?a[e.t]:iu[u])?t(D,e.t):t}return a},getObject:function(u,D,e){var t=this[u];return"function"==typeof t?t(D,e.t):t}};var su=Object.freeze({__proto__:null,defaults:iu,Options:nu});function lu(){}function cu(u,D){function e(D,e){this.t=u,this.v=D,this.tk=e}return function(u,D){var e=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},t=Object.create(u.prototype);for(var a in e)t[a]=e[a];t.constructor=D,D.prototype=t}(lu,e,D),e}lu.prototype={t:"token",isLink:!1,toString:function(){return this.v},toHref:function(){return this.toString()},startIndex:function(){return this.tk[0].s},endIndex:function(){return this.tk[this.tk.length-1].e},toObject:function(){var u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:iu.defaultProtocol;return{type:this.t,value:this.v,isLink:this.isLink,href:this.toHref(u),start:this.startIndex(),end:this.endIndex()}}};var Fu=cu("email",{isLink:!0}),Eu=cu("email",{isLink:!0,toHref:function(){return"mailto:"+this.toString()}}),Au=cu("text"),Cu=cu("nl"),gu=cu("url",{isLink:!0,toHref:function(){for(var u=arguments.length>0&&void 0!==arguments[0]?arguments[0]:iu.defaultProtocol,D=this.tk,e=!1,t=!1,a=[],r=0;D[r].t===A;)e=!0,a.push(D[r].v),r++;for(;D[r].t===G;)t=!0,a.push(D[r].v),r++;for(;r<D.length;r++)a.push(D[r].v);return a=a.join(""),e||t||(a="".concat(u,"://").concat(a)),a},hasProtocol:function(){return this.tk[0].t===A}}),hu=Object.freeze({__proto__:null,MultiToken:lu,Base:lu,createTokenClass:cu,MailtoEmail:Fu,Email:Eu,Text:Au,Nl:Cu,Url:gu});function fu(){var u=e(),D=e(),r=e(),i=e(),o=e(),s=e(),g=e(),$=t(gu),J=e(),V=t(gu),uu=t(gu),Du=e(),eu=e(),tu=e(),au=e(),ru=e(),iu=t(gu),nu=t(gu),ou=t(gu),su=t(gu),lu=e(),cu=e(),Au=e(),hu=e(),fu=e(),mu=e(),du=t(Eu),pu=e(),Bu=t(Eu),bu=t(Fu),vu=e(),yu=e(),ku=e(),wu=e(),ju=t(Cu);a(u,h,ju),a(u,A,D),a(u,C,r),a(D,G,i),a(i,G,o),a(u,F,s),a(u,l,s),a(u,c,$),a(u,E,s),a(o,F,uu),a(o,l,uu),a(o,E,uu),a(o,c,uu),a(s,T,g),a(fu,T,mu),a(g,F,$),a(g,l,s),a(g,E,s),a(g,c,s),a(mu,F,du),a(mu,l,fu),a(mu,E,fu),a(mu,c,fu),a($,T,g),a(du,T,mu),a($,N,J),a($,G,uu),a(J,E,V),a(V,G,uu),a(du,N,pu),a(pu,E,Bu);var xu=[k,j,x,O,z,L,S,l,R,M,c,E,I,K,U,q,A,G,Z,W,F,X],Ou=[w,v,B,b,y,N,P,T,H,d,f,m,p,_,Q,Y];a(uu,f,eu),a(uu,m,tu),a(uu,d,au),a(uu,p,ru),a(Du,f,eu),a(Du,m,tu),a(Du,d,au),a(Du,p,ru),a(eu,B,uu),a(tu,b,uu),a(au,v,uu),a(ru,y,uu),a(iu,B,uu),a(nu,b,uu),a(ou,v,uu),a(su,y,uu),a(lu,B,uu),a(cu,b,uu),a(Au,v,uu),a(hu,y,uu),n(eu,xu,iu),n(tu,xu,nu),n(au,xu,ou),n(ru,xu,su),n(eu,Ou,lu),n(tu,Ou,cu),n(au,Ou,Au),n(ru,Ou,hu),n(iu,xu,iu),n(nu,xu,nu),n(ou,xu,ou),n(su,xu,su),n(iu,Ou,iu),n(nu,Ou,nu),n(ou,Ou,ou),n(su,Ou,su),n(lu,xu,iu),n(cu,xu,nu),n(Au,xu,ou),n(hu,xu,su),n(lu,Ou,lu),n(cu,Ou,cu),n(Au,Ou,Au),n(hu,Ou,hu),n(uu,xu,uu),n(Du,xu,uu),n(uu,Ou,Du),n(Du,Ou,Du),a(r,F,bu),a(r,l,bu),a(r,E,bu),a(r,c,bu),n(bu,xu,bu),n(bu,Ou,vu),n(vu,xu,bu),n(vu,Ou,vu);var zu=[k,w,j,O,z,L,B,S,l,R,M,E,f,I,K,U,q,_,G,Z,W,F,X];return n(s,zu,yu),a(s,x,ku),n($,zu,yu),a($,x,ku),n(g,zu,yu),n(yu,zu,yu),a(yu,x,ku),a(yu,T,wu),n(wu,zu,yu),a(ku,F,fu),a(ku,l,fu),a(ku,E,fu),a(ku,c,du),u}function mu(u,D,e){var t=e[0].s,a=e[e.length-1].e;return new u(D.substr(t,a-t),e)}var du="undefined"!=typeof console&&console&&console.warn||function(){},pu={scanner:null,parser:null,pluginQueue:[],customProtocols:[],initialized:!1};function Bu(){pu.scanner={start:au(pu.customProtocols),tokens:$},pu.parser={start:fu(),tokens:hu};for(var u={createTokenClass:cu},D=0;D<pu.pluginQueue.length;D++)pu.pluginQueue[D][1]({scanner:pu.scanner,parser:pu.parser,utils:u});pu.initialized=!0}function bu(u){return pu.initialized||Bu(),function(u,D,e){for(var t=e.length,a=0,r=[],n=[];a<t;){for(var o=u,s=null,l=null,c=0,F=null,E=-1;a<t&&!(s=i(o,e[a].t));)n.push(e[a++]);for(;a<t&&(l=s||i(o,e[a].t));)s=null,(o=l).accepts()?(E=0,F=o):E>=0&&E++,a++,c++;if(E<0)for(var A=a-c;A<a;A++)n.push(e[A]);else{n.length>0&&(r.push(mu(Au,D,n)),n=[]),a-=E,c-=E;var C=F.t,g=e.slice(a-c,a);r.push(mu(C,D,g))}}return n.length>0&&r.push(mu(Au,D,n)),r}(pu.parser.start,u,function(u,D){for(var e=function(u){for(var D=[],e=u.length,t=0;t<e;){var a=u.charCodeAt(t),r=void 0,i=a<55296||a>56319||t+1===e||(r=u.charCodeAt(t+1))<56320||r>57343?u[t]:u.slice(t,t+2);D.push(i),t+=i.length}return D}(D.replace(/[A-Z]/g,(function(u){return u.toLowerCase()}))),t=e.length,a=[],r=0,n=0;n<t;){for(var o=u,s=null,l=0,c=null,F=-1,E=-1;n<t&&(s=i(o,e[n]));)(o=s).accepts()?(F=0,E=0,c=o):F>=0&&(F+=e[n].length,E++),l+=e[n].length,r+=e[n].length,n++;r-=F,n-=E,l-=F,a.push({t:c.t,v:D.substr(r-l,l),s:r-l,e:r})}return a}(pu.scanner.start,u))}return u.Options=nu,u.find=function(u){for(var D=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,e=bu(u),t=[],a=0;a<e.length;a++){var r=e[a];!r.isLink||D&&r.t!==D||t.push(r.toObject())}return t},u.init=Bu,u.options=su,u.registerCustomProtocol=function(u){if(pu.initialized&&du('linkifyjs: already initialized - will not register custom protocol "'.concat(u,'" until you manually call linkify.init(). To avoid this warning, please register all custom protocols before invoking linkify the first time.')),!/^[a-z-]+$/.test(u))throw Error("linkifyjs: protocols containing characters other than a-z or - (hyphen) are not supported");pu.customProtocols.push(u)},u.registerPlugin=function(u,D){for(var e=0;e<pu.pluginQueue.length;e++)if(u===pu.pluginQueue[e][0])return du('linkifyjs: plugin "'.concat(u,'" already registered - will be overwritten')),void(pu.pluginQueue[e]=[u,D]);pu.pluginQueue.push([u,D]),pu.initialized&&du('linkifyjs: already initialized - will not register plugin "'.concat(u,'" until you manually call linkify.init(). To avoid this warning, please register all plugins before invoking linkify the first time.'))},u.reset=function(){pu.scanner=null,pu.parser=null,pu.pluginQueue=[],pu.customProtocols=[],pu.initialized=!1},u.test=function(u){var D=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,e=bu(u);return 1===e.length&&e[0].isLink&&(!D||e[0].t===D)},u.tokenize=bu,Object.defineProperty(u,"__esModule",{value:!0}),u}({});
sf_sdk.linkifyHtml = function(t){"use strict";function e(t){if(t&&t.__esModule)return t;var e=Object.create(null);return t&&Object.keys(t).forEach((function(i){if("default"!==i){var n=Object.getOwnPropertyDescriptor(t,i);Object.defineProperty(e,i,n.get?n:{enumerable:!0,get:function(){return t[i]}})}})),e.default=t,Object.freeze(e)}var i=e(t),n={nbsp:" "},s=/^#[xX]([A-Fa-f0-9]+)$/,o=/^#([0-9]+)$/,a=/^([A-Za-z0-9]+)$/,r=function(){function t(t){this.named=t}return t.prototype.parse=function(t){if(t){var e=t.match(s);return e?"&#x"+e[1]+";":(e=t.match(o))?"&#"+e[1]+";":(e=t.match(a))?this.named[e[1]]||"&"+e[1]+";":void 0}},t}(),h=/[\t\n\f ]/,u=/[A-Za-z]/,c=/\r\n?/g;function p(t){return h.test(t)}function d(t){return u.test(t)}var f=function(){function t(t,e,i){void 0===i&&(i="precompile"),this.delegate=t,this.entityParser=e,this.mode=i,this.state="beforeData",this.line=-1,this.column=-1,this.input="",this.index=-1,this.tagNameBuffer="",this.states={beforeData:function(){var t=this.peek();if("<"!==t||this.isIgnoredEndTag()){if("precompile"===this.mode&&"\n"===t){var e=this.tagNameBuffer.toLowerCase();"pre"!==e&&"textarea"!==e||this.consume()}this.transitionTo("data"),this.delegate.beginData()}else this.transitionTo("tagOpen"),this.markTagStart(),this.consume()},data:function(){var t=this.peek(),e=this.tagNameBuffer;"<"!==t||this.isIgnoredEndTag()?"&"===t&&"script"!==e&&"style"!==e?(this.consume(),this.delegate.appendToData(this.consumeCharRef()||"&")):(this.consume(),this.delegate.appendToData(t)):(this.delegate.finishData(),this.transitionTo("tagOpen"),this.markTagStart(),this.consume())},tagOpen:function(){var t=this.consume();"!"===t?this.transitionTo("markupDeclarationOpen"):"/"===t?this.transitionTo("endTagOpen"):("@"===t||":"===t||d(t))&&(this.transitionTo("tagName"),this.tagNameBuffer="",this.delegate.beginStartTag(),this.appendToTagName(t))},markupDeclarationOpen:function(){var t=this.consume();"-"===t&&"-"===this.peek()?(this.consume(),this.transitionTo("commentStart"),this.delegate.beginComment()):"DOCTYPE"===t.toUpperCase()+this.input.substring(this.index,this.index+6).toUpperCase()&&(this.consume(),this.consume(),this.consume(),this.consume(),this.consume(),this.consume(),this.transitionTo("doctype"),this.delegate.beginDoctype&&this.delegate.beginDoctype())},doctype:function(){p(this.consume())&&this.transitionTo("beforeDoctypeName")},beforeDoctypeName:function(){var t=this.consume();p(t)||(this.transitionTo("doctypeName"),this.delegate.appendToDoctypeName&&this.delegate.appendToDoctypeName(t.toLowerCase()))},doctypeName:function(){var t=this.consume();p(t)?this.transitionTo("afterDoctypeName"):">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):this.delegate.appendToDoctypeName&&this.delegate.appendToDoctypeName(t.toLowerCase())},afterDoctypeName:function(){var t=this.consume();if(!p(t))if(">"===t)this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData");else{var e=t.toUpperCase()+this.input.substring(this.index,this.index+5).toUpperCase(),i="PUBLIC"===e.toUpperCase(),n="SYSTEM"===e.toUpperCase();(i||n)&&(this.consume(),this.consume(),this.consume(),this.consume(),this.consume(),this.consume()),i?this.transitionTo("afterDoctypePublicKeyword"):n&&this.transitionTo("afterDoctypeSystemKeyword")}},afterDoctypePublicKeyword:function(){var t=this.peek();p(t)?(this.transitionTo("beforeDoctypePublicIdentifier"),this.consume()):'"'===t?(this.transitionTo("doctypePublicIdentifierDoubleQuoted"),this.consume()):"'"===t?(this.transitionTo("doctypePublicIdentifierSingleQuoted"),this.consume()):">"===t&&(this.consume(),this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData"))},doctypePublicIdentifierDoubleQuoted:function(){var t=this.consume();'"'===t?this.transitionTo("afterDoctypePublicIdentifier"):">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):this.delegate.appendToDoctypePublicIdentifier&&this.delegate.appendToDoctypePublicIdentifier(t)},doctypePublicIdentifierSingleQuoted:function(){var t=this.consume();"'"===t?this.transitionTo("afterDoctypePublicIdentifier"):">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):this.delegate.appendToDoctypePublicIdentifier&&this.delegate.appendToDoctypePublicIdentifier(t)},afterDoctypePublicIdentifier:function(){var t=this.consume();p(t)?this.transitionTo("betweenDoctypePublicAndSystemIdentifiers"):">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):'"'===t?this.transitionTo("doctypeSystemIdentifierDoubleQuoted"):"'"===t&&this.transitionTo("doctypeSystemIdentifierSingleQuoted")},betweenDoctypePublicAndSystemIdentifiers:function(){var t=this.consume();p(t)||(">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):'"'===t?this.transitionTo("doctypeSystemIdentifierDoubleQuoted"):"'"===t&&this.transitionTo("doctypeSystemIdentifierSingleQuoted"))},doctypeSystemIdentifierDoubleQuoted:function(){var t=this.consume();'"'===t?this.transitionTo("afterDoctypeSystemIdentifier"):">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):this.delegate.appendToDoctypeSystemIdentifier&&this.delegate.appendToDoctypeSystemIdentifier(t)},doctypeSystemIdentifierSingleQuoted:function(){var t=this.consume();"'"===t?this.transitionTo("afterDoctypeSystemIdentifier"):">"===t?(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData")):this.delegate.appendToDoctypeSystemIdentifier&&this.delegate.appendToDoctypeSystemIdentifier(t)},afterDoctypeSystemIdentifier:function(){var t=this.consume();p(t)||">"===t&&(this.delegate.endDoctype&&this.delegate.endDoctype(),this.transitionTo("beforeData"))},commentStart:function(){var t=this.consume();"-"===t?this.transitionTo("commentStartDash"):">"===t?(this.delegate.finishComment(),this.transitionTo("beforeData")):(this.delegate.appendToCommentData(t),this.transitionTo("comment"))},commentStartDash:function(){var t=this.consume();"-"===t?this.transitionTo("commentEnd"):">"===t?(this.delegate.finishComment(),this.transitionTo("beforeData")):(this.delegate.appendToCommentData("-"),this.transitionTo("comment"))},comment:function(){var t=this.consume();"-"===t?this.transitionTo("commentEndDash"):this.delegate.appendToCommentData(t)},commentEndDash:function(){var t=this.consume();"-"===t?this.transitionTo("commentEnd"):(this.delegate.appendToCommentData("-"+t),this.transitionTo("comment"))},commentEnd:function(){var t=this.consume();">"===t?(this.delegate.finishComment(),this.transitionTo("beforeData")):(this.delegate.appendToCommentData("--"+t),this.transitionTo("comment"))},tagName:function(){var t=this.consume();p(t)?this.transitionTo("beforeAttributeName"):"/"===t?this.transitionTo("selfClosingStartTag"):">"===t?(this.delegate.finishTag(),this.transitionTo("beforeData")):this.appendToTagName(t)},endTagName:function(){var t=this.consume();p(t)?(this.transitionTo("beforeAttributeName"),this.tagNameBuffer=""):"/"===t?(this.transitionTo("selfClosingStartTag"),this.tagNameBuffer=""):">"===t?(this.delegate.finishTag(),this.transitionTo("beforeData"),this.tagNameBuffer=""):this.appendToTagName(t)},beforeAttributeName:function(){var t=this.peek();p(t)?this.consume():"/"===t?(this.transitionTo("selfClosingStartTag"),this.consume()):">"===t?(this.consume(),this.delegate.finishTag(),this.transitionTo("beforeData")):"="===t?(this.delegate.reportSyntaxError("attribute name cannot start with equals sign"),this.transitionTo("attributeName"),this.delegate.beginAttribute(),this.consume(),this.delegate.appendToAttributeName(t)):(this.transitionTo("attributeName"),this.delegate.beginAttribute())},attributeName:function(){var t=this.peek();p(t)?(this.transitionTo("afterAttributeName"),this.consume()):"/"===t?(this.delegate.beginAttributeValue(!1),this.delegate.finishAttributeValue(),this.consume(),this.transitionTo("selfClosingStartTag")):"="===t?(this.transitionTo("beforeAttributeValue"),this.consume()):">"===t?(this.delegate.beginAttributeValue(!1),this.delegate.finishAttributeValue(),this.consume(),this.delegate.finishTag(),this.transitionTo("beforeData")):'"'===t||"'"===t||"<"===t?(this.delegate.reportSyntaxError(t+" is not a valid character within attribute names"),this.consume(),this.delegate.appendToAttributeName(t)):(this.consume(),this.delegate.appendToAttributeName(t))},afterAttributeName:function(){var t=this.peek();p(t)?this.consume():"/"===t?(this.delegate.beginAttributeValue(!1),this.delegate.finishAttributeValue(),this.consume(),this.transitionTo("selfClosingStartTag")):"="===t?(this.consume(),this.transitionTo("beforeAttributeValue")):">"===t?(this.delegate.beginAttributeValue(!1),this.delegate.finishAttributeValue(),this.consume(),this.delegate.finishTag(),this.transitionTo("beforeData")):(this.delegate.beginAttributeValue(!1),this.delegate.finishAttributeValue(),this.transitionTo("attributeName"),this.delegate.beginAttribute(),this.consume(),this.delegate.appendToAttributeName(t))},beforeAttributeValue:function(){var t=this.peek();p(t)?this.consume():'"'===t?(this.transitionTo("attributeValueDoubleQuoted"),this.delegate.beginAttributeValue(!0),this.consume()):"'"===t?(this.transitionTo("attributeValueSingleQuoted"),this.delegate.beginAttributeValue(!0),this.consume()):">"===t?(this.delegate.beginAttributeValue(!1),this.delegate.finishAttributeValue(),this.consume(),this.delegate.finishTag(),this.transitionTo("beforeData")):(this.transitionTo("attributeValueUnquoted"),this.delegate.beginAttributeValue(!1),this.consume(),this.delegate.appendToAttributeValue(t))},attributeValueDoubleQuoted:function(){var t=this.consume();'"'===t?(this.delegate.finishAttributeValue(),this.transitionTo("afterAttributeValueQuoted")):"&"===t?this.delegate.appendToAttributeValue(this.consumeCharRef()||"&"):this.delegate.appendToAttributeValue(t)},attributeValueSingleQuoted:function(){var t=this.consume();"'"===t?(this.delegate.finishAttributeValue(),this.transitionTo("afterAttributeValueQuoted")):"&"===t?this.delegate.appendToAttributeValue(this.consumeCharRef()||"&"):this.delegate.appendToAttributeValue(t)},attributeValueUnquoted:function(){var t=this.peek();p(t)?(this.delegate.finishAttributeValue(),this.consume(),this.transitionTo("beforeAttributeName")):"/"===t?(this.delegate.finishAttributeValue(),this.consume(),this.transitionTo("selfClosingStartTag")):"&"===t?(this.consume(),this.delegate.appendToAttributeValue(this.consumeCharRef()||"&")):">"===t?(this.delegate.finishAttributeValue(),this.consume(),this.delegate.finishTag(),this.transitionTo("beforeData")):(this.consume(),this.delegate.appendToAttributeValue(t))},afterAttributeValueQuoted:function(){var t=this.peek();p(t)?(this.consume(),this.transitionTo("beforeAttributeName")):"/"===t?(this.consume(),this.transitionTo("selfClosingStartTag")):">"===t?(this.consume(),this.delegate.finishTag(),this.transitionTo("beforeData")):this.transitionTo("beforeAttributeName")},selfClosingStartTag:function(){">"===this.peek()?(this.consume(),this.delegate.markTagAsSelfClosing(),this.delegate.finishTag(),this.transitionTo("beforeData")):this.transitionTo("beforeAttributeName")},endTagOpen:function(){var t=this.consume();("@"===t||":"===t||d(t))&&(this.transitionTo("endTagName"),this.tagNameBuffer="",this.delegate.beginEndTag(),this.appendToTagName(t))}},this.reset()}return t.prototype.reset=function(){this.transitionTo("beforeData"),this.input="",this.tagNameBuffer="",this.index=0,this.line=1,this.column=0,this.delegate.reset()},t.prototype.transitionTo=function(t){this.state=t},t.prototype.tokenize=function(t){this.reset(),this.tokenizePart(t),this.tokenizeEOF()},t.prototype.tokenizePart=function(t){for(this.input+=function(t){return t.replace(c,"\n")}(t);this.index<this.input.length;){var e=this.states[this.state];if(void 0===e)throw new Error("unhandled state "+this.state);e.call(this)}},t.prototype.tokenizeEOF=function(){this.flushData()},t.prototype.flushData=function(){"data"===this.state&&(this.delegate.finishData(),this.transitionTo("beforeData"))},t.prototype.peek=function(){return this.input.charAt(this.index)},t.prototype.consume=function(){var t=this.peek();return this.index++,"\n"===t?(this.line++,this.column=0):this.column++,t},t.prototype.consumeCharRef=function(){var t=this.input.indexOf(";",this.index);if(-1!==t){var e=this.input.slice(this.index,t),i=this.entityParser.parse(e);if(i){for(var n=e.length;n;)this.consume(),n--;return this.consume(),i}}},t.prototype.markTagStart=function(){this.delegate.tagOpen()},t.prototype.appendToTagName=function(t){this.tagNameBuffer+=t,this.delegate.appendToTagName(t)},t.prototype.isIgnoredEndTag=function(){var t=this.tagNameBuffer;return"title"===t&&"</title>"!==this.input.substring(this.index,this.index+8)||"style"===t&&"</style>"!==this.input.substring(this.index,this.index+8)||"script"===t&&"<\/script>"!==this.input.substring(this.index,this.index+9)},t}(),l=function(){function t(t,e){void 0===e&&(e={}),this.options=e,this.token=null,this.startLine=1,this.startColumn=0,this.tokens=[],this.tokenizer=new f(this,t,e.mode),this._currentAttribute=void 0}return t.prototype.tokenize=function(t){return this.tokens=[],this.tokenizer.tokenize(t),this.tokens},t.prototype.tokenizePart=function(t){return this.tokens=[],this.tokenizer.tokenizePart(t),this.tokens},t.prototype.tokenizeEOF=function(){return this.tokens=[],this.tokenizer.tokenizeEOF(),this.tokens[0]},t.prototype.reset=function(){this.token=null,this.startLine=1,this.startColumn=0},t.prototype.current=function(){var t=this.token;if(null===t)throw new Error("token was unexpectedly null");if(0===arguments.length)return t;for(var e=0;e<arguments.length;e++)if(t.type===arguments[e])return t;throw new Error("token type was unexpectedly "+t.type)},t.prototype.push=function(t){this.token=t,this.tokens.push(t)},t.prototype.currentAttribute=function(){return this._currentAttribute},t.prototype.addLocInfo=function(){this.options.loc&&(this.current().loc={start:{line:this.startLine,column:this.startColumn},end:{line:this.tokenizer.line,column:this.tokenizer.column}}),this.startLine=this.tokenizer.line,this.startColumn=this.tokenizer.column},t.prototype.beginDoctype=function(){this.push({type:"Doctype",name:""})},t.prototype.appendToDoctypeName=function(t){this.current("Doctype").name+=t},t.prototype.appendToDoctypePublicIdentifier=function(t){var e=this.current("Doctype");void 0===e.publicIdentifier?e.publicIdentifier=t:e.publicIdentifier+=t},t.prototype.appendToDoctypeSystemIdentifier=function(t){var e=this.current("Doctype");void 0===e.systemIdentifier?e.systemIdentifier=t:e.systemIdentifier+=t},t.prototype.endDoctype=function(){this.addLocInfo()},t.prototype.beginData=function(){this.push({type:"Chars",chars:""})},t.prototype.appendToData=function(t){this.current("Chars").chars+=t},t.prototype.finishData=function(){this.addLocInfo()},t.prototype.beginComment=function(){this.push({type:"Comment",chars:""})},t.prototype.appendToCommentData=function(t){this.current("Comment").chars+=t},t.prototype.finishComment=function(){this.addLocInfo()},t.prototype.tagOpen=function(){},t.prototype.beginStartTag=function(){this.push({type:"StartTag",tagName:"",attributes:[],selfClosing:!1})},t.prototype.beginEndTag=function(){this.push({type:"EndTag",tagName:""})},t.prototype.finishTag=function(){this.addLocInfo()},t.prototype.markTagAsSelfClosing=function(){this.current("StartTag").selfClosing=!0},t.prototype.appendToTagName=function(t){this.current("StartTag","EndTag").tagName+=t},t.prototype.beginAttribute=function(){this._currentAttribute=["","",!1]},t.prototype.appendToAttributeName=function(t){this.currentAttribute()[0]+=t},t.prototype.beginAttributeValue=function(t){this.currentAttribute()[2]=t},t.prototype.appendToAttributeValue=function(t){this.currentAttribute()[1]+=t},t.prototype.finishAttributeValue=function(){this.current("StartTag").attributes.push(this._currentAttribute)},t.prototype.reportSyntaxError=function(t){this.current().syntaxError=t},t}();function m(t,e){return new l(new r(n),e).tokenize(t)}var g=i.Options,b="StartTag",T="EndTag",y="Chars",D="Comment",v="Doctype";function A(t,e){for(var n=i.tokenize(t),s=[],o=0;o<n.length;o++){var a=n[o];if("nl"===a.t&&e.nl2br)s.push({type:b,tagName:"br",attributes:[],selfClosing:!0});else if(a.isLink&&e.check(a)){var r=e.resolve(a),h=r.formatted,u=r.formattedHref,c=r.tagName,p=r.className,d=r.target,f=r.rel,l=r.attributes,m=r.truncate,g=[["href",u]];for(var D in p&&g.push(["class",p]),d&&g.push(["target",d]),f&&g.push(["rel",f]),m&&h.length>m&&(h=h.substring(0,m)+"…"),l)g.push([D,l[D]]);s.push({type:b,tagName:c,attributes:g,selfClosing:!1}),s.push({type:y,chars:h}),s.push({type:T,tagName:c})}else s.push({type:y,chars:a.toString()})}return s}function k(t,e,i,n){for(var s=1;i<e.length&&s>0;){var o=e[i];o.type===b&&o.tagName.toUpperCase()===t?s++:o.type===T&&o.tagName.toUpperCase()===t&&s--,n.push(o),i++}return n}function N(t){for(var e=[],i=0;i<t.length;i++){var n=t[i][0],s=t[i][1];e.push("".concat(n,'="').concat(s.replace(/"/g,"&quot;"),'"'))}return e}return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},i=m(t),n=[],s=[];e=new g(e);for(var o=0;o<i.length;o++){var a=i[o];if(a.type!==b)if(a.type===y){var r=A(a.chars,e);n.push.apply(n,r)}else n.push(a);else{n.push(a);var h=a.tagName.toUpperCase(),u="A"===h||e.ignoreTags.indexOf(h)>=0;if(!u)continue;var c=n.length;k(h,i,++o,n),o+=n.length-c-1}}for(var p=0;p<n.length;p++){var d=n[p];switch(d.type){case b:var f="<"+d.tagName;if(d.attributes.length>0){var l=N(d.attributes);f+=" "+l.join(" ")}f+=">",s.push(f);break;case T:s.push("</".concat(d.tagName,">"));break;case y:s.push(d.chars);break;case D:s.push("\x3c!--".concat(d.chars,"--\x3e"));break;case v:var C="<!DOCTYPE ".concat(d.name);d.publicIdentifier&&(C+=' PUBLIC "'.concat(d.publicIdentifier,'"')),d.systemIdentifier&&(C+=' "'.concat(d.systemIdentifier,'"')),C+=">",s.push(C)}}return s.join("")}}(sf_sdk.linkify);
