
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.sf_bowser=t():e.sf_bowser=t()}(this,(function(){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=90)}({17:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=r(18),i=function(){function e(){}return e.getFirstMatch=function(e,t){var r=t.match(e);return r&&r.length>0&&r[1]||""},e.getSecondMatch=function(e,t){var r=t.match(e);return r&&r.length>1&&r[2]||""},e.matchAndReturnConst=function(e,t,r){if(e.test(t))return r},e.getWindowsVersionName=function(e){switch(e){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}},e.getMacOSVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),10===t[0])switch(t[1]){case 5:return"Leopard";case 6:return"Snow Leopard";case 7:return"Lion";case 8:return"Mountain Lion";case 9:return"Mavericks";case 10:return"Yosemite";case 11:return"El Capitan";case 12:return"Sierra";case 13:return"High Sierra";case 14:return"Mojave";case 15:return"Catalina";default:return}},e.getAndroidVersionName=function(e){var t=e.split(".").splice(0,2).map((function(e){return parseInt(e,10)||0}));if(t.push(0),!(1===t[0]&&t[1]<5))return 1===t[0]&&t[1]<6?"Cupcake":1===t[0]&&t[1]>=6?"Donut":2===t[0]&&t[1]<2?"Eclair":2===t[0]&&2===t[1]?"Froyo":2===t[0]&&t[1]>2?"Gingerbread":3===t[0]?"Honeycomb":4===t[0]&&t[1]<1?"Ice Cream Sandwich":4===t[0]&&t[1]<4?"Jelly Bean":4===t[0]&&t[1]>=4?"KitKat":5===t[0]?"Lollipop":6===t[0]?"Marshmallow":7===t[0]?"Nougat":8===t[0]?"Oreo":9===t[0]?"Pie":void 0},e.getVersionPrecision=function(e){return e.split(".").length},e.compareVersions=function(t,r,n){void 0===n&&(n=!1);var i=e.getVersionPrecision(t),s=e.getVersionPrecision(r),o=Math.max(i,s),a=0,u=e.map([t,r],(function(t){var r=o-e.getVersionPrecision(t),n=t+new Array(r+1).join(".0");return e.map(n.split("."),(function(e){return new Array(20-e.length).join("0")+e})).reverse()}));for(n&&(a=o-Math.min(i,s)),o-=1;o>=a;){if(u[0][o]>u[1][o])return 1;if(u[0][o]===u[1][o]){if(o===a)return 0;o-=1}else if(u[0][o]<u[1][o])return-1}},e.map=function(e,t){var r,n=[];if(Array.prototype.map)return Array.prototype.map.call(e,t);for(r=0;r<e.length;r+=1)n.push(t(e[r]));return n},e.find=function(e,t){var r,n;if(Array.prototype.find)return Array.prototype.find.call(e,t);for(r=0,n=e.length;r<n;r+=1){var i=e[r];if(t(i,r))return i}},e.assign=function(e){for(var t,r,n=e,i=arguments.length,s=new Array(i>1?i-1:0),o=1;o<i;o++)s[o-1]=arguments[o];if(Object.assign)return Object.assign.apply(Object,[e].concat(s));var a=function(){var e=s[t];"object"==typeof e&&null!==e&&Object.keys(e).forEach((function(t){n[t]=e[t]}))};for(t=0,r=s.length;t<r;t+=1)a();return e},e.getBrowserAlias=function(e){return n.BROWSER_ALIASES_MAP[e]},e.getBrowserTypeByAlias=function(e){return n.BROWSER_MAP[e]||""},e}();t.default=i,e.exports=t.default},18:function(e,t,r){"use strict";t.__esModule=!0,t.ENGINE_MAP=t.OS_MAP=t.PLATFORMS_MAP=t.BROWSER_MAP=t.BROWSER_ALIASES_MAP=void 0;t.BROWSER_ALIASES_MAP={"Amazon Silk":"amazon_silk","Android Browser":"android",Bada:"bada",BlackBerry:"blackberry",Chrome:"chrome",Chromium:"chromium",Electron:"electron",Epiphany:"epiphany",Firefox:"firefox",Focus:"focus",Generic:"generic","Google Search":"google_search",Googlebot:"googlebot","Internet Explorer":"ie","K-Meleon":"k_meleon",Maxthon:"maxthon","Microsoft Edge":"edge","MZ Browser":"mz","NAVER Whale Browser":"naver",Opera:"opera","Opera Coast":"opera_coast",PhantomJS:"phantomjs",Puffin:"puffin",QupZilla:"qupzilla",QQ:"qq",QQLite:"qqlite",Safari:"safari",Sailfish:"sailfish","Samsung Internet for Android":"samsung_internet",SeaMonkey:"seamonkey",Sleipnir:"sleipnir",Swing:"swing",Tizen:"tizen","UC Browser":"uc",Vivaldi:"vivaldi","WebOS Browser":"webos",WeChat:"wechat","Yandex Browser":"yandex",Roku:"roku"};t.BROWSER_MAP={amazon_silk:"Amazon Silk",android:"Android Browser",bada:"Bada",blackberry:"BlackBerry",chrome:"Chrome",chromium:"Chromium",electron:"Electron",epiphany:"Epiphany",firefox:"Firefox",focus:"Focus",generic:"Generic",googlebot:"Googlebot",google_search:"Google Search",ie:"Internet Explorer",k_meleon:"K-Meleon",maxthon:"Maxthon",edge:"Microsoft Edge",mz:"MZ Browser",naver:"NAVER Whale Browser",opera:"Opera",opera_coast:"Opera Coast",phantomjs:"PhantomJS",puffin:"Puffin",qupzilla:"QupZilla",qq:"QQ Browser",qqlite:"QQ Browser Lite",safari:"Safari",sailfish:"Sailfish",samsung_internet:"Samsung Internet for Android",seamonkey:"SeaMonkey",sleipnir:"Sleipnir",swing:"Swing",tizen:"Tizen",uc:"UC Browser",vivaldi:"Vivaldi",webos:"WebOS Browser",wechat:"WeChat",yandex:"Yandex Browser"};t.PLATFORMS_MAP={tablet:"tablet",mobile:"mobile",desktop:"desktop",tv:"tv"};t.OS_MAP={WindowsPhone:"Windows Phone",Windows:"Windows",MacOS:"macOS",iOS:"iOS",Android:"Android",WebOS:"WebOS",BlackBerry:"BlackBerry",Bada:"Bada",Tizen:"Tizen",Linux:"Linux",ChromeOS:"Chrome OS",PlayStation4:"PlayStation 4",Roku:"Roku"};t.ENGINE_MAP={EdgeHTML:"EdgeHTML",Blink:"Blink",Trident:"Trident",Presto:"Presto",Gecko:"Gecko",WebKit:"WebKit"}},90:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(91))&&n.__esModule?n:{default:n},s=r(18);function o(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=function(){function e(){}var t,r,n;return e.getParser=function(e,t){if(void 0===t&&(t=!1),"string"!=typeof e)throw new Error("UserAgent should be a string");return new i.default(e,t)},e.parse=function(e){return new i.default(e).getResult()},t=e,n=[{key:"BROWSER_MAP",get:function(){return s.BROWSER_MAP}},{key:"ENGINE_MAP",get:function(){return s.ENGINE_MAP}},{key:"OS_MAP",get:function(){return s.OS_MAP}},{key:"PLATFORMS_MAP",get:function(){return s.PLATFORMS_MAP}}],(r=null)&&o(t.prototype,r),n&&o(t,n),e}();t.default=a,e.exports=t.default},91:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n=u(r(92)),i=u(r(93)),s=u(r(94)),o=u(r(95)),a=u(r(17));function u(e){return e&&e.__esModule?e:{default:e}}var d=function(){function e(e,t){if(void 0===t&&(t=!1),null==e||""===e)throw new Error("UserAgent parameter can't be empty");this._ua=e,this.parsedResult={},!0!==t&&this.parse()}var t=e.prototype;return t.getUA=function(){return this._ua},t.test=function(e){return e.test(this._ua)},t.parseBrowser=function(){var e=this;this.parsedResult.browser={};var t=a.default.find(n.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser},t.getBrowser=function(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()},t.getBrowserName=function(e){return e?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""},t.getBrowserVersion=function(){return this.getBrowser().version},t.getOS=function(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()},t.parseOS=function(){var e=this;this.parsedResult.os={};var t=a.default.find(i.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os},t.getOSName=function(e){var t=this.getOS().name;return e?String(t).toLowerCase()||"":t||""},t.getOSVersion=function(){return this.getOS().version},t.getPlatform=function(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()},t.getPlatformType=function(e){void 0===e&&(e=!1);var t=this.getPlatform().type;return e?String(t).toLowerCase()||"":t||""},t.parsePlatform=function(){var e=this;this.parsedResult.platform={};var t=a.default.find(s.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform},t.getEngine=function(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()},t.getEngineName=function(e){return e?String(this.getEngine().name).toLowerCase()||"":this.getEngine().name||""},t.parseEngine=function(){var e=this;this.parsedResult.engine={};var t=a.default.find(o.default,(function(t){if("function"==typeof t.test)return t.test(e);if(t.test instanceof Array)return t.test.some((function(t){return e.test(t)}));throw new Error("Browser's test function is not valid")}));return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine},t.parse=function(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this},t.getResult=function(){return a.default.assign({},this.parsedResult)},t.satisfies=function(e){var t=this,r={},n=0,i={},s=0;if(Object.keys(e).forEach((function(t){var o=e[t];"string"==typeof o?(i[t]=o,s+=1):"object"==typeof o&&(r[t]=o,n+=1)})),n>0){var o=Object.keys(r),u=a.default.find(o,(function(e){return t.isOS(e)}));if(u){var d=this.satisfies(r[u]);if(void 0!==d)return d}var c=a.default.find(o,(function(e){return t.isPlatform(e)}));if(c){var f=this.satisfies(r[c]);if(void 0!==f)return f}}if(s>0){var l=Object.keys(i),h=a.default.find(l,(function(e){return t.isBrowser(e,!0)}));if(void 0!==h)return this.compareVersion(i[h])}},t.isBrowser=function(e,t){void 0===t&&(t=!1);var r=this.getBrowserName().toLowerCase(),n=e.toLowerCase(),i=a.default.getBrowserTypeByAlias(n);return t&&i&&(n=i.toLowerCase()),n===r},t.compareVersion=function(e){var t=[0],r=e,n=!1,i=this.getBrowserVersion();if("string"==typeof i)return">"===e[0]||"<"===e[0]?(r=e.substr(1),"="===e[1]?(n=!0,r=e.substr(2)):t=[],">"===e[0]?t.push(1):t.push(-1)):"="===e[0]?r=e.substr(1):"~"===e[0]&&(n=!0,r=e.substr(1)),t.indexOf(a.default.compareVersions(i,r,n))>-1},t.isOS=function(e){return this.getOSName(!0)===String(e).toLowerCase()},t.isPlatform=function(e){return this.getPlatformType(!0)===String(e).toLowerCase()},t.isEngine=function(e){return this.getEngineName(!0)===String(e).toLowerCase()},t.is=function(e){return this.isBrowser(e)||this.isOS(e)||this.isPlatform(e)},t.some=function(e){var t=this;return void 0===e&&(e=[]),e.some((function(e){return t.is(e)}))},e}();t.default=d,e.exports=t.default},92:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n};var s=/version\/(\d+(\.?_?\d+)+)/i,o=[{test:[/googlebot/i],describe:function(e){var t={name:"Googlebot"},r=i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/opera/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/opr\/|opios/i],describe:function(e){var t={name:"Opera"},r=i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/SamsungBrowser/i],describe:function(e){var t={name:"Samsung Internet for Android"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Whale/i],describe:function(e){var t={name:"NAVER Whale Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/MZBrowser/i],describe:function(e){var t={name:"MZ Browser"},r=i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/focus/i],describe:function(e){var t={name:"Focus"},r=i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/swing/i],describe:function(e){var t={name:"Swing"},r=i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/coast/i],describe:function(e){var t={name:"Opera Coast"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/yabrowser/i],describe:function(e){var t={name:"Yandex Browser"},r=i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/ucbrowser/i],describe:function(e){var t={name:"UC Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/Maxthon|mxios/i],describe:function(e){var t={name:"Maxthon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/epiphany/i],describe:function(e){var t={name:"Epiphany"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/puffin/i],describe:function(e){var t={name:"Puffin"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sleipnir/i],describe:function(e){var t={name:"Sleipnir"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/k-meleon/i],describe:function(e){var t={name:"K-Meleon"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/micromessenger/i],describe:function(e){var t={name:"WeChat"},r=i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qqbrowser/i],describe:function(e){var t={name:/qqbrowserlite/i.test(e)?"QQ Browser Lite":"QQ Browser"},r=i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/msie|trident/i],describe:function(e){var t={name:"Internet Explorer"},r=i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/\sedg\//i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/edg([ea]|ios)/i],describe:function(e){var t={name:"Microsoft Edge"},r=i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/vivaldi/i],describe:function(e){var t={name:"Vivaldi"},r=i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/seamonkey/i],describe:function(e){var t={name:"SeaMonkey"},r=i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/sailfish/i],describe:function(e){var t={name:"Sailfish"},r=i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i,e);return r&&(t.version=r),t}},{test:[/silk/i],describe:function(e){var t={name:"Amazon Silk"},r=i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/phantom/i],describe:function(e){var t={name:"PhantomJS"},r=i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/slimerjs/i],describe:function(e){var t={name:"SlimerJS"},r=i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t={name:"BlackBerry"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t={name:"WebOS Browser"},r=i.default.getFirstMatch(s,e)||i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/bada/i],describe:function(e){var t={name:"Bada"},r=i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/tizen/i],describe:function(e){var t={name:"Tizen"},r=i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/qupzilla/i],describe:function(e){var t={name:"QupZilla"},r=i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/firefox|iceweasel|fxios/i],describe:function(e){var t={name:"Firefox"},r=i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/electron/i],describe:function(e){var t={name:"Electron"},r=i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/chromium/i],describe:function(e){var t={name:"Chromium"},r=i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i,e)||i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/chrome|crios|crmo/i],describe:function(e){var t={name:"Chrome"},r=i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/GSA/i],describe:function(e){var t={name:"Google Search"},r=i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t={name:"Android Browser"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/playstation 4/i],describe:function(e){var t={name:"PlayStation 4"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/safari|applewebkit/i],describe:function(e){var t={name:"Safari"},r=i.default.getFirstMatch(s,e);return r&&(t.version=r),t}},{test:[/.*/i],describe:function(e){var t=-1!==e.search("\\(")?/^(.*)\/(.*)[ \t]\((.*)/:/^(.*)\/(.*) /;return{name:i.default.getFirstMatch(t,e),version:i.default.getSecondMatch(t,e)}}}];t.default=o,e.exports=t.default},93:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var o=[{test:[/Roku\/DVP/],describe:function(e){var t=i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i,e);return{name:s.OS_MAP.Roku,version:t}}},{test:[/windows phone/i],describe:function(e){var t=i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.WindowsPhone,version:t}}},{test:[/windows /i],describe:function(e){var t=i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i,e),r=i.default.getWindowsVersionName(t);return{name:s.OS_MAP.Windows,version:t,versionName:r}}},{test:[/Macintosh(.*?) FxiOS(.*?) Version\//],describe:function(e){var t=i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/,e);return{name:s.OS_MAP.iOS,version:t}}},{test:[/macintosh/i],describe:function(e){var t=i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i,e).replace(/[_\s]/g,"."),r=i.default.getMacOSVersionName(t),n={name:s.OS_MAP.MacOS,version:t};return r&&(n.versionName=r),n}},{test:[/(ipod|iphone|ipad)/i],describe:function(e){var t=i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i,e).replace(/[_\s]/g,".");return{name:s.OS_MAP.iOS,version:t}}},{test:function(e){var t=!e.test(/like android/i),r=e.test(/android/i);return t&&r},describe:function(e){var t=i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i,e),r=i.default.getAndroidVersionName(t),n={name:s.OS_MAP.Android,version:t};return r&&(n.versionName=r),n}},{test:[/(web|hpw)[o0]s/i],describe:function(e){var t=i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,e),r={name:s.OS_MAP.WebOS};return t&&t.length&&(r.version=t),r}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:function(e){var t=i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i,e)||i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i,e)||i.default.getFirstMatch(/\bbb(\d+)/i,e);return{name:s.OS_MAP.BlackBerry,version:t}}},{test:[/bada/i],describe:function(e){var t=i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Bada,version:t}}},{test:[/tizen/i],describe:function(e){var t=i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.Tizen,version:t}}},{test:[/linux/i],describe:function(){return{name:s.OS_MAP.Linux}}},{test:[/CrOS/],describe:function(){return{name:s.OS_MAP.ChromeOS}}},{test:[/PlayStation 4/],describe:function(e){var t=i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i,e);return{name:s.OS_MAP.PlayStation4,version:t}}}];t.default=o,e.exports=t.default},94:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var o=[{test:[/googlebot/i],describe:function(){return{type:"bot",vendor:"Google"}}},{test:[/huawei/i],describe:function(e){var t=i.default.getFirstMatch(/(can-l01)/i,e)&&"Nova",r={type:s.PLATFORMS_MAP.mobile,vendor:"Huawei"};return t&&(r.model=t),r}},{test:[/nexus\s*(?:7|8|9|10).*/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Nexus"}}},{test:[/ipad/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/Macintosh(.*?) FxiOS(.*?) Version\//],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Apple",model:"iPad"}}},{test:[/kftt build/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon",model:"Kindle Fire HD 7"}}},{test:[/silk/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet,vendor:"Amazon"}}},{test:[/tablet(?! pc)/i],describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){var t=e.test(/ipod|iphone/i),r=e.test(/like (ipod|iphone)/i);return t&&!r},describe:function(e){var t=i.default.getFirstMatch(/(ipod|iphone)/i,e);return{type:s.PLATFORMS_MAP.mobile,vendor:"Apple",model:t}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Nexus"}}},{test:[/[^-]mobi/i],describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"blackberry"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"BlackBerry"}}},{test:function(e){return"bada"===e.getBrowserName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"windows phone"===e.getBrowserName()},describe:function(){return{type:s.PLATFORMS_MAP.mobile,vendor:"Microsoft"}}},{test:function(e){var t=Number(String(e.getOSVersion()).split(".")[0]);return"android"===e.getOSName(!0)&&t>=3},describe:function(){return{type:s.PLATFORMS_MAP.tablet}}},{test:function(e){return"android"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.mobile}}},{test:function(e){return"macos"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop,vendor:"Apple"}}},{test:function(e){return"windows"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"linux"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.desktop}}},{test:function(e){return"playstation 4"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}},{test:function(e){return"roku"===e.getOSName(!0)},describe:function(){return{type:s.PLATFORMS_MAP.tv}}}];t.default=o,e.exports=t.default},95:function(e,t,r){"use strict";t.__esModule=!0,t.default=void 0;var n,i=(n=r(17))&&n.__esModule?n:{default:n},s=r(18);var o=[{test:function(e){return"microsoft edge"===e.getBrowserName(!0)},describe:function(e){if(/\sedg\//i.test(e))return{name:s.ENGINE_MAP.Blink};var t=i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i,e);return{name:s.ENGINE_MAP.EdgeHTML,version:t}}},{test:[/trident/i],describe:function(e){var t={name:s.ENGINE_MAP.Trident},r=i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){return e.test(/presto/i)},describe:function(e){var t={name:s.ENGINE_MAP.Presto},r=i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:function(e){var t=e.test(/gecko/i),r=e.test(/like gecko/i);return t&&!r},describe:function(e){var t={name:s.ENGINE_MAP.Gecko},r=i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}},{test:[/(apple)?webkit\/537\.36/i],describe:function(){return{name:s.ENGINE_MAP.Blink}}},{test:[/(apple)?webkit/i],describe:function(e){var t={name:s.ENGINE_MAP.WebKit},r=i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i,e);return r&&(t.version=r),t}}];t.default=o,e.exports=t.default}})}));


var sC = {
  options: {},
  sfRemoveElement: function(elem) {
    return elem.parentNode.removeChild(elem);
  },
  start: function (options) {
    var b = window.fpType;

    var s = document.querySelector(window.fpSelector);

    if (s) {
      var d = document.createElement("div");
      if (b === 'inlinebox') {
        d.classList.add('inline')
      } else if (b === 'inline') {
        d.classList.add('inline');
        d.classList.add('no-wrap')
      } else if (b === 'fullpage') {
        d.classList.add('fullpage');
        d.classList.add('inline');
        d.classList.add('no-wrap')
      }
      d.setAttribute('id', 'servicechat-inline');

      s.appendChild(d);

      if(b === 'fullpage'){
        // create wrapper container
        var wrapper = document.createElement('div');
        d.parentNode.insertBefore(wrapper, d);
        wrapper.appendChild(d);
      }
    }

    this.options = options;
    var sfId = this.options.sfId;
    var serviceChatId = document.querySelector(this.options.selector);
    var type = this.options.type;
    var dontStart = sC.sfChatGetCookie('sf-closed-forever');

    function loadingHelper() {
      sC.init();
    }

    if (dontStart !== '1' || window.location.href.indexOf("servicechat") != -1) {
      var dev = 0;
      if (window.location.href.indexOf("dev-servicehire") != -1 || window.location.href.indexOf("dev.netstory") != -1 || window.location.href.indexOf("test-servicehire") != -1) {
        dev = 1;
      }

      // Load from Google. If not in Google, save in Google.
      var json = '';
      var xhr = new XMLHttpRequest();
      var url = "https://apiv2.serviceform.com/logic-serviceform/load/" + fpId;
      if (!fpId) {
        if(window.location.href.indexOf("servicehidre") != -1) {
          loadScript2('homedepot.js', loadingHelper);
        } else {
          return;
        }
      }
      else {
        xhr.open("POST", url, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
        xhr.onreadystatechange = function () {
          if (xhr.readyState === 4 && xhr.status === 200) {
            if (JSON.parse(xhr.response) === 'invalid') {
              if (fpId) {
                if (dev) {
                  loadScript2('/servicechat/js/' + fpId, loadingHelper);
                }
                else {
                  loadScript2('https://app.serviceform.com/servicechat/js/' + fpId, loadingHelper);
                }
              }
            } else {
              window.inlineChatData = JSON.parse(xhr.response);
              loadingHelper();
            }
          }
        }
        xhr.send(json);
      }
    }

    // loadScript2('https://assets.calendly.com/assets/external/widget.js')
  },
  initConfig: function () {
    if (typeof window.inlineChatData !== 'undefined') {
      var cH = window.inlineChatData.serviceform;
    }
    else {
      cH = window.jsonObject.serviceform;
    }

    var customerName = '';
    var customerEmail = '';

    if (typeof window.sfDynamicUserName !== 'undefined') {
      customerName = window.sfDynamicUserName;
    }

    if (typeof window.sfDynamicUserEmail !== 'undefined') {
      customerEmail = window.sfDynamicUserEmail;
    }

    var event = new Date();

    var parsed = sf_bowser.getParser(window.navigator.userAgent).parsedResult;

    var adminAnswerImage = cH.serviceChatImage;

    if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
      adminAnswerImage = window.sfDynamicServiceChatImage;
    }
    var cid = event.getTime() + '-' + generateId(16);

    var session = sC.sfChatGetCookie('sf-session');
    var referrer = document.referrer;

    if (typeof session === 'undefined' || session === '') {
      session = cH.nid + '-' + generateId(16);
      sC.sfChatSetCookie('sf-session', session, 1);
      sC.sfChatSetCookie('sf-referrer', referrer, 1);
      referrer = sC.sfChatGetCookie('sf-referrer');
    }

    window.soundEffect = [];

    sC.options.serviceChatAnswers = {
      active: 0,
      session: session,
      referrer: referrer,
      live: 0,
      online: 1,
      adminLive: 0,
      aid: '',
      avatar: adminAnswerImage,
      browser: parsed.browser.name,
      browserVersion: parsed.browser.version,
      osName: parsed.os.name,
      osVersion: parsed.os.version,
      osVersionName: parsed.os.versionName,
      platformType: parsed.platform.type,
      platformVendor: parsed.platform.vendor,
      engine: parsed.engine.name,
      agentImage: '',
      agentName: '',
      answers: {
        admin: [],
        customer: [],
        actions: [],
        generic: []
      },
      adminWriting: 0,
      customerWriting: 0,
      uid: cH.uid,
      nid: cH.nid,
      gdpr: 0,
      failedAnswers: [],
      interaction: 0,

      date: event.toISOString(),
      cid: cid,
      clicks: 0,
      seconds: 0,
      droppedOnQuestion: 0,
      submitted: 0,
      website: document.location.href,
      page: 0,
      click: "0",
      type: "flow-statistics",
      source: "inline_bot",
      jump: "",
      submissionWebsite: document.location.href,
      skip: "",
      paid: 0,
      customerEmail: customerEmail,
      customerName: customerName,
      postalCode: '',
      address: '',
      message: '',
      fullAmount: 0,
      startTime: "",
      open: 0,
      endTime: "",
      startDate: "",
      hiddenTokens: [],
      summaryItems: [],
      amount: 0,
      tokens: [],
      results: {
        fields: {},
        dates: {},
        times: {}
      }
    };

    sC.stats = {
      uid: cH.uid,
      session: session,
      referrer: referrer,
      nid: cH.nid,
      cid: cid,
      date: event.toISOString(),
      livechatStart: 0,
      agentJoined: 0,
      seconds: 0,
      livechat: 0,
      flowType: "inline_bot",
      type: "flow-statistics",
      view: 1,
      interactionSecond: 0,
      submission: 0,
      interaction: 0,
      sankey: [],
      path: [],
      options: [],
      seconds: 0,
      agent: 0,
      clicks: 0,
      rating: 0,
      paid: 0,
      droppedOnQuestion: 0,
      browser: parsed.browser.name,
      browserVersion: parsed.browser.version,
      osName: parsed.os.name,
      osVersion: parsed.os.version,
      osVersionName: parsed.os.versionName,
      platformType: parsed.platform.type,
      platformVendor: parsed.platform.vendor,
      engine: parsed.engine.name,
      failedAnswer: 0,
      failedAnswers: [],
      website: document.location.href,
      country: '',
      ip: '',
      amount: 0
    }


    var queryString = window.location.search;
    if(queryString){
      if(typeof URLSearchParams === 'function') {
        var urlParams = new URLSearchParams(queryString);
        var firstName = urlParams.get('firstname');
        if(firstName !== ''){
          sC.options.serviceChatAnswers.customerFirstName = firstName;
          sC.options.serviceChatAnswers.customerName = firstName;
        }
        var lastName = urlParams.get('lastname');
        if(lastName !== ''){
          sC.options.serviceChatAnswers.customerLastName = lastName;
        }
        var email = urlParams.get('email');
        if(email !== ''){
          sC.options.serviceChatAnswers.customerEmail = email;

          var summaryItemAnswer = {
            "answer": [{
              "answer": email,
              "amount": ''
            }],
            "label": 'Dynamic email',
            "price": ''
          }

          sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

        }
      }
    }

    if (typeof cH.emailCopy !== 'undefined') {
      if (sC.options.serviceChatAnswers.emailCopy !== '') {
        sC.options.serviceChatAnswers.emailCopy = cH.emailCopy;
      }
    }

    if (typeof window.serviceChatDynamicEmail !== 'undefined') {
      if (validateEmail(window.serviceChatDynamicEmail)) {
        sC.options.serviceChatAnswers.emailCopy = window.serviceChatDynamicEmail;
      }
    }


    if (window.location.href.indexOf("oikotie.fi/") > -1) {
      if (window.location.href.indexOf("-asunnot") > -1) {
        function getMeta(metaName) {
          var metas = document.getElementsByTagName('meta');

          for (var i = 0; i < metas.length; i++) {
            if (metas[i].getAttribute('name') === metaName) {
              return metas[i].getAttribute('content');
            }
          }
          return '';
        }

        var email = document.querySelector('.listing-overview .paragraph');
        if (email) {
          var text = email.textContent;
          var dynamicEmail = extractEmails(text);
        }

        var image = document.querySelector('.person-picture');
        if(image){
          var url = image.style.backgroundImage;
          if(url){
            var img = url.slice(4, -1).replace(/["']/g, "");

            window.sfDynamicServiceChatImage = img;
            window.sfDynamicPushImage = img;
          }
        }

        // Fallback kasi logo, sivuilta.
        function extractEmails(text) {
          var mails = text.match(/([a-zA-Z0-9._-]+@kahdeksas.fi+)/gi);
          if (mails) {
            var dynamicMail = mails[0];
            sC.options.serviceChatAnswers.emailCopy = dynamicMail;
          } else {
            var brokerName = getMeta('SAC:brokerName');
            var companyId = getMeta('SAC:realtorCorporationId');
            if(brokerName && companyId === '13103907') {
              brokerName = brokerName.toLowerCase();
              brokerName = brokerName.replace(' ', '.');
              var dynamicMail = brokerName + '@kahdeksas.fi';
              sC.options.serviceChatAnswers.emailCopy = dynamicMail;
            }
          }
        }
      }
    }

    if (typeof cH.skips !== 'undefined') {
      sC.options.serviceChatAnswers.skip = cH.skips;
    }
  },
  loadLastData: function(cid){

    loadScript2('https://www.gstatic.com/firebasejs/7.6.1/firebase-firestore.js', loadData);

    function loadData() {
      var db = firebase.firestore();

      var nid = sC.options.cH.nid;

      var docRef = db.collection("users").doc(cid);

      docRef.get().then(function(doc) {
        if (doc.exists) {
          window.currentData = doc.data();
          var json = doc.data();
          sC.processPollResult(doc.data());

          sC.addUserOptions(sC.options.serviceChatAnswers.page-1);
          if(sC.options.serviceChatAnswers.open === 1){
            sC.toggleServiceChat('just','');
          }

        } else {
        }
      }).catch(function(error) {
      });
    }
  },
  init: function () {
    if (typeof window.inlineChatData !== 'undefined') {
      var cH = window.inlineChatData.serviceform;
    }
    else {
      cH = window.jsonObject.serviceform;
    }

    sC.options.cH = cH;

    if (typeof cH === 'undefined') {
      return;
    }
    if (typeof cH.serviceChatName === 'undefined') {
      var serviceChatName = 'Servicechat';
    }
    else {
      serviceChatName = cH.serviceChatName;
    }

    if (typeof cH.serviceChatTitle === 'undefined') {
      var serviceChatTitle = 'Instant replies';
    }
    else {
      serviceChatTitle = cH.serviceChatTitle;
    }

    if (typeof cH.logo === 'undefined') {
      var serviceChatImage = 'https://app.serviceform.com/course_manager/image-upload.svg';
    }
    else {
      serviceChatImage = cH.logo;
    }

    var color = cH.color;
    var color1 = cH.color1;
    window.sfInlineWrapper = document.getElementById('servicechat-inline');

    var fullLogo = '';
    if (typeof cH.showLogoCircle !== 'undefined') {
      if (cH.showLogoCircle === '0') {
        fullLogo = 'sf-full-logo';
      }
    }

    loadCSSIfNotAlreadyLoadedForSomeReason();
    sC.initConfig();

    // Dynamically load things.
    if (typeof window.sfDynamicStartPage !== 'undefined') {
      if (window.sfDynamicStartPage !== '' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
        cH.chatPushSettingsQuestion = parseInt(window.sfDynamicStartPage);
        sC.options.serviceChatAnswers.page = parseInt(window.sfDynamicStartPage);
      }
    }

    window.sfLoggedSubmission = 0;
    window.sfLoggedInteraction = 0;
    window.sfLoggedView = 0;

    sC.newStatistics('view','');

    var inlineHeight = '';
    var b = window.fpType;

    if(b === "inlinebox" || b === "inline" || b === "fullpage") {
      if (typeof cH.inlineBotSize !== 'undefined') {
        if (cH.inlineBotSize === '0') {
          sfInlineWrapper.classList.add('sf-size');
        }
        else if (cH.inlineBotSize === '1') {
          sfInlineWrapper.classList.add('sf-size-1');
        }
        else if (cH.inlineBotSize === '2') {
          sfInlineWrapper.classList.add('sf-size-2');
        }
      }

      if (typeof cH.inlineScroll !== 'undefined') {
        if (cH.inlineScroll === '1') {
          sfInlineWrapper.classList.add('sf-disable-scroll');
          if (cH.inlineHeight !== 'undefined' || cH.inlineHeight !== '') {
            sfInlineWrapper.style.height = cH.inlineHeight;
            inlineHeight = 'style="height:' + cH.inlineHeight + '"';
          }
        }
      }

      if (cH.inlineWidth !== 'undefined' || cH.inlineWidth !== '') {
        sfInlineWrapper.style.maxWidth = cH.inlineWidth;
      }
    }

    var closeChat = '<?xml version="1.0" encoding="UTF-8"?>\n' +
      '<svg class="sf-confirm-close-me" width="28px" height="28px" viewBox="0 0 28 28" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
      '    <title>Close Servicechat</title>\n' +
      '    <g id="Artboard" stroke="none" stroke-width="1" fill="#000000" fill-rule="evenodd" opacity="0.701195126" stroke-linecap="square">\n' +
      '        <g id="Group" transform="translate(4.000000, 4.000000)" fill-rule="nonzero" stroke="#000000" stroke-width="2">\n' +
      '            <path d="M10.3917478,-3.10288257 L9.76079544,22.7661651" id="Line" transform="translate(10.076272, 9.831641) rotate(45.000000) translate(-10.076272, -9.831641) "></path>\n' +
      '            <path d="M9.40724205,-3.10288257 L10.0381944,22.7661651" id="Line" transform="translate(9.722718, 9.831641) rotate(-45.000000) translate(-9.722718, -9.831641) "></path>\n' +
      '        </g>\n' +
      '    </g>\n' +
      '</svg>';

    var oneNew = '';
    var chatPushHTML = '';
    if (cH.chatPush === '1') {
      if (typeof cH.chatPushSettingsQuestion !== 'undefined') {
        var question = parseInt(sC.getPageFromId(cH.chatPushSettingsQuestion));
        if (typeof cH.questions[question] !== 'undefined') {
          var conversations = cH.questions[question].options;
        }
        else {
          conversations = 0;
        }
      }
      else {
        conversations = cH.questions[0].options;
      }

      if (typeof cH.chatPushSettings !== 'undefined') {
        if (typeof cH.chatPushSettings.question !== 'undefined') {
          question = parseInt(cH.chatPushSettings.question) - 1;
          if (typeof cH.questions[question] !== 'undefined') {
            var conversations = cH.questions[question].options;
          }
          else {
            conversations = 0;
          }
        }
      }

      if (typeof cH.serviceChatName === 'undefined') {
        var serviceChatName = 'Servicechat';
      }
      else {
        serviceChatName = cH.serviceChatName;
      }


      var introText = '';
      if (typeof cH.chatPushSettingsIntroText !== 'undefined') {
        introText = cH.chatPushSettingsIntroText;
      }

      if (typeof cH.chatPushSettings !== 'undefined') {
        if (typeof cH.chatPushSettings.introText !== 'undefined') {
          introText = cH.chatPushSettings.introText;
        }
      }

      introText = introText.replace(/style="[^"]*"/g, "");

      var conversationsHTML = '';

      var noPush = '';
      var showAgain = sC.options.cH.showAgainAfter;
      if(typeof showAgain !== 'undefined') {
        if (showAgain !== '') {
          noPush = sC.sfChatGetCookie('sf-hidden-push');
        }
      }

      if (conversations) {
        if (cH.chatPushSettingsQuestion !== 'none' && conversations.length > 1) {
          if (noPush !== '1' || window.location.href.indexOf("servicechat") != -1) {
            for (var i = 0; i < conversations.length; i++) {
              conversationsHTML += '<div class="sf-conversation" cid="' + i + '">' + conversations[i].answer + '</div>';
            }
          }
        }
      }

      var dynamicImage = serviceChatImage;
      if (typeof window.sfDynamicPushImage !== 'undefined') {
        if (window.sfDynamicPushImage !== '') {
          dynamicImage = window.sfDynamicPushImage;
        }
      }

      var sfHeader = '<div class="serviceform-image ' + fullLogo + '" style="background-color:' + color + ';background-image:url(' + dynamicImage + ')"></div>' +
        '<div class="sf-chat-form-name">' + serviceChatName + '</div>';

      if (typeof cH.fullLogo !== 'undefined') {
        sfHeader = '' +
          '<div class="serviceform-full-logo">' +
          '<img src="' + cH.fullLogo + '">' +
          '</div>';
      }

      // Dynamically load things.
      if (typeof window.sfDynamicStartPage !== 'undefined' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
        if (window.sfDynamicStartPage > 0) {
          introText = sC.options.cH.questions[window.sfDynamicStartPage].title;
        }
      }

      introText = sC.stringTokens(introText);

      var ctaButton = '';
      if(typeof sC.options.cH.ctaButtonText !== 'undefined' && sC.options.cH.ctaButtonText !== ''){
        ctaButton = '<div class="sf-click-cta-button">'+sC.options.cH.ctaButtonText+'</div>';
      }

      if(noPush !== '1') {
        chatPushHTML = '<div class="sf-chat-push push-delay" style="opacity:0;">' +
          '<div class="sf-chat-push-header">' +
          '<div class="sf-chat-push-header-name">' +
          sfHeader +
          '</div>' +
          '<div class="serviceform-chat-push-close sf-confirm-close-me">' + closeChat + '</div>' +
          '<div class="sf-chat-push-settings">' + introText + '</div>' +
          ctaButton +
          '</div>' +
          '<div class="sf-chat-conversations">' + conversationsHTML + '</div>' +
          '</div>';
      }
      oneNew = '<div class="sf-chat-one-new">1</div>';

    }
    var chatLogoAsButton = '';

    if (typeof cH.chatLogoAsButton !== 'undefined') {
      if (cH.chatLogoAsButton === '1') {
        chatLogoAsButton = 'background-image: url(' + cH.logo + ');';
      }
    }

    var sendSvg = '<?xml version="1.0" encoding="iso-8859-1"?>\n' +
      '<!-- Generator: Adobe Illustrator 16.0.0, SVG Export Plug-In . SVG Version: 6.00 Build 0)  -->\n' +
      '<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">\n' +
      '<svg fill="' + cH.color + '80" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n' +
      '\t width="535.5px" height="535.5px" viewBox="0 0 535.5 535.5" style="enable-background:new 0 0 535.5 535.5;" xml:space="preserve"\n' +
      '\t>\n' +
      '<g>\n' +
      '\t<g id="send">\n' +
      '\t\t<polygon points="0,497.25 535.5,267.75 0,38.25 0,216.75 382.5,267.75 0,318.75 \t\t"/>\n' +
      '\t</g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '</svg>\n';

    var runOn = '<div class="sf-run-on"><div class="sf-run-logo"></div></div>';

    if (typeof cH.hideSfLogo === 'undefined' || cH.hideSfLogo !== '1') {
      runOn = '<a href="' + sC.gT('https://app.serviceform.com') + '" title="' + sC.gT('Premium chatbots provided by Serviceform') + '" target="_blank">' +
        '<div class="sf-run-on">' +
        '<div class="sf-run-logo">' +
        '<img alt="' + sC.gT('Best chatbot building platform') + '" src="https://app.serviceform.com/assets/asset-images/logos/serviceform-logo-only.png">' +
        '</div>' + sC.gT('We run on Serviceform') + '</div>' +
        '</a>';

      if (typeof cH.whitelabel !== 'undefined') {
        if (cH.whitelabel === 'slt') {
          runOn = '<a href="' + sC.gT('https://slt.lk/bizchat') + '" title="' + sC.gT('Premium chatbots provided by SLT BizChat') + '" target="_blank">' +
            '<div class="sf-run-on">' +
            '<div class="sf-run-logo">' +
            '<img alt="' + sC.gT('Best chatbot building platform') + '" src="https://bizchat.slt.lk/assets/whitelabel/slt/slt-white.png">' +
            '</div>' + sC.gT('We run on SLT BizChat') + '</div>' +
            '</a>';
        } else if (cH.whitelabel === 'netstory' || cH.whitelabel === 'tagomo' || cH.whitelabel === 'sivustamo') {
          runOn = '';
        }
      }

    }


    var hexagon = '';
    if (typeof cH.hexagon !== 'undefined') {
      if (cH.hexagon === '1') {
        hexagon = 'hexagon';
      }
    }

    var normalDisplay = 'display:none;opacity:0;';
    var sfChat = document.getElementById('servicechat-inline');
    if (sfChat) {
      if (sfChat.classList.contains('development')) {
        normalDisplay = 'display:block;opacity:1;';
      }
    }

    sC.sfDevModeOff = 1;
    if (sfChat) {
      if (sfChat.classList.contains('development')) {
        sC.sfDevModeOff = 0;
      }
    }

    var customCSS = '';
    if (typeof cH.customCSS !== 'undefined') {
      customCSS = cH.customCSS;
    }


    if (typeof cH.fullLogo !== 'undefined') {
      sfHeader = '' +
        '<div class="serviceform-full-logo">' +
        '<img src="' + cH.fullLogo + '">' +
        '</div>';
    }

    var closeButton = '<img src="https://app.serviceform.com/servicechat/close-bot.svg">';
    var darkButton = '';

    var counterColors = '.sf-conversation{color:' + cH.color1 + ' !important; border: 1px solid ' + cH.color1 + ' !important}' +
      '.sf-conversation:hover{color:white !important; background-color:' + cH.color1 + ' !important}' +
      '.sf-send svg{fill:' + cH.color1 + '80;}' +
      '.sf-send:hover svg{fill:' + cH.color1 + '}' +
      '.servicechat-admin-options{color:' + cH.color1 + ';border-color:' + cH.color1 + ' !important;}' +
      '.servicechat-admin-options:hover{background:' + cH.color1 + ' !important;}' +
      '.servicechat-admin-multiple-buttons{color:' + cH.color1 + ';border-color:' + cH.color1 + ' !important;}' +
      '.servicechat-admin-multiple-button:hover{color:' + cH.color1 + ' !important;background-color:white !important;border-color:' + cH.color1 + ' !important;}';

    if (lightOrDark(cH.color1) === 'light') {
      darkButton = '.servicechat-toggle.open {background-image: url(https://app.serviceform.com/servicechat/close-bot-dark.svg) !important;}';
      counterColors = '.sf-conversation{background-color: ' + cH.color1 + ' !important; color: #000000 !important; border: 1px solid #000000 !important}' +
        '.sf-conversation:hover{background-color: #000000 !important; color:white !important; border-color:' + cH.color1 + ' !important}' +
        '.sf-send svg{fill:#A3A3A5;}' +
        '.sf-send:hover svg{fill:#000000;}' +
        '.servicechat-user-selected.sc-question { background: black !important;}' +
        'button.servicechat-question-button {background: black !important;}' +
        'div#servicechat-toggle {border: 1px solid #000000 !important;}' +
        '.servicechat-admin-options{color: #000000; border: 1px solid #000000 !important; background:' + cH.color1 + ' !important;}' +
        '.servicechat-admin-options:hover{background-color: #000000 !important; color:' + cH.color1 + ';}' +
        '.servicechat-admin-multiple-button{color:black !important;border-color:black !important;}' +
        '.servicechat-admin-multiple-button:hover{color:' + cH.color1 + ' !important;background-color:black !important;}';
    }

    var styleDarkText = '';

    var phoneButton =
      '<?xml version="1.0" encoding="iso-8859-1"?>\n' +
      '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 482.6 482.6" style="enable-background:new 0 0 482.6 482.6;" xml:space="preserve" fill="#ffffff">\n' +
      "<g>\n" +
      '\t<path d="M98.339,320.8c47.6,56.9,104.9,101.7,170.3,133.4c24.9,11.8,58.2,25.8,95.3,28.2c2.3,0.1,4.5,0.2,6.8,0.2\n' +
      "\t\tc24.9,0,44.9-8.6,61.2-26.3c0.1-0.1,0.3-0.3,0.4-0.5c5.8-7,12.4-13.3,19.3-20c4.7-4.5,9.5-9.2,14.1-14\n" +
      "\t\tc21.3-22.2,21.3-50.4-0.2-71.9l-60.1-60.1c-10.2-10.6-22.4-16.2-35.2-16.2c-12.8,0-25.1,5.6-35.6,16.1l-35.8,35.8\n" +
      "\t\tc-3.3-1.9-6.7-3.6-9.9-5.2c-4-2-7.7-3.9-11-6c-32.6-20.7-62.2-47.7-90.5-82.4c-14.3-18.1-23.9-33.3-30.6-48.8\n" +
      "\t\tc9.4-8.5,18.2-17.4,26.7-26.1c3-3.1,6.1-6.2,9.2-9.3c10.8-10.8,16.6-23.3,16.6-36s-5.7-25.2-16.6-36l-29.8-29.8\n" +
      "\t\tc-3.5-3.5-6.8-6.9-10.2-10.4c-6.6-6.8-13.5-13.8-20.3-20.1c-10.3-10.1-22.4-15.4-35.2-15.4c-12.7,0-24.9,5.3-35.6,15.5l-37.4,37.4\n" +
      "\t\tc-13.6,13.6-21.3,30.1-22.9,49.2c-1.9,23.9,2.5,49.3,13.9,80C32.739,229.6,59.139,273.7,98.339,320.8z M25.739,104.2\n" +
      "\t\tc1.2-13.3,6.3-24.4,15.9-34l37.2-37.2c5.8-5.6,12.2-8.5,18.4-8.5c6.1,0,12.3,2.9,18,8.7c6.7,6.2,13,12.7,19.8,19.6\n" +
      "\t\tc3.4,3.5,6.9,7,10.4,10.6l29.8,29.8c6.2,6.2,9.4,12.5,9.4,18.7s-3.2,12.5-9.4,18.7c-3.1,3.1-6.2,6.3-9.3,9.4\n" +
      "\t\tc-9.3,9.4-18,18.3-27.6,26.8c-0.2,0.2-0.3,0.3-0.5,0.5c-8.3,8.3-7,16.2-5,22.2c0.1,0.3,0.2,0.5,0.3,0.8\n" +
      "\t\tc7.7,18.5,18.4,36.1,35.1,57.1c30,37,61.6,65.7,96.4,87.8c4.3,2.8,8.9,5,13.2,7.2c4,2,7.7,3.9,11,6c0.4,0.2,0.7,0.4,1.1,0.6\n" +
      "\t\tc3.3,1.7,6.5,2.5,9.7,2.5c8,0,13.2-5.1,14.9-6.8l37.4-37.4c5.8-5.8,12.1-8.9,18.3-8.9c7.6,0,13.8,4.7,17.7,8.9l60.3,60.2\n" +
      "\t\tc12,12,11.9,25-0.3,37.7c-4.2,4.5-8.6,8.8-13.3,13.3c-7,6.8-14.3,13.8-20.9,21.7c-11.5,12.4-25.2,18.2-42.9,18.2\n" +
      "\t\tc-1.7,0-3.5-0.1-5.2-0.2c-32.8-2.1-63.3-14.9-86.2-25.8c-62.2-30.1-116.8-72.8-162.1-127c-37.3-44.9-62.4-86.7-79-131.5\n" +
      '\t\tC28.039,146.4,24.139,124.3,25.739,104.2z"></path>\n' +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "<g>\n" +
      "</g>\n" +
      "</svg>\n";

    if (lightOrDark(cH.color) === "light") {
      closeButton =
        '<img src="https://app.serviceform.com/servicechat/close-bot-dark.svg">';
      styleDarkText = "color:#000000;";

      phoneButton =
        '<?xml version="1.0" encoding="iso-8859-1"?>\n' +
        '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 482.6 482.6" style="enable-background:new 0 0 482.6 482.6;" xml:space="preserve" fill="#ffffff">\n' +
        "<g>\n" +
        '\t<path d="M98.339,320.8c47.6,56.9,104.9,101.7,170.3,133.4c24.9,11.8,58.2,25.8,95.3,28.2c2.3,0.1,4.5,0.2,6.8,0.2\n' +
        "\t\tc24.9,0,44.9-8.6,61.2-26.3c0.1-0.1,0.3-0.3,0.4-0.5c5.8-7,12.4-13.3,19.3-20c4.7-4.5,9.5-9.2,14.1-14\n" +
        "\t\tc21.3-22.2,21.3-50.4-0.2-71.9l-60.1-60.1c-10.2-10.6-22.4-16.2-35.2-16.2c-12.8,0-25.1,5.6-35.6,16.1l-35.8,35.8\n" +
        "\t\tc-3.3-1.9-6.7-3.6-9.9-5.2c-4-2-7.7-3.9-11-6c-32.6-20.7-62.2-47.7-90.5-82.4c-14.3-18.1-23.9-33.3-30.6-48.8\n" +
        "\t\tc9.4-8.5,18.2-17.4,26.7-26.1c3-3.1,6.1-6.2,9.2-9.3c10.8-10.8,16.6-23.3,16.6-36s-5.7-25.2-16.6-36l-29.8-29.8\n" +
        "\t\tc-3.5-3.5-6.8-6.9-10.2-10.4c-6.6-6.8-13.5-13.8-20.3-20.1c-10.3-10.1-22.4-15.4-35.2-15.4c-12.7,0-24.9,5.3-35.6,15.5l-37.4,37.4\n" +
        "\t\tc-13.6,13.6-21.3,30.1-22.9,49.2c-1.9,23.9,2.5,49.3,13.9,80C32.739,229.6,59.139,273.7,98.339,320.8z M25.739,104.2\n" +
        "\t\tc1.2-13.3,6.3-24.4,15.9-34l37.2-37.2c5.8-5.6,12.2-8.5,18.4-8.5c6.1,0,12.3,2.9,18,8.7c6.7,6.2,13,12.7,19.8,19.6\n" +
        "\t\tc3.4,3.5,6.9,7,10.4,10.6l29.8,29.8c6.2,6.2,9.4,12.5,9.4,18.7s-3.2,12.5-9.4,18.7c-3.1,3.1-6.2,6.3-9.3,9.4\n" +
        "\t\tc-9.3,9.4-18,18.3-27.6,26.8c-0.2,0.2-0.3,0.3-0.5,0.5c-8.3,8.3-7,16.2-5,22.2c0.1,0.3,0.2,0.5,0.3,0.8\n" +
        "\t\tc7.7,18.5,18.4,36.1,35.1,57.1c30,37,61.6,65.7,96.4,87.8c4.3,2.8,8.9,5,13.2,7.2c4,2,7.7,3.9,11,6c0.4,0.2,0.7,0.4,1.1,0.6\n" +
        "\t\tc3.3,1.7,6.5,2.5,9.7,2.5c8,0,13.2-5.1,14.9-6.8l37.4-37.4c5.8-5.8,12.1-8.9,18.3-8.9c7.6,0,13.8,4.7,17.7,8.9l60.3,60.2\n" +
        "\t\tc12,12,11.9,25-0.3,37.7c-4.2,4.5-8.6,8.8-13.3,13.3c-7,6.8-14.3,13.8-20.9,21.7c-11.5,12.4-25.2,18.2-42.9,18.2\n" +
        "\t\tc-1.7,0-3.5-0.1-5.2-0.2c-32.8-2.1-63.3-14.9-86.2-25.8c-62.2-30.1-116.8-72.8-162.1-127c-37.3-44.9-62.4-86.7-79-131.5\n" +
        '\t\tC28.039,146.4,24.139,124.3,25.739,104.2z"></path>\n' +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "<g>\n" +
        "</g>\n" +
        "</svg>\n";
    }

    var refreshButton = '<?xml version="1.0" encoding="iso-8859-1"?>\n' +
      '<svg version="1.1" fill="#ffffff" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n' +
      '\t viewBox="0 0 489.711 489.711" style="enable-background:new 0 0 489.711 489.711;" xml:space="preserve">\n' +
      '<g>\n' +
      '\t<g>\n' +
      '\t\t<path d="M112.156,97.111c72.3-65.4,180.5-66.4,253.8-6.7l-58.1,2.2c-7.5,0.3-13.3,6.5-13,14c0.3,7.3,6.3,13,13.5,13\n' +
      '\t\t\tc0.2,0,0.3,0,0.5,0l89.2-3.3c7.3-0.3,13-6.2,13-13.5v-1c0-0.2,0-0.3,0-0.5v-0.1l0,0l-3.3-88.2c-0.3-7.5-6.6-13.3-14-13\n' +
      '\t\t\tc-7.5,0.3-13.3,6.5-13,14l2.1,55.3c-36.3-29.7-81-46.9-128.8-49.3c-59.2-3-116.1,17.3-160,57.1c-60.4,54.7-86,137.9-66.8,217.1\n' +
      '\t\t\tc1.5,6.2,7,10.3,13.1,10.3c1.1,0,2.1-0.1,3.2-0.4c7.2-1.8,11.7-9.1,9.9-16.3C36.656,218.211,59.056,145.111,112.156,97.111z"/>\n' +
      '\t\t<path d="M462.456,195.511c-1.8-7.2-9.1-11.7-16.3-9.9c-7.2,1.8-11.7,9.1-9.9,16.3c16.9,69.6-5.6,142.7-58.7,190.7\n' +
      '\t\t\tc-37.3,33.7-84.1,50.3-130.7,50.3c-44.5,0-88.9-15.1-124.7-44.9l58.8-5.3c7.4-0.7,12.9-7.2,12.2-14.7s-7.2-12.9-14.7-12.2l-88.9,8\n' +
      '\t\t\tc-7.4,0.7-12.9,7.2-12.2,14.7l8,88.9c0.6,7,6.5,12.3,13.4,12.3c0.4,0,0.8,0,1.2-0.1c7.4-0.7,12.9-7.2,12.2-14.7l-4.8-54.1\n' +
      '\t\t\tc36.3,29.4,80.8,46.5,128.3,48.9c3.8,0.2,7.6,0.3,11.3,0.3c55.1,0,107.5-20.2,148.7-57.4\n' +
      '\t\t\tC456.056,357.911,481.656,274.811,462.456,195.511z"/>\n' +
      '\t</g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '</svg>\n';

    if (lightOrDark(cH.color) === 'light') {
      closeButton = '<img src="https://app.serviceform.com/servicechat/close-bot-dark.svg">';
      styleDarkText = 'color:#000000;';
      refreshButton = '<?xml version="1.0" encoding="iso-8859-1"?>\n' +
        '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n' +
        '\t viewBox="0 0 489.711 489.711" style="enable-background:new 0 0 489.711 489.711;" xml:space="preserve">\n' +
        '<g>\n' +
        '\t<g>\n' +
        '\t\t<path d="M112.156,97.111c72.3-65.4,180.5-66.4,253.8-6.7l-58.1,2.2c-7.5,0.3-13.3,6.5-13,14c0.3,7.3,6.3,13,13.5,13\n' +
        '\t\t\tc0.2,0,0.3,0,0.5,0l89.2-3.3c7.3-0.3,13-6.2,13-13.5v-1c0-0.2,0-0.3,0-0.5v-0.1l0,0l-3.3-88.2c-0.3-7.5-6.6-13.3-14-13\n' +
        '\t\t\tc-7.5,0.3-13.3,6.5-13,14l2.1,55.3c-36.3-29.7-81-46.9-128.8-49.3c-59.2-3-116.1,17.3-160,57.1c-60.4,54.7-86,137.9-66.8,217.1\n' +
        '\t\t\tc1.5,6.2,7,10.3,13.1,10.3c1.1,0,2.1-0.1,3.2-0.4c7.2-1.8,11.7-9.1,9.9-16.3C36.656,218.211,59.056,145.111,112.156,97.111z"/>\n' +
        '\t\t<path d="M462.456,195.511c-1.8-7.2-9.1-11.7-16.3-9.9c-7.2,1.8-11.7,9.1-9.9,16.3c16.9,69.6-5.6,142.7-58.7,190.7\n' +
        '\t\t\tc-37.3,33.7-84.1,50.3-130.7,50.3c-44.5,0-88.9-15.1-124.7-44.9l58.8-5.3c7.4-0.7,12.9-7.2,12.2-14.7s-7.2-12.9-14.7-12.2l-88.9,8\n' +
        '\t\t\tc-7.4,0.7-12.9,7.2-12.2,14.7l8,88.9c0.6,7,6.5,12.3,13.4,12.3c0.4,0,0.8,0,1.2-0.1c7.4-0.7,12.9-7.2,12.2-14.7l-4.8-54.1\n' +
        '\t\t\tc36.3,29.4,80.8,46.5,128.3,48.9c3.8,0.2,7.6,0.3,11.3,0.3c55.1,0,107.5-20.2,148.7-57.4\n' +
        '\t\t\tC456.056,357.911,481.656,274.811,462.456,195.511z"/>\n' +
        '\t</g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '<g>\n' +
        '</g>\n' +
        '</svg>\n';
    }

    var sfHeader = '<div class="serviceform-image ' + fullLogo + '" style="background-color:' + color + ';background-image:url(' + serviceChatImage + ')"></div>' +
      '<div class="serviceform-name" style="' + styleDarkText + '">' + serviceChatName + '</div>';

    var sfCustomCSS = '';
    if (typeof cH.sfCustomCSS !== 'undefined') {
      sfCustomCSS = cH.sfCustomCSS;
    }

    var refreshHTML = '';
    if (typeof cH.showRefreshButton !== 'undefined' && cH.showRefreshButton === '1') {
      refreshHTML = '<div class="serviceform-refresh">' + refreshButton + '</div>';
    }

    var sfCloseForever = '';
    if (typeof cH.sfCloseForever !== 'undefined' && cH.sfCloseForever === '1') {
      sfCloseForever = '<div id="servicechat-close-forever">x</div>';
      oneNew = '';
    }

    var extraCss = '';
    if(typeof cH.popupMobileDisabled !== 'undefined' && cH.popupMobileDisabled === '1'){
      extraCss = '@media (max-width: 991px) { .sf-chat-push {display: none !important;}}';
    }

    var dynamicColor = cH.color1;
    var colorDynamic = '#ffffff';
    if (lightOrDark(cH.color1) === 'light') {
      dynamicColor = '#ffffff';
      colorDynamic = '#000000';
    }

    var phoneButtonHTML = "";
    if (typeof cH.showTelephoneButton !== "undefined" && cH.showTelephoneButton === "1") {
      phoneButtonHTML =
        '<a class="serviceform-phone" href="tel:+' +
        +cH.sfCustomTele +
        '">' +
        phoneButton +
        "</a>";
    }

    var backgroundCSS = '';
    if(typeof cH.background !== 'undefined'){
      backgroundCSS = '.fp-img{background-image: url('+cH.background+') !important;background-repeat: no-repeat; background-size: cover;}' +
        '.sf-fullpage{background-image: url('+cH.background+') !important;background-repeat: no-repeat; background-size: cover;}';
    }

    var inlineBg = document.querySelector('#sf-inline-image');
    var inlineLogo = '';

    if(inlineBg) {
      if (typeof cH.logo !== 'undefined') {
        var url = '';
        var customClass = '';
        if (cH.whitelabel === 'netstory') {
          customClass = 'netstory';
          url = '<a href="/"><div class="back-url"><</div></a>';
        }

        inlineLogo = url +
          '<div class="serviceform-inline-logo '+customClass+'">' +
          '<img src="' + cH.logo + '">' +
          '</div>';
      }
    }

    var html = '' +
      '<style>' +
      '.sf-chat-push.open {opacity: 1 !important;}'+
      '.servicechat-admin-option.open {opacity: 1 !important;}'+
      backgroundCSS +
      '.sf-search-header-top {background-color:'+dynamicColor+' !important; color: white !important;}'+
      '#servicechat li.ais-RefinementList-item:hover,#servicechat .sf-search-item:hover, #servicechat .sf-search-item-no-click:hover,#servicechat .sf-search-item:hover,#servicechat .ais-RefinementList-item--selected{background-color:'+colorDynamic+' !important; color: '+dynamicColor+' !important}'+
      '#servicechat .sf-click-cta-button{border: 1px solid '+dynamicColor+';background-color:'+dynamicColor+' !important;color:white !important}' +
      '#servicechat .sf-click-cta-button:hover{background-color:white !important;color:'+dynamicColor+'!important;border: 1px solid '+dynamicColor+'}' +
      '' + sfCustomCSS + extraCss + '</style>' +
      '<div id="service-chat-initiated" class="servicechat-container" style="' + normalDisplay + '">' +
      '<div class="servicechat-header" style="background-color:' + color + ';">' +
      '<div class="serviceform-intro"><div class="_5wd4 _1nc7 _2cnu">\n' +
      '</div>\n' +
      sfHeader +
      phoneButtonHTML +
      refreshHTML +
      '<div class="serviceform-close">' +
      closeButton +
      '</div>' +
      // '<div class="serviceform-cta">'+serviceChatTitle+'</div>' +
      '</div>' +
      '</div>' +
      '<div class="servicechat-body">' +
      '<div class="servicechat-conversation">' +
      inlineLogo +
      '<div class="servicechat-body">' +
      '<div id="servicechat-parts" ' + inlineHeight + ' class="servicechat-parts">' +
      '<div class="servicechat-parts-wrapper">' +
      '<div id="servicechat-parts-inner"></div>' +
      '<div id="servicechat-parts-outer">' +
      runOn +
      '</div>' +
      '<div id="servicechat-parts-outer-clearfix"></div>' +
      '</div>' +
      '</div>' +
      '</div>' +
      '<div class="servicechat-footer">' +
      '<div class="servicechat-composer">' +
      '<textarea rows="1" placeholder="' + sC.gT('Write a reply') + '…" id="servicechat-composer"></textarea>' +
      '</div>' +
      '<div class="servicechat-emoji" id="emoji-button">' +
      '<?xml version="1.0" encoding="iso-8859-1"?>\n' +
      '<svg version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px"\n' +
      '\t viewBox="0 0 368 368" style="enable-background:new 0 0 368 368;" xml:space="preserve">\n' +
      '<g>\n' +
      '\t<g>\n' +
      '\t\t<g>\n' +
      '\t\t\t<path fill="#939395" d="M261.336,226.04c-3.296-2.952-8.36-2.664-11.296,0.624C233.352,245.312,209.288,256,184,256\n' +
      '\t\t\t\tc-25.28,0-49.352-10.688-66.04-29.336c-2.952-3.288-8-3.576-11.296-0.624c-3.296,2.944-3.568,8-0.624,11.296\n' +
      '\t\t\t\tC125.76,259.368,154.176,272,184,272c29.832,0,58.248-12.64,77.96-34.664C264.904,234.04,264.624,228.984,261.336,226.04z"/>\n' +
      '\t\t\t<path fill="#939395" d="M184,0C82.544,0,0,82.544,0,184s82.544,184,184,184s184-82.544,184-184S285.456,0,184,0z M184,352\n' +
      '\t\t\t\tc-92.64,0-168-75.36-168-168S91.36,16,184,16s168,75.36,168,168S276.64,352,184,352z"/>\n' +
      '\t\t\t<path fill="#939395" d="M248,128c-22.056,0-40,17.944-40,40c0,4.416,3.584,8,8,8c4.416,0,8-3.584,8-8c0-13.232,10.768-24,24-24s24,10.768,24,24\n' +
      '\t\t\t\tc0,4.416,3.584,8,8,8c4.416,0,8-3.584,8-8C288,145.944,270.056,128,248,128z"/>\n' +
      '\t\t\t<path fill="#939395"d="M144,168c0,4.416,3.584,8,8,8s8-3.584,8-8c0-22.056-17.944-40-40-40c-22.056,0-40,17.944-40,40c0,4.416,3.584,8,8,8\n' +
      '\t\t\t\ts8-3.584,8-8c0-13.232,10.768-24,24-24S144,154.768,144,168z"/>\n' +
      '\t\t</g>\n' +
      '\t</g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '</svg>\n</div>' +
      '<div class="sf-send">' + sendSvg + '</div>' +
      '</div>' +
      '</div>' +
      '</div>' +
      '</div>' +
      '<style>' +
      customCSS +
      'div#servicechat-toggle.hexagon:before { border-bottom: 17.32px solid ' + cH.color1 + ' !important;}' +
      'div#servicechat-toggle.hexagon:after { border-top: 17.32px solid ' + cH.color1 + ' !important;}' +
      '.sf-stripe-interaction button{background-color: ' + cH.color1 + ' !important}' +
      '.sf-faq {\n' +
      '  box-shadow:\n' +
      '      rgba(0, 0, 0, 0.1) 0px 4px 7px 0px,\n' +
      '      rgba(0, 0, 0, 0.1) 0px 1px 2px 0px,\n' +
      '      ' + cH.color1 + ' 0px 2px 0px 0px inset;\n' +
      '}' +
      counterColors +
      darkButton +
      '</style>' +
      chatPushHTML +
      '<div id="servicechat-toggle" style="background-color:' + cH.color1 + '; ' + chatLogoAsButton + '" class="servicechat-toggle ' + hexagon + '">' + oneNew + '</div>' +
      sfCloseForever;


    var div = document.getElementById('servicechat-inline');

    div.insertAdjacentHTML('beforeend', html);
    div.style.display = 'none';

    var emojiButton = document.querySelector("#emoji-button");
    if(emojiButton){
      emojiButton.addEventListener("mouseover", function() {
        if (typeof EmojiButton === "function") {
          startEmojis();
        } else {
          loadScript2(
            "https://cdn.jsdelivr.net/npm/emoji-button@latest/dist/index.min.js",
            startEmojis
          );
        }
      });
    }

    function startEmojis() {
      var emojiButton = document.querySelector("#emoji-button");
      if(emojiButton.classList.contains('emoji-triggered')){
      } else {
        var picker = new EmojiButton({
          rootElement: document.getElementById("servicechat")
        });
        picker.on("emoji", function(emoji) {
          document.getElementById("servicechat-composer").value += emoji;
        });
        emojiButton.addEventListener("click", function() {
          picker.pickerVisible
            ? picker.hidePicker()
            : picker.showPicker(emojiButton);
        });

        emojiButton.classList.add('emoji-triggered');
      }
    }

    if(document.querySelector('.netstory-loader')){
      sC.loadFullPage();
    } if(div.classList.contains('fullpage')){
      if (div.classList.contains('init') !== true) {
        if (typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
          var qNumber = parseInt(window.sfDynamicStartPage) - 1;
          sC.toggleServiceChat('conversation', parseInt(qNumber));
          sC.nextQuestion();
        }
        else {
          setTimeout(function () {
            sC.toggleServiceChat('normal', 0);
          }, 500);
        }
        div.classList.add('init');
      }
    } else if(div.classList.contains('inline')) {
      if (isInViewport(div) && div.classList.contains('init') !== true) {
        if (typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
          var qNumber = parseInt(window.sfDynamicStartPage) - 1;
          sC.toggleServiceChat('conversation', parseInt(qNumber));
          sC.nextQuestion();
        }
        else {
          setTimeout(function () {
            sC.toggleServiceChat('normal', 0);
          }, 500);
        }
        div.classList.add('init');
      }
      window.addEventListener('scroll', function (event) {
        if (isInViewport(div) && div.classList.contains('init') !== true) {
          div.classList.add('init');
          if (typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
            var qNumber = parseInt(window.sfDynamicStartPage) - 1;
            sC.toggleServiceChat('conversation', parseInt(qNumber));
            sC.nextQuestion();
          }
          else {
            setTimeout(function () {
              sC.toggleServiceChat('normal', 0);
            }, 500);
          }
        }
      });
    }

    var tx = document.getElementById('servicechat-composer');

    tx.addEventListener("input", OnInput, false);

    function OnInput() {
      if (this.scrollHeight < 60) {
        this.classList.remove('row-1');
      }
      if (this.scrollHeight > 60) {
        this.classList.add('row-1');
      }
    }

    var pushClose = document.querySelector('.serviceform-chat-push-close');
    if (pushClose) {
      pushClose.addEventListener('click', function () {
        var sfChatPush = document.querySelector('.sf-chat-push');
        if (sfChatPush) {
          sC.options.serviceChatAnswers.answers.actions.push('closing_push_popup');
          sC.sfRemoveElement(sfChatPush);
        }
      });
    }

    var serviceChatToggle = document.querySelector(".sf-chat-push-header");
    if (serviceChatToggle) {
      // Submit.
      serviceChatToggle.addEventListener('click', function (e) {
        if (e.target.classList.contains('sf-confirm-close-me')) {
          return false;
        }
        if (e.target.classList.contains('sf-click-cta-button')){
          var qNumber = 0;

          if (typeof sC.options.cH.ctaButtonJump !== 'undefined') {
            qNumber = parseInt(sC.getPageFromId(sC.options.cH.ctaButtonJump));
          }

          sC.newStatistics('interaction','');

          var qNumber = parseInt(qNumber)-1;
          sC.options.serviceChatAnswers.page = qNumber;

          sC.toggleServiceChat('conversation', qNumber);
          sC.nextQuestion();
          return false;
        }
        else {
          if (typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
            var qNumber = parseInt(window.sfDynamicStartPage) - 1;
            sC.toggleServiceChat('conversation', parseInt(qNumber));
            sC.nextQuestion();
          }
          else {
            sC.toggleServiceChat('normal', 0);
          }
        }
      });
    }

    var sfCloseForever = document.getElementById("servicechat-close-forever");
    if (sfCloseForever) {
      // Submit.
      sfCloseForever.addEventListener('click', function () {
        sC.sfChatSetCookie('sf-closed-forever', '1', 1);
        var sf = document.getElementById('servicechat');
        sC.sfRemoveElement(sf);
      });
    }

    var serviceChatToggle = document.getElementById("servicechat-toggle");
    if (serviceChatToggle) {
      // Submit.
      serviceChatToggle.addEventListener('click', function () {
        if (typeof window.sfDynamicStartPage !== 'undefined' && window.sfDynamicStartPage !== '' && 200 > parseInt(window.sfDynamicStartPage) > 0) {
          var qNumber = parseInt(window.sfDynamicStartPage) - 1;
          sC.toggleServiceChat('conversation', parseInt(qNumber));
          sC.nextQuestion();
        }
        else {
          sC.toggleServiceChat('normal', 0);
        }
      });
    }

    var sfConversation = document.getElementsByClassName('sf-conversation');
    if (sfConversation) {
      for (var i = 0; i < sfConversation.length; i++) {
        sfConversation[i].addEventListener('click', function () {

          var qNumber = 0;

          if (typeof cH.chatPushSettingsQuestion !== 'undefined') {
            qNumber = parseInt(sC.getPageFromId(cH.chatPushSettingsQuestion));
          }

          if (typeof cH.chatPushSettings !== 'undefined') {
            if (typeof cH.chatPushSettings.question !== 'undefined') {
              qNumber = parseInt(sC.getPageFromId(cH.chatPushSettings.question) - 1);
            }
          }

          sC.options.serviceChatAnswers.page = parseInt(qNumber);

          sC.toggleServiceChat('conversation', parseInt(qNumber));
          var option = this.getAttribute('cid');
          sC.userSelectedOption('skip', qNumber, option, this.textContent);
        });
      }
    }

    /*var serviceformTelePhone = document.querySelector(".serviceform-phone");
    if (serviceformTelePhone) {
      // Submit.
      serviceformTelePhone.addEventListener("click", function() {
        sC.refreshServiceChat();
      });
    }*/

    var serviceformRefresh = document.querySelector(".serviceform-refresh");
    if (serviceformRefresh) {
      // Submit.
      serviceformRefresh.addEventListener('click', function () {

        if (sC.options.serviceChatAnswers.live === 1) {
          var r = confirm(sC.gT("Are you sure you want to restart your chat? This will end your livechat."));

          if (r == true) {
            sC.refreshServiceChat();
          }
        } else {
          sC.refreshServiceChat();
        }

      });
    }

    var serviceformClose = document.querySelector(".serviceform-close");
    if (serviceformClose) {
      // Submit.
      serviceformClose.addEventListener('click', function () {
        sC.newStatistics('close');
        sC.toggleServiceChat('normal', 0);
      });
    }

    document.querySelector('.sf-send').addEventListener('click', function () {
      var textarea = document.querySelector('.servicechat-composer textarea');
      var answer = textarea.value;
      textarea.value = '';

      if (answer.trim() !== '') {
        sC.processUserAnswer(answer);
      }
    });

    document.querySelector(".servicechat-composer textarea")
      .addEventListener("keydown", function (event) {
        if (this.value.length > 2) {
          document.querySelector('.sf-send').classList.add('sf-ready-to-send');
        }
        else {
          document.querySelector('.sf-send').classList.remove('sf-ready-to-send');
        }
        if (event.keyCode === 13) {
          event.preventDefault();
          if (!event.shiftKey) {
            var textarea = document.querySelector('.servicechat-composer textarea');
            var answer = textarea.value;
            textarea.classList.remove('row-1');

            textarea.value = '';

            if (answer.trim() !== '') {
              sC.processUserAnswer(answer);
            }
          }
        }

        var cH = sC.options.cH;
        var page = parseInt(sC.options.serviceChatAnswers.page);
        if(page !== 0){
          page = page - 1;
        }
        var type = cH.questions[page].type;
        if (typeof cH.knowledgeBase !== 'undefined' && cH.knowledgeBase === '1' && typeof cH.knowledgeBaseDisplay !== 'undefined' && cH.knowledgeBaseDisplay === '1') {
          if (type !== 'textfields' && type !== 'addsearch' && type !== 'search' && type !== 'payment') {
            var string = this.value;
            if (string.length > 4) {
              if (window.sfKnowledgeBaseProcess !== 1) {
                var behaviors = sC.searchKnowledgeBase(this.value, 'normal');
              }
            }
            else {
              if (string !== '') {
                sfInlineWrapper.querySelector('#servicechat-parts-outer-clearfix').innerHTML = '';
              }
            }
          }
        }

      });

    sC.pushDelay();

    var lastScrollTop = 0;
    var scrollable = document.getElementById('servicechat-parts');


    window.onbeforeunload = function () {
      sC.options.serviceChatAnswers.online = 0;
      sC.postStatistics();
      if (sC.sfDevModeOff) {
        if (typeof sC.options.cH.submitIncomplete !== 'undefined' && sC.options.cH.submitIncomplete === '1') {
          if (typeof sC.options.serviceChatAnswers.customerEmail !== 'undefined' && sC.options.serviceChatAnswers.customerEmail !== '' || typeof sC.options.serviceChatAnswers.customerPhone !== 'undefined' && sC.options.serviceChatAnswers.customerPhone !== '') {
            sC.postJsonSubmit();
          }
        }
      }
    };

    document.getElementById('servicechat-inline').addEventListener('mouseover', function () {

      var sec = 0;
      setInterval(function () {
        sec++;
        sC.options.serviceChatAnswers.seconds = sec;
        sC.stats.seconds = sec;

        if (sC.options.serviceChatAnswers.droppedOnQuestion !== sC.options.serviceChatAnswers.page) {
          sC.postStatistics();
        }
      }, 1000);

      document.getElementById('servicechat-inline').addEventListener('click', function () {
        sC.options.serviceChatAnswers.clicks = sC.options.serviceChatAnswers.clicks + 1;
      });
    }, {once: true});

    // Load builder.
    if (window.location.href.indexOf("edit-servicechat") != -1) {
      if (window.sfBuilderInit !== 1) {
        window.sfBuilderInit = 1;

        window.jsonObject = {};
        window.jsonObject.serviceform = sC.options.cH;

        initBuilder();
      }
    }

    if (cH.loadLastSessions === '1') {
      sC.loadLastSession();
    }

  },
  // Helpers
  searchArray: function (nameKey, myArray) {
    for (var i = 0; i < myArray.length; i++) {
      if (myArray[i].name === nameKey) {
        return myArray[i].value;
      }
    }
  },
  processFileZoom: function (element) {
    var images = element.getElementsByTagName('img');
    if (images) {
      for (var i = 0; i < images.length; i++) {
        var outer = images[i].outerHTML;
        images[i].outerHTML = '<div class="sf-image-pop-background">' +
          '<div class="sf-image-pop">' + images[i].outerHTML + '</div>' +
          '</div>' +
          '<style>' +
          '.sf-popped-up .sf-image-pop img {' +
          'position: fixed;left: 50%;padding:20px;top: 50%;max-height: 75vh; width: auto !important;transform: translate(-50%, -50%);' +
          '}' +
          '.sf-image-pop-background.sf-popped-up {' +
          'position: fixed;left: 0;height: 100%;top: 0;width: 100%;background: rgba(0,0,0,0.5) !important;' +
          '}' +
          '</style>';
      }

      var sfPop = document.getElementsByClassName('sf-image-pop-background');
      for (var k = 0; k < images.length; k++) {
        sfPop[k].addEventListener('click', function () {
          if (this.classList.contains('sf-popped-up')) {
            this.classList.remove('sf-popped-up');
          }
          else {
            this.classList.add('sf-popped-up');
          }
        });
      }
    }
  },
  processUserAnswer: function (answer) {
    if (sC.options.serviceChatAnswers.live !== 1) {

      var cH = sC.options.cH;
      var page = parseInt(sC.options.serviceChatAnswers.page) - 1;
      var type = cH.questions[page].type;

      if (type === 'payment') {
        alert(sC.gT('To move forwards we would need you to process the payment.'));
        return;
      }

      if(cH.questions[page].options[0].fieldType === 'phoneValidate'){
        intTel[0].setNumber(answer);
        sC.addAnswer(intTel[0].getNumber());
      } else {
        sC.addAnswer(answer);
      }

      var continueSubmissions = 1;
      if (typeof cH.continueSubmissions !== 'undefined') {
        continueSubmissions = 0;
      }

      if (sC.options.serviceChatAnswers.submitted === 1 && continueSubmissions !== 0) {
        sC.addAdminAnswer(sC.gT('I already sent the discussion above to our team. Would you like to start over?'));

        var html = '<div class="servicechat-admin-option delay" style="opacity:0">' +
          '<div class="servicechat-admin-options" question="' + sC.options.serviceChatAnswers.page + '">' + sC.gT('Yes, please') + '</div>' +
          '</div>';

        var div = document.getElementById('servicechat-parts-inner');
        div.insertAdjacentHTML('beforeend', html);

        sC.initDelay();

        var refresh = document.querySelector('.servicechat-admin-options');
        if (refresh) {
          refresh.addEventListener('click', function () {
            sC.refreshServiceChat();
          });
        }
      }
      else {
        if (typeof cH.botType !== 'undefined' && cH.botType !== '0') {
          var relatedOption = sC.checkForRelatedOption(answer);
          if (relatedOption !== 'false') {
            sC.userSelectedOption('normal', sC.options.serviceChatAnswers.page - 1, relatedOption, answer);
          }
          else {
            sC.addAdminAnswer(sC.humanBehaviors(answer));
            sC.addAdminAnswer('You can continue the discussion we started below if you wish.');
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
          }
        }
        else {
          var relatedOption = 'false';
          if (type !== 'textfields' && type !== 'addsearch' && type !== 'search' && type !== 'payment') {
            relatedOption = sC.checkForRelatedOption(answer);
            sfInlineWrapper.querySelector('#servicechat-parts-outer-clearfix').innerHTML = '';
          }

          if (relatedOption !== 'false') {
            sC.userSelectedOption('dynamic', sC.options.serviceChatAnswers.page - 1, relatedOption, answer);
          }
          else {
            var cH = sC.options.cH;

            if (type !== 'textfields' && type !== 'addsearch' && type !== 'search' && type !== 'payment') {

              var summaryItemAnswer = {
                "answer": [{
                  "answer": answer,
                  "amount": ''
                }],
                "label": 'Open question',
                "question": sC.options.serviceChatAnswers.page,
                "price": ''
              }

              sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

              // Language processing.
              var trimmedAnswer = sC.trimString(answer, 'normal');
              var pekka = 0;
              if (pekka) {

              } else {
                var botAnswer = sC.humanBehaviors(trimmedAnswer);
                var yes = 0;
                var botAnswerString = '';
                if (botAnswer) {

                  botAnswerString = botAnswer.answer;

                  if(botAnswerString !== '') {
                    setTimeout(function () {
                      sC.addAdminAnswer(botAnswerString);
                    }, 1000);
                  }

                  if (!typeof botAnswer.jump !== 'undefined' && botAnswer.jump !== '') {
                    var jump = sC.getPageFromId(botAnswer.jump);
                    setTimeout(function () {
                      sC.options.serviceChatAnswers.page = sC.getPageFromId(jump);
                      sC.addAdminAnswer(sC.options.cH.questions[jump].title);
                      sC.addUserOptions(jump);
                    }, 2000);
                  }
                  else {
                    setTimeout(function () {
                      var defaultQuestion = 0;
                      if (typeof sC.options.cH.nlpDefaultQuestion !== 'undefined') {
                        defaultQuestion = sC.options.cH.nlpDefaultQuestion;
                      }
                      sC.options.serviceChatAnswers.page = sC.getPageFromId(defaultQuestion);
                      sC.options.serviceChatAnswers.jump = '';
                      sC.nextQuestion();
                    }, 2000);
                  }

                }
                else {
                  sC.addAdminAnswer(sC.gT('Sorry, I didnt understand your question.'));
                  sC.options.serviceChatAnswers.failedAnswers.push(answer);
                  sC.newStatistics('failed',answer);
                  sC.pushToFailedQuestions(answer);

                  var failureQuestion = 0;
                  if (typeof sC.options.cH.nlpFailureQuestion !== 'undefined') {
                    failureQuestion = sC.options.cH.nlpFailureQuestion;
                  }

                  setTimeout(function () {
                    if (typeof cH.knowledgeBase !== 'undefined' && cH.knowledgeBase === '1') {
                      if (typeof cH.nlpSupportUrl !== 'undefined' && cH.nlpSupportUrl !== '') {
                        sC.addAdminAnswer(sC.gT('I found the closest answers from our') + ' <a href="' + sC.options.cH.nlpSupportUrl + '">' + sC.gT('online guides') + '.</a>');
                      }
                      setTimeout(function () {
                        sC.searchKnowledgeBase(answer, 'inline');
                      }, 1000);
                      setTimeout(function () {
                        sC.options.serviceChatAnswers.page = sC.getPageFromId(failureQuestion);
                        sC.options.serviceChatAnswers.jump = '';
                        sC.nextQuestion();
                      }, 2000);
                    }
                    else {
                      setTimeout(function () {
                        sC.options.serviceChatAnswers.page = sC.getPageFromId(failureQuestion);
                        sC.options.serviceChatAnswers.jump = '';
                        sC.nextQuestion();
                      }, 2000);
                    }
                  }, 1000);
                }
              }

            }
            else {
              sC.userSelectedOption('normal', sC.options.serviceChatAnswers.page - 1, 'false', answer);
            }
          }
        }
      }
    }
    else {
      sC.addAnswer(answer);
      sC.sendLiveChatAnswer(answer);
    }
  },
  sendLiveChatAnswer: function (answer) {
    var xhr = new XMLHttpRequest();
    var test = {
      'cid': sC.options.serviceChatAnswers.cid,
      'message': answer,
      'user': 1
    }

    var xhr = new XMLHttpRequest();
    var json = JSON.stringify(test);

    var url = 'https://apiv2.serviceform.com/conversations/online/add-chat-message';

    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4 && xhr.status === 200) {
        var json = JSON.parse(xhr.responseText);
      }
    };
    xhr.send(json);

  },
  pushToFailedQuestions: function (text) {
    var cH = sC.options.cH;
    var nid = cH.nid;

    // Add unanswered question.
    var test = {
      'uid': cH.uid,
      'nid': nid,
      'text': text,
      'language': cH.language,
      'website': sC.options.serviceChatAnswers.website
    }

    var xhr = new XMLHttpRequest();
    var json = JSON.stringify(test);
    var url = 'https://apiv2.serviceform.com/unanswered-questions/add';

    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.send(json);

    var url = 'https://hooks.zapier.com/hooks/catch/3914789/o1uskzm/';
    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.send(json);
  },
  gT: function (string) {
    var language = 'en';

    if (typeof this.options.cH.language !== 'undefined') {
      language = this.options.cH.language;
    }

    var translations = '';
    if (language === 'fi') {

      translations = [
        {
          name: "Could you please enter only numbers",
          value: "Antaisitko numeron muodossa esim: 12"
        },
        {name: "Post code requires more than four digits.", value: "Antaisitko postinumeron jossa on 5 kirjainta."},
        {
          name: "Sorry, I didnt understand your question.",
          value: "Valitettavasti en ymmärtänyt kysymystäsi."
        },
        {name: "No live chat agents available right now", value: "Valitettavasti tiimimme ei ole saatavilla juuri nyt."},
        {
          name: "has joined the chat",
          value: "liittyi keskusteluun"
        },
        { name: "While waiting, could I get your email in case we get disconnected?",
          value: "Saisinko lyhyesti viestisi ja sähköpostisi odottaessa henkilöä tiimistämme?"
        },
        {
          name: "Choose the most suitable options",
          value: "Valitse sopivimmat vaihtoehdot"
        },
        {
          name: "Could you please enter your post code with only numbers",
          value: "Voisitko antaa postinumerosi uudestaan ilman kirjaimia. Esim. 01640"
        },
        {
          name: "Please add a valid phone number",
          value: "Voisitko laittaa puhelinnumerosi muodossa: 0451138021 tai +358451138021 niin se menee varmasti perille."
        },
        {
          name: "Could I get a valid email first?",
          value: "Okei! Saisinko kuitenkin ensin sähköpostiosoitteesi?"
        },
        {name: "Step", value: "Kysymys "},
        {name: "Skipped this question", value: "Ohitettu kysymys"},
        {name: "Skip", value: "Ohita"},
        {name: "of", value: "/"},
        {
          name: "I already sent the discussion above to our team. Would you like to start over?",
          value: "Lähetin jo keskustelumme tiimillemme. Haluaisitko aloittaa uuden keskustelun?"
        },
        {name: "Yes, please", value: "Kyllä kiitos"},
        {name: "I found ", value: "Löysin "},
        {
          name: " results that could suit you. Here are the first four.",
          value: " tulosta jotka voisivat auttaa sinua. Tässä on ensimmäiset neljä."
        },
        {
          name: " results that could suit you.",
          value: " tulosta jotka voisivat auttaa sinua."
        },
        {
          name: "Unfortunately I couldnt find anything.",
          value: "Valitettavasti en löytänyt tällä hakusanalla mitään."
        },

        {name: "Show more", value: "Näytä lisää"},
        {name: "Lets talk!", value: "Ota yhteyttä!"},
        {name: "Let us know what you want", value: "Tee nopea kysely"},
        {name: "Submit", value: "Lähetä"},
        {name: "Send", value: "Lähetä"},
        {name: "Closest answers", value: 'Lähimmät vastaukset'},
        {name: "Load more", value: 'Lataa lisää'},
        {name: "Continue", value: "Jatka"},
        {name: "Results", value: "Tulokset"},
        {
          name: "To move forwards we would need you to process the payment.",
          value: "Jatkaaksesi eteenpäin pyytäisimme sinua suorittamaan maksun."
        },
        {name: "Full name", value: "Koko nimesi"},
        {name: "Your email", value: "Sähköposti"},
        {name: "What are you after?", value: "Kyselysi"},
        {name: "Customer reviews", value: "Asiakkaiden arvostelut"},
        {name: "Back", value: "Takaisin"},
        {name: "https://app.serviceform.com", value: "https://serviceform.fi"},
        {
          name: "Best chatbot building platform",
          value: "Suomalaiset chatbotit helposti"
        },
        {name: "We run on Serviceform", value: "Suomalaiset chatbotit"},
        {
          name: "Premium chatbots provided by Serviceform",
          value: "Chatbotit yrityksille tarjoaa Serviceform"
        },
        {name: "Write a reply", value: "Kirjoita vastaus"}
      ];

      var found = sC.searchArray(string, translations);
      if (typeof found !== 'undefined') {
        string = found;
      }
    }


    if (language === 'se') {

      translations = [
        {name: "Choose the most suitable options", value: "Välj de mest lämpliga alternativen"},
        {name: "Skipped this question", value: "Hoppade över denna fråga"},
        {name: "Skip", value: "Hoppa över"},
        {name: "of", value: "/"},
        {name: "Submit", value: "Skicka"},
        {name: "Send", value: "Skicka"},
        {name: "Continue", value: "Fortsätt"},
        {name: "Back", value: "Tillbaka"},
        {name: "Write a reply", value: "Skriv ett svar"}
      ];

      var found = sC.searchArray(string, translations);
      if (typeof found !== 'undefined') {
        string = found;
      }
    }

    if (language === 'fr') {
      translations = [
        {
          name: "Could I get a valid email first?",
          value: "Pourriez-vous nous donner un email valide?"
        },

        {name: "No live chat agents available right now", value: "Aucun agent disponible"},
        {name: "Skipped this question", value: "Question passée"},
        {name: "Skip", value: "Passer"},
        {name: "Submit", value: "Envoyer"},
        {name: "Send", value: "Envoyer"},
        {name: "Continue", value: "Envoyer"},
        {name: "Full name", value: "Nom complet"},
        {name: "Your email", value: "Votre email"},
        {name: "Write a reply", value: "Écrire une réponse"}
      ];

      var found = sC.searchArray(string, translations);
      if (typeof found !== 'undefined') {
        string = found;
      }
    }

    if (language === 'ca') {
      translations = [
        {
          name: "Could I get a valid email first?",
          value: "Pots deixar-nos una adreça de email vàlida?"
        },
        {name: "Click to upload (Max 1MB)", value: "ENVIAR DOCUMENT (MAX 1 MB)"},

        {name: "Step", value: "Paso"},
        {
          name: "Skipped this question",
          value: "No ha contestat aquesta pregunta"
        },
        {name: "Skip", value: "Saltar"},
        {
          name: "To move forwards we would need you to process the payment.",
          value: "Empleneu el pagament primer."
        },
        {name: "Results", value: "Resultados"},

        {name: "of", value: "/"},
        {
          name: "Please add a valid phone number",
          value: "Afegiu un número de telèfon correcte"
        },
        {name: "Lets talk!", value: "¡Hablemos!"},
        {name: "Submit", value: "Enviar"},
        {name: "Send", value: "Enviar"},
        {name: "Continue", value: "Continuar"},
        {name: "Full name", value: "Nombre"},
        {name: "Your email", value: "Tu email"},
        {name: "Back", value: "Enrere"},
        {name: "Write a reply", value: "Escriu una resposta"}
      ];

      var found = sC.searchArray(string, translations);
      if (typeof found !== 'undefined') {
        string = found;
      }
    }

    if (language === 'pt') {
      translations = [
        {name: "Are you sure you want to restart your chat? This will end your livechat.", value: "Tem a certeza que quer começar de novo? A conversa do live chat desaparecerá"},
        {
          name: "Could you please enter your post code with only numbers",
          value: "Por favor, introduza um código postal só com números"
        },
        {name: "Click to upload (Max 1MB)", value: "ENVIAR DOCUMENTO (MAX 1 MB)"},
        {name: "Results", value: "Resultados"},
        {name: "No live chat agents available right now", value: "Não há agentes disponíveis neste momento"},
        {name: "Sorry, I didnt understand your question.", value: "Desculpe, não percebi a pergunta"},
        {name: "Choose the most suitable options", value: "Escolha as opções mais adequadas"},
        {name: "options", value: "opções"},
        {name: "Could I get a valid email first?", value: "Necessito de um email válido"},
        {name: "Step", value: "Passo"},
        {name: "To move forwards we would need you to process the payment.", value: "Para avançar, por favor finalize o pagamento."},
        {name: "Please add a valid phone number", value: "Por favor, introduza um numero de telefone válido"},
        {name: "Skipped this question", value: "Saltou esta pergunta"},
        {name: "Skip", value: "Saltar"},
        {name: "of", value: "/"},
        {name: "Closest answers", value: "Respostas mais relevantes"},
        {name: "I found the closest answers from our", value: "Encontrei as respostas que melhor podem ajudar"},
        {name: "Load more", value: "Ver mais"},
        {name: "online guides", value: "guias online"},
        {name: "Lets talk!", value: "Vamos falar!"},
        {name: "Submit", value: "Enviar"},
        {name: "Yes, please", value: "Sim, por favor"},
        {name: "I already sent the discussion above to our team. Would you like to start over?", value: "Enviei a conversa à nossa equipa. Quer começar de novo?"},
        {name: "Send", value: "Enviar"},
        {name: "I found ", value: "Encontrei"},
        {name: " results that could suit you. Here are the first four.", value: "resultados que podem interessar. Aqui estão os principais. "},
        {name: " results that could suit you.", value: " resultados que podem interessar. "},
        {name: "Unfortunately I couldnt find anything.", value: "Infelizmente não consegui encontrar nada."},
        {name: "Continue", value: "Continuar"},
        {name: "Full name", value: "Nome completo"},
        {name: "Your email", value: "E-mail"},
        {name: "Back", value: "Retroceder"},
        {name: "Write a reply", value: "Escreva uma resposta"},
        {name: "While waiting, could I get your email in case we get disconnected?", value: "Caso a ligação seja interrompida, pode indicar o seu email para voltarmos a contactar?"}
      ];
      var found = sC.searchArray(string, translations);
      if (typeof found !== 'undefined') {
        string = found;
      }
    }

    if (language === 'es') {
      translations = [
        {name: "Are you sure you want to restart your chat? This will end your livechat.", value: "¿Seguro que quieres empezar de nuevo? La conversación en el chat en vivo desaparecerá"},
        {
          name: "Por favor, introducir un código postal solo con números",
          value: "Voisitko antaa postinumerosi uudestaan ilman kirjaimia. Esim. 01640"
        },
        {name: "Post code requires more than four digits.", value: "El Código Postal requiere más de 4 dígitos."},
        {name: "Results", value: "Resultados"},
        {name: "No live chat agents available right now", value: "No hay agentes disponibles en este momento"},
        {name: "Click to upload (Max 1MB)", value: "SUBIR DOCUMENTO (MAX 1MB)"},
        {name: "Sorry, I didnt understand your question.", value: "Los humanos no me han entrenado todavía a responder esta pregunta."},
        {name: "Choose the most suitable options", value: "Elige las opciones más adecuadas"},
        {name: "options", value: "opciones"},
        {name: "Could I get a valid email first?", value: "Necesito un email válido :)"},
        {name: "Step", value: "Paso"},
        {name: "Please add a valid phone number", value: "Necesito un número de teléfono válido :)"},
        {name: "Skipped this question", value: "Pregunta saltada"},
        {name: "Skip", value: "Saltar"},
        {name: "To move forwards we would need you to process the payment.", value: "Para continuar, por favor finalice el pago."},
        {name: "of", value: "/"},
        {name: "Closest answers", value: "Sugerencias"},
        {name: "I found the closest answers from our", value: "He encontrado estas respuestas que más te pueden ayudar"},
        {name: "Load more", value: 'Ver más'},
        {name: "online guides", value: "de nuestra guía online"},
        {name: "Lets talk!", value: "¡Hablemos!"},
        {name: "Submit", value: "Enviar"},
        {name: "Yes, please", value: "Sí, por favor"},
        {name: "I already sent the discussion above to our team. Would you like to start over?", value: "Ya he enviado nuestra conversación al equipo y se pondrán en contacto lo antes posible. 🙂 ¿Te gustaría comenzar la conversación de nuevo?"},
        {name: "Send", value: "Enviar"},
        {name: "I found ", value: "He encontrado"},
        {name: " results that could suit you. Here are the first four.", value: " resultados que pueden ser interesantes. Aquí están los más destacados."},
        {name: " results that could suit you.", value: " resultados que pueden ser interesantes. Aquí están los más destacados."},
        {name: "Unfortunately I couldnt find anything.", value: "Lamentablemente no pude encontrar nada."},
        {name: "Continue", value: "Continuar"},
        {name: "Full name", value: "Nombre y apellidos"},
        {name: "Your email", value: "Email"},
        {name: "Back", value: "Atrás"},
        {name: "Write a reply", value: "Escribe aqui"},
        {name: "While waiting, could I get your email in case we get disconnected?", value: "En caso de que nos desconectemos, ¿en qué correo electrónico podríamos ponernos en contacto?"}
      ];

      var found = sC.searchArray(string, translations);
      if (typeof found !== 'undefined') {
        string = found;
      }
    }
    return string;
  },
  zapierPost: function () {
    var cH = sC.options.cH;

    if (typeof cH.zapier !== 'undefined') {
      if (cH.zapier !== '') {
        var xhr = new XMLHttpRequest();

        sC.options.serviceChatAnswers['resultsHTML'] = '';
        sC.options.serviceChatAnswers['resultsText'] = '';

        // Readable open answers
        var items = sC.options.serviceChatAnswers.summaryItems;
        for (var i = 0; i < items.length; i++) {
          if (typeof items[i].label !== 'undefined' && typeof items[i].answer !== 'undefined' && typeof items[i].answer[0].answer !== 'undefined') {
            sC.options.serviceChatAnswers[items[i].label] = items[i].answer[0].answer;

            sC.options.serviceChatAnswers['resultsText'] += items[i].label+ ': ';
            sC.options.serviceChatAnswers['resultsText'] += items[i].answer[0].answer + ', ';

            sC.options.serviceChatAnswers['resultsHTML'] += '<b>'+items[i].label+'</b> ';
            sC.options.serviceChatAnswers['resultsHTML'] += items[i].answer[0].answer + '<br>';
          }
        }

        var json = JSON.stringify(sC.options.serviceChatAnswers);
        var zapier_hook = cH.zapier;

        var answers = sfInlineWrapper.getElementsByClassName('sf-question-answer');
        if (answers) {
          for (var i = 0; i < answers.length; i++) {
            sC.options.serviceChatAnswers.zapier[i] = answers[i].innerText;
          }
        }

        if (typeof zapier_hook !== 'undefined') {
          if (zapier_hook !== '') {
            var url = zapier_hook;

            var hooks = url.split(",");
            for (var i = 0; i < hooks.length; i++) {
              var hook = hooks[i].trim();
              xhr.open("POST", hook, true);
              xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
              xhr.send(json);
            }
          }
        }

      }
    }
  },
  getPageFromId: function(id){
    var id = id;
    if(id.length > 4) {
      var questions = sC.options.cH.questions;
      for (var i = 0; i < questions.length; i++) {
        if (questions[i].qid === id) {
          return i;
        }
      }
    } else {
      return id;
    }
  },
  destroyServiceChat: function () {
    var div = sfInlineWrapper.querySelector('#servicechat');
    sC.sfChatSetCookie('sf-session', '', 0.05);
    sC.sfChatSetCookie('sf-livechat-session', '', 0.05);

    div.innerHTML = '';
  },
  postJsonSubmit: function () {
    if(typeof window.serviceChatDynamicWebhook !== 'undefined' && window.serviceChatDynamicWebhook !== ''){
      sC.options.serviceChatAnswers.serviceChatDynamicWebhook = window.serviceChatDynamicWebhook;
    }

    var json = JSON.stringify(sC.options.serviceChatAnswers);
    var cH = sC.options.cH;

    var xhr = new XMLHttpRequest();
    var nid = cH.nid;

    var url = "https://app.serviceform.com/developers/create/submission/" + nid;
    if (cH.whitelabel === 'slt') {
      url = "https://bizchat.slt.lk/developers/create/submission/" + nid;
    } else if (cH.whitelabel === 'addbot') {
      url = "https://app.addbot.io/developers/create/submission/" + nid;
    } else if (cH.whitelabel === 'netstory') {
      url = "https://netstory.io/developers/create/submission/" + nid;
    }
    var dev = 0;
    if (window.location.href.indexOf("dev-servicehire") != -1 ||
      window.location.href.indexOf("dev.netstory") != -1 ||
      window.location.href.indexOf("test-servicehire") != -1) {
      dev = 1;
      var url = "/developers/create/submission/" + nid;
    }

    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4 && xhr.status === 200) {

        dataLayerEnd();

        sC.options.serviceChatAnswers.submitted = 1;
        sC.postStatistics();
        sC.runCustomJs();
        sC.zapierPost();
        sC.newStatistics('submission','');

        var json = JSON.parse(xhr.responseText);
        if (typeof cH.redirect !== 'undefined') {
          if (cH.redirect !== '') {
            setTimeout(function () {
              window.location.href = cH.redirect;
            }, 2000);
          }
        }
      }
    };

    var continueSubmissions = 1;
    if (typeof cH.continueSubmissions !== 'undefined') {
      continueSubmissions = 0;
    }

    if (typeof cH.whitelabel !== 'undefined' && cH.whitelabel === 'netstory') {
      sC.options.serviceChatAnswers.submitted = 1;
      sC.postStatistics();
    }
    if (sC.options.serviceChatAnswers.submitted !== 1 || continueSubmissions === 0) {
      xhr.send(json);
    }
  },
  runCustomJs: function () {
    var customJS = sC.options.cH.customJS;
    if (typeof customJS !== 'undefined') {
      if (customJS !== '') {
        if(sC.checkForJson(customJS)){
          eval(JSON.parse(customJS));
        } else {
          eval(customJS);
        }
      }
    }
  },
  searchKnowledgeBase: function (string, type) {
    window.sfKnowledgeBaseProcess = 1;

    if (typeof window.knowledgeBaseData === 'undefined') {
      var xhr = new XMLHttpRequest();

      var uid = sC.options.cH.uid;

      var url = 'https://app.serviceform.com/load_knowledgebase/' + uid;

      var dev = 0;
      if (window.location.href.indexOf("dev-servicehire") != -1 || window.location.href.indexOf("test-servicehire") != -1) {
        dev = 1;
        url = 'https://dev-servicehire.pantheonsite.io/load_knowledgebase/' + uid;
      }

      xhr.open("POST", url, true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
      xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
          var json = JSON.parse(xhr.responseText);
          window.knowledgeBaseData = json;
          sC.searchKnowledgeBase(string);
        }
      };
      xhr.send(uid);
    }
    else {

      var knowledgeBaseData = window.knowledgeBaseData.content;
      var string = sC.processKnowledgebaseSearch(string);

      var cH = sC.options.cH;
      var title = sC.gT('Closest answers');
      if (type === 'faq') {
        title = 'Most popular questions';
      }

      var knowledge = '';

      if (typeof knowledgeBaseData !== 'undefined') {
        var responses = knowledgeBaseData;
      }
      else {
        responses = [];
      }

      var options = {
        keys: ['content', 'title', 'keywords'],
        includeScore: 1,
        maxPatternLength: 500,
        minMatchCharLength: 6,
        shouldSort: true,
        threshold: 0.6
      };

      var behaviors = [];

      if (typeof Fuse === 'function') {
        var fuse = new Fuse(responses, options);
        behaviors = fuse.search(string);
      }

      var optionsHtml = '';

      var lastTitle = '';
      var realCount = 0;

      for (var i = 0; i < behaviors.length; i++) {
        if (behaviors[i].item.title !== lastTitle) {
          realCount++;
          if (i < 3) {
            var imageClass = '';
            var image = '';
            if (typeof behaviors[i].item.image !== 'undefined' && behaviors[i].item.image !== '') {
              imageClass = 'sf-faq-image';
              image = '<img src="' + behaviors[i].item.image + '">';
            }
            if (type === 'inline') {
              knowledge = knowledge + '<div class="sf-faq-individual ' + imageClass + '">' +
                '<div class="sf-faq-image">' + image + '</div>' +
                '<div class="sf-faq-individual-close"><img src="https://app.serviceform.com/servicechat/close-bot-dark.svg"></div>' +
                '<div class="sf-faq-individual-title">' + behaviors[i].item.title + '</div>' +
                '<div class="sf-faq-individual-content">' + truncate(behaviors[i].item.content) + '</div>' +
                '<div class="sf-faq-individual-full">' + behaviors[i].item.content + '</div>' +
                '</div>';
            }
            else {
              knowledge = knowledge + '<div class="sf-faq-individual ' + imageClass + '">' +
                '<div class="sf-faq-image">' + image + '</div>' +
                '<div class="sf-faq-individual-close"><img src="https://app.serviceform.com/servicechat/close-bot-dark.svg"></div>' +
                '<div class="sf-faq-individual-title">' + behaviors[i].item.title + '</div>' +
                '<div class="sf-faq-individual-full">' + behaviors[i].item.content + '</div>' +
                '</div>';
            }
          }
        }
        lastTitle = behaviors[i].item.title;

      }

      var loadMoreHTML = '';
      if (realCount > 3) {
        loadMoreHTML = '<div class="sf-faq-wrapper-load-more">' + sC.gT('Load more') + '</div>';
      }

      if (type === 'inline') {
        var html = '<div class="sf-faq"><div class="sf-faq-close"><img src="https://app.serviceform.com/servicechat/close-bot-dark.svg"></div>' +
          '<div class="sf-faq-title">' + title + '</div>' +
          '<div class="sf-faq-wrapper">' + knowledge + ' </div>' +
          loadMoreHTML +
          '</div>';
      }
      else {
        var html = '<div class="sf-faq">' +
          '<div class="sf-faq-wrapper">' + knowledge + ' </div>' +
          '</div>';
      }

      if (i >= 1) {
        if (type === 'inline') {
          var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
          div.insertAdjacentHTML('beforeend', html);

          var sfFaqMore = sfInlineWrapper.querySelector('.sf-faq-wrapper-load-more');
          if (sfFaqMore) {
            sfFaqMore.addEventListener('click', function () {
              sC.sfRemoveElement(this);
              var knowledge = '';
              for (var i = 3; i < behaviors.length; i++) {
                if (behaviors[i].item.title !== lastTitle) {
                  if (i < 9) {
                    knowledge = knowledge + '<div class="sf-faq-individual ' + imageClass + '">' +
                      '<div class="sf-faq-image">' + image + '</div>' +
                      '<div class="sf-faq-individual-close"><img src="https://app.serviceform.com/servicechat/close-bot-dark.svg"></div>' +
                      '<div class="sf-faq-individual-title">' + behaviors[i].item.title + '</div>' +
                      '<div class="sf-faq-individual-content">' + truncate(behaviors[i].item.content) + '</div>' +
                      '<div class="sf-faq-individual-full">' + behaviors[i].item.content + '</div>' +
                      '</div>';
                  }
                  lastTitle = behaviors[i].item.title;
                }
              }

              var wrapper = sfInlineWrapper.querySelector('.sf-faq-wrapper');
              wrapper.insertAdjacentHTML('beforeend', knowledge);

              individuals();
            });
          }

          var sfFaqClose = sfInlineWrapper.querySelector('.sf-faq-close');
          if (sfFaqClose) {
            sfFaqClose.addEventListener('click', function () {
              sfInlineWrapper.querySelector('#servicechat-parts-outer-clearfix').innerHTML = '';
            });
          }
        }
        else {
          sfInlineWrapper.querySelector('#servicechat-parts-outer-clearfix').innerHTML = html;
        }
      }

      individuals();

      function individuals() {
        var sfFaqIndividual = sfInlineWrapper.getElementsByClassName('sf-faq-individual');
        if (sfFaqIndividual) {
          for (var i = 0; i < sfFaqIndividual.length; i++) {
            sfFaqIndividual[i].addEventListener('click', function () {
              this.classList.add('sf-faq-open');
              sC.scrollToTopOfChat();
            });
          }
        }

        var sfFaqIndividualClose = sfInlineWrapper.getElementsByClassName('sf-faq-individual-close');
        if (sfFaqIndividualClose) {
          for (var i = 0; i < sfFaqIndividualClose.length; i++) {
            sfFaqIndividualClose[i].addEventListener('click', function () {
              this.parentElement.classList.remove('sf-faq-open');

              if (!e) {
                var e = window.event;
              }
              e.cancelBubble = true;
              if (e.stopPropagation) {
                e.stopPropagation();
              }
            });
          }
        }
      }

      function truncate(input) {
        if (input.length > 125) {
          input = input.substring(0, 135) + '...';
        }

        return input.replace(/<[^>]*>?/gm, '');
      };
    }

    window.sfKnowledgeBaseProcess = 0;

    var mainElement = sfInlineWrapper.querySelector('.sf-faq');

    sC.processFileZoom(mainElement);
  },
  processKnowledgebaseSearch: function (string) {
    string.trim();

    var string = string.replace('.', "");
    var string = string.replace('.', "");
    var string = string.replace(',', "");
    var string = string.replace(',', "");
    var string = string.replace('“', "");
    var string = string.replace('”', "");

    var string = string.replace('…', '');
    var string = string.replace('...', '');
    var string = string.replace('"', '');
    var string = string.replace('"', '');

    var string = string.replace('!', '');
    var string = string.replace('¡', '');
    var string = string.replace('¿', '');
    var string = string.replace('?', '');
    var string = string.replace('¿', '');

    var string = string.replace('quiero', '');
    var string = string.replace('como', '');
    var string = string.replace('cómo', '');
    var string = string.replace('puedo', '');
    var string = string.replace('qué', '');
    var string = string.replace('por', '');
    var string = string.replace('hola', '');
    var string = string.replace('estas', '');
    var string = string.replace('estas', '');

    string = string.replace(/\s+/g, ' ').trim();

    return string;
  },
  humanBehaviors: function (string) {
    var cH = sC.options.cH;

    if (typeof cH.questionAnswer !== 'undefined') {
      var responses = cH.questionAnswer;
    }
    else {
      responses = [];
    }

    var answer = 0;
    // Loop through responses.
    for (var iq = 0; iq < responses.length; iq++) {
      var value = 0;
      if (responses[iq.question] !== '') {
        var ir = responses[iq].question.split(',');
        for (var iqq = 0; iqq < ir.length; iqq++) {
          var helper = ir[iqq];
          if (helper !== '') {
            helper = helper.trim();
            helper = helper.replace(/^(&nbsp;|<br>)+/, '');

            if (string.indexOf(helper) != -1) {
              value = 1;
              answer = responses[iq];
              return answer;
            }
          }
        }
      }
    }

    return answer;
  },
  sfChatSetCookie: function (cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays * 24 * 60 * 60 * 1000));
    var expires = "expires=" + d.toUTCString();
    document.cookie = cname + "=" + cvalue + ";" + expires + ";path=/";
  },
  sfChatGetCookie: function (cname) {
    var name = cname + "=";
    var ca = document.cookie.split(';');
    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return "";
  },
  postStatistics: function () {
    $a = sC.options.serviceChatAnswers.website;
    if ($a.indexOf('edit') !== -1) {
    }
    else {
      sC.stats.droppedOnQuestion = sC.options.serviceChatAnswers.page;
      sC.options.serviceChatAnswers.droppedOnQuestion = sC.options.serviceChatAnswers.page;
      sC.options.serviceChatAnswers.answers = sC.options.serviceChatAnswers.answers;

      var json = JSON.stringify(sC.options.serviceChatAnswers);

      // Also to API2.
      var xhr = new XMLHttpRequest();
      var url = "https://apiv2.serviceform.com/conversations/online/start-chat";
      xhr.open("POST", url, true);
      xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
      xhr.send(json);
    }
  },
  newStatistics: function (type, input){
    $a = sC.options.serviceChatAnswers.website;
    if ($a.indexOf('edit') !== -1) {}
    else {
      var view = 0;
      var submission = 0;
      var interaction = 0;
      var livechat = 0;
      var run = 0;
      if (type === 'view' && window.sfLoggedView === 0) {
        sC.stats.view = 1;
        window.sfLoggedView = 1;
        run = 1;
      }
      else if (type === 'submission' && window.sfLoggedSubmission === 0) {
        sC.stats.submission = 1;
        window.sfLoggedSubmission = 1;
        sC.stats.submissionSecond = sC.options.serviceChatAnswers.seconds;
        run = 1;
      }
      else if (type === 'interaction' && window.sfLoggedInteraction === 0) {
        sC.stats.interaction = 1;
        sC.stats.interactionSecond = sC.options.serviceChatAnswers.seconds;
        window.sfLoggedInteraction = 1;
        run = 0;
      }
      else if (type === 'livechat') {
        sC.stats.livechat = 1;
        sC.stats.livechatSecond = sC.options.serviceChatAnswers.seconds;
        run = 1;
      }
      else if (type === 'livechatJoined') {
        sC.stats.livechatJoined = 1;
        sC.stats.livechatJoinedSecond = sC.options.serviceChatAnswers.seconds;
        run = 1;
      }
      else if (type === 'livechatNa') {
        window.sfLoggedLivechatJoined = 1;
        sC.stats.livechatNa = 1;
        sC.stats.livechatNaSecond = sC.options.serviceChatAnswers.seconds;
        run = 1;
      }
      else if (type === 'path') {
        if(typeof sC.options.cH.questions[input] !== 'undefined') {
          if (typeof sC.options.cH.questions[input].qid !== 'undefined') {
            input = sC.options.cH.questions[input].qid;

            var sankey = sC.stats.path;
            var items = sankey.length;
            if(items > 0){
              var last = items - 1;
              var lastPage = sC.stats.path[last];
              if(lastPage){
                var sankeyPath = lastPage + '-' + input;
                sC.stats.sankey.push(sankeyPath);
              }
            }

            sC.stats.path.push(input);
          }
          else {
            sC.stats.path.push(input);
          }
        }

        run = 1;
      }
      else if(type === 'paid'){
        sC.stats.paid = 1;
        sC.stats.amount = sC.options.serviceChatAnswers.fullAmount;
        run = 1;
      }
      else if(type === 'close'){
        sC.stats.close = 1;
        run = 1;
      }
      else if(type === 'failed'){
        sC.stats.failedAnswer = 1;
        sC.stats.failedAnswers.push(input);
        run = 1;
      }
      else if(type === 'option'){
        sC.stats.options.push(input);
        run = 0;
      }

      sC.stats.clicks = sC.options.serviceChatAnswers.clicks;

      if (run) {
        var stats = sC.stats;
        if(stats) {
          var data = JSON.stringify(stats);
          var url = "https://zy1ssnfwwl.execute-api.eu-north-1.amazonaws.com/default/statistics-function";
          var xhr = new XMLHttpRequest();
          xhr.open("POST", url);
          xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
          xhr.send(data);
        }
      }
    }
  },
  checkForRelatedOption: function (answer) {
    var answer = sC.trimString(answer);
    var cH = sC.options.cH;

    var page = sC.options.serviceChatAnswers.page - 1;
    var list = cH.questions[page].options;
    if (list) {
      for (var i = 0; i < list.length; i++) {
        var optionAnswer = list[i].answer;
        if(optionAnswer) {
          optionAnswer = optionAnswer.toLowerCase();
          if (optionAnswer == answer) {
            return i;
          }
        }
      }
    }
    else {
      return 'false';
    }

    return 'false';
  },
  initiateLoader: function (element) {
    var loader = '<div class="sf-chat-loader _5wd9 _n4o">\n' +
      '    <div class="_5w1r _5wdf _3_om">\n' +
      '      <div class="_5x7x _4a0v _4a0x" data-hover="tooltip" aria-label="Joseph is typing..." id="js_3o">\n' +
      '        <div class="_4b0g">\n' +
      '          <div class="_5pd7"></div>\n' +
      '          <div class="_5pd7"></div>\n' +
      '          <div class="_5pd7"></div>\n' +
      '        </div>\n' +
      '      </div>\n' +
      '    </div>\n' +
      '  </div>\n';

    return loader;
  },
  resetServiceChat: function () {
    setTimeout(function () {

      var div = sfInlineWrapper;
      div.innerHTML = '';

      sC.init(this.options.cH);
    }, 2000);
  },
  startQuestions: function (type) {
    sC.nextQuestion(type);
  },
  sfCloseSearch: function(){
    var headerTop = sfInlineWrapper.querySelector('.sf-search-header-top');
    sC.sfRemoveElement(headerTop);

    var sfSearch = sfInlineWrapper.querySelector('.sf-search');
    sC.sfRemoveElement(sfSearch);

    sfInlineWrapper.querySelector('.servicechat-parts').classList.remove('sf-search-on');
    sfInlineWrapper.classList.remove('sf-search-on');
  },
  searchQuery: function () {
    var cH = sC.options.cH;

    var xhr = new XMLHttpRequest();

    var page = parseInt(sC.options.serviceChatAnswers.page) - 1;

    var searchType = cH.questions[page].searchType;
    if (searchType === 'addsearch' || searchType === 'algolia' || searchType === 'algoliaCategory') {
      var queryQuestion = '';

      if (typeof cH.questions[page].queryQuestion === 'undefined' || cH.questions[page].queryQuestion === '') {
        queryQuestion = page;
      }
      else {
        queryQuestion = cH.questions[page].queryQuestion;
      }

      if (typeof cH.questions[page].searchKey === 'undefined' && cH.questions[page].searchKey !== '') {
        sC.addAdminAnswer('Your search key is missing.');
        sC.nextQuestion();
      }
      else {
        var searchKey = cH.questions[page].searchKey;

        var city = '';
        if (typeof cH.questions[page].searchParameters !== 'undefined' && cH.questions[page].searchParameters !== '') {
          city = cH.questions[page].searchParameters;
        }
        else {
          city = '#question' + (parseInt(queryQuestion) + 1);
        }

        var pricing = '&priceFromCents=0&priceToCents=400';

        city = sC.stringTokens(city);

        city = city.replace('#question1', 'for');
        city = city.replace('#question2', 'for');
        city = city.replace('#question3', 'for');
        city = city.replace('#question4', 'for');
        city = city.replace('#question5', 'for');
        city = city.replace('#question6', 'for');
        city = city.replace('#question7', 'for');
        city = city.replace('#question8', 'for');
        city = city.replace('#question9', 'for');

        var searchQuery = city;

        if(searchType === 'algolia'){
          loadScript2('https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearch.min.js', algoliaSearch);
          function algoliaSearch() {


            var algoliaApiKey = cH.questions[page].algoliaApiKey;
            var algoliaAppId = cH.questions[page].algoliaAppId;
            var algoliaIndexName = cH.questions[page].algoliaIndexName;
            city = 'iphone';

            var client = algoliasearch(algoliaAppId, algoliaApiKey);
            var index = client.initIndex(algoliaIndexName); // Search for a first name

            index.search(city, function (err) {
              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                hits = _ref.hits;

              sC.addSearchResults(hits, city, 'algolia');
            });
          }
        } if(searchType === 'algoliaCategory'){

          loadScript2('https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearch.min.js', loadSecond);

          function loadSecond(){
            loadScript2('https://cdn.jsdelivr.net/npm/instantsearch.js@^4.0.0', algoliaSearch);
          }
          function algoliaSearch() {
            var algoliaApiKey = cH.questions[page].algoliaApiKey;
            var algoliaAppId = cH.questions[page].algoliaAppId;
            var algoliaIndexName = cH.questions[page].algoliaIndexName;
            var searchTitle = cH.questions[page].searchTitle;
            var searchBoxPlaceholder = cH.questions[page].searchBoxPlaceholder;
            var searchCategoryName = cH.questions[page].searchCategoryName;
            var searchCategory = cH.questions[page].searchCategory;
            var searchSubCategory = cH.questions[page].searchSubCategory;
            var searchSubCategoryName = cH.questions[page].searchSubCategoryName;
            var nameAttribute = cH.questions[page].nameAttribute;
            var priceAttribute = cH.questions[page].priceAttribute;
            var linkAttribute = cH.questions[page].linkAttribute;
            var imageAttribute = cH.questions[page].imageAttribute;
            var descAttribute = cH.questions[page].descAttribute;
            var limitCategory = cH.questions[page].limitCategory;
            var limitCategoryName = cH.questions[page].limitCategoryName;
            var sfSearchAction = cH.questions[page].sfSearchAction;
            var valueAttribute = cH.questions[page].valueAttribute;

            var link = document.createElement("link");
            link.rel = "stylesheet";
            link.href = "https://cdn.jsdelivr.net/npm/instantsearch.css@7.3.1/themes/reset-min.css";
            document.getElementsByTagName("head")[0].appendChild(link);

            var div = document.getElementById('servicechat-parts-inner');

            html = '<div class="sf-search">' +
              '<div class="sf-category-group">'+
              '<div id="sf-searchbox"></div>'+
              '</div>'+
              '<div id="sf-clear-refinements"></div>'+
              '<div class="sf-categories">'+
              '<div class="sf-category-group">'+
              '<div id="sf-range-input"></div>'+
              '</div>'+
              '<div class="sf-category-group-1">'+
              '<div class="sf-search-header">'+searchCategoryName+'</div>'+
              '<div id="sf-category"></div>'+
              '</div>'+
              '<div class="sf-category-group-2" style="display:none;">'+
              '<div class="sf-search-header">'+searchSubCategoryName+'</div>'+
              '<div id="sf-category-2"></div>'+
              '</div></div>'+
              '<div class="sf-results-group">'+
              '<div class="sf-search-header">'+sC.gT('Results')+'</div>'+
              '<div id="sf-products"></div>'+
              '<div id="sf-pagination"></div>' +
              '</div>'+
              '</div>';
            div.insertAdjacentHTML('beforeend', html);

            var backBtn = 'https://app.serviceform.com/sites/all/themes/servicehired/images/back-white.svg';

            if(lightOrDark(cH.color1) === 'light'){
              //backBtn = 'https://app.serviceform.com/sites/all/themes/servicehired/images/back-black.svg';
            }

            var topHTML = '<div class="sf-search-header-top"><div class="sf-search-name">'+searchTitle+'</div><div class="serviceform-close serviceform-search-close"><img src="'+backBtn+'"></div></div>';
            var top = sfInlineWrapper.querySelector('.serviceform-intro');
            top.insertAdjacentHTML('beforeend', topHTML);

            sfInlineWrapper.classList.add('sf-search-on');
            sfInlineWrapper.querySelector('.servicechat-parts').classList.add('sf-search-on');

            var close = sfInlineWrapper.querySelector('.serviceform-search-close');
            if(close){
              close.addEventListener('click',function(){
                sC.sfCloseSearch();

                sC.options.serviceChatAnswers.page = parseInt(parseInt(sC.options.serviceChatAnswers.page) - 2);
                sC.nextQuestion();
              });
            }

            var search = instantsearch({
              indexName: algoliaIndexName,
              searchClient: algoliasearch(algoliaAppId, algoliaApiKey),
            });

            var currency = sC.options.cH.currency;

            var priceHTML = '';
            if(typeof priceAttribute !== 'undefined' && priceAttribute !== '') {
              priceHTML = '<div class="sf-search-price">'+currency+' {{'+priceAttribute+'}}</div>';

              search.addWidgets([
                instantsearch.widgets.rangeSlider({
                  container: '#sf-range-input',
                  attribute: priceAttribute,
                  precision: 2,
                  step: 500,
                  tooltips: {
                    format: function (rawValue) {
                      return currency + ' ' + Math.round(rawValue).toLocaleString();
                    }
                  }
                })
              ]);
            }

            var descriptionHTML = '';
            if(typeof descAttribute !== 'undefined' && descAttribute !== '') {
              descriptionHTML = '<div class="sf-search-description">'+descAttribute+'</div>';
            }

            var imageHtml = '';
            if(typeof imageAttribute !== 'undefined' && imageAttribute !== '') {
              imageHtml = '<div class="sf-search-item-image"><img src="'+imageAttribute+'"></div>';
            }

            var templateHTML = '<span class="sf-search-item-no-click" token="'+valueAttribute+'">' +
              imageHtml +
              '<div class="sf-search-name">'+nameAttribute+'</div>' +
              descriptionHTML +
              priceHTML +
              '</span>';

            if(typeof linkAttribute !== 'undefined' && linkAttribute !== '') {
              templateHTML = '<a target="_blank" href="'+linkAttribute+'">' +
                '<span class="sf-search-item-no-click" token="'+valueAttribute+'">' +
                imageHtml +
                '<div class="sf-search-name">'+nameAttribute+'</div>' +
                descriptionHTML +
                priceHTML +
                '</span>'+
                '</a>';
            }


            if(typeof limitCategory !== 'undefined' && limitCategory !== ''){

              var name = sC.gT('Show more');
              if(typeof limitCategoryName !== 'undefined' && limitCategoryName !== '') {
                name = limitCategoryName;
              }
              search.addWidgets([
                // 4. Make the brands refinable
                instantsearch.widgets.refinementList({
                  container: '#sf-category',
                  attribute: searchCategory,
                  operator: 'and',
                  sortBy: ['name:asc'],
                  showMore: true,
                  limit: limitCategory,
                  showMoreLimit: 20,
                  templates: {
                    showMoreText: '{{^isShowingMore}}'+name+'{{/isShowingMore}}',
                  },
                })
              ]);
            } else {
              search.addWidgets([
                // 4. Make the brands refinable
                instantsearch.widgets.refinementList({
                  container: '#sf-category',
                  attribute: searchCategory,
                  operator: 'and',
                  sortBy: ['name:asc'],
                })
              ]);
            }


            search.addWidgets([
              instantsearch.widgets.clearRefinements({
                container: '#sf-clear-refinements',
                templates: {
                  resetLabel: sC.gT('Clear')
                }
              }),
              instantsearch.widgets.searchBox({
                container: '#sf-searchbox',
                placeholder: searchBoxPlaceholder,
                showSubmit: false
              }),

              // 3. Plug the search results into the product container
              instantsearch.widgets.hits({
                container: '#sf-products',
                templates: {
                  item: templateHTML
                },
                showMore: true,
                limit: 20
              }),

              // 4. Make the brands refinable
              instantsearch.widgets.refinementList({
                container: '#sf-category-2',
                attribute: searchSubCategory,
                operator: 'and'
              }),
              instantsearch.widgets.pagination({
                container: '#sf-pagination'
              })
            ]);

            search.start();

            var onRenderHandler = function() {

              sfInlineWrapper.querySelector('.sf-search').scrollTop = 0;

              var refinements = search.helper.state.facetsRefinements;
              var category = refinements[Object.keys(refinements)[0]].length;
              var category2 = refinements[Object.keys(refinements)[1]].length;

              if(category > 0){
                sfInlineWrapper.querySelector('.sf-category-group-2').style.display = 'block';
              } else {
                sfInlineWrapper.querySelector('.sf-category-group-2').style.display = 'none';
              }

              if(!sfInlineWrapper.querySelector('#sf-searchbox')) {
                if (category2 > 0) {
                  sfInlineWrapper.querySelector('.sf-results-group').style.display = 'block';
                }
                else {
                  sfInlineWrapper.querySelector('.sf-results-group').style.display = 'none';
                }
              }

              if (typeof sfSearchAction !== 'undefined' && sfSearchAction !== '') {

                var searchItem = sfInlineWrapper.getElementsByClassName('sf-search-item-no-click');
                for (var i = 0; i < searchItem.length; i++) {
                  if(!searchItem[i].classList.contains('sf-initiated')){
                    searchItem[i].addEventListener('click',function(){
                      sC.addAnswer(this.textContent);
                      sC.options.serviceChatAnswers.searchValue = this.getAttribute('token');
                      sC.nextQuestion(this.textContent);
                      sfInlineWrapper.querySelector('.sf-search').innerHTML = '';

                      var summaryItemAnswer = {
                        "answer": [{
                          "answer": this.textContent,
                          "amount": ''
                        }],
                        "label": 'Search question',
                        "question": sC.options.serviceChatAnswers.page,
                        "price": ''
                      }

                      sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);
                      sC.sfCloseSearch();

                    });
                    searchItem[i].classList.add('sf-initiated');

                  }
                }
              }

            };
            search.on('render', onRenderHandler);

          }
        } else if (searchKey === 'softlogic') {

          loadScript2('https://cdn.jsdelivr.net/npm/algoliasearch@3/dist/algoliasearch.min.js', algoliaSearch);
          function algoliaSearch() {

            var client = algoliasearch('GOXZGNOT9K', '5c59faa194e55d17443733228f3dd4a9');
            var index = client.initIndex('Softlogic'); // Search for a first name

            index.search(city, function (err) {
              var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
                hits = _ref.hits;

              sC.addSearchResults(hits, city, 'algolia');
            });
          }

        } else {
          var url = "https://api.addsearch.com/v1/search/" + searchKey + "?term=" + city;

          xhr.open("GET", url, true);
          xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {
              var response = JSON.parse(xhr.response);
              sC.addSearchResults(response, searchQuery, 'addsearch');
            }
          };
          xhr.send();
        }
      }
    }
    else {
      sC.addAdminAnswer(sC.gT('Unfortunately I couldnt find anything.'));
      sC.nextQuestion();
    }

  },
  trimString: function (string, type) {
    var string = string.toLowerCase();
    var string = string.replace('.', "");
    var string = string.replace('.', "");
    var string = string.replace(',', "");
    var string = string.replace(',', "");
    var string = string.replace('“', "");
    var string = string.replace('”', "");
    var string = string.replace('…', '');
    var string = string.replace('...', '');
    var string = string.replace('"', '');
    var string = string.replace('"', '');
    var string = string.replace('!', '');
    var string = string.replace('¡', '');
    var string = string.replace('¿', '');
    var string = string.replace('?', '');
    var string = string.replace('¿', '');
    string = string.replace(/\s+/g, ' ').trim();

    return string;
  },
  entityDetection: function (string) {
    string = sC.trimString(string);

    var split = string.split(' ');

    var entities = [];

    var entityArray = [];
    if (typeof sC.entityDetection !== 'undefined') {
      entityArray = sC.entityDetection;
    }

    for (var i = 0; i < split.length; i++) {
      var exists = (entityArray.indexOf(split[i]) > -1);
      if (exists) {
        entities.push(split[i]);
      }
    }

    return (entities);

  },
  stringTokens: function (answer) {
    if (typeof answer === 'string' || answer instanceof String) {

      if (typeof sC.options.serviceChatAnswers.customerName !== 'undefined') {
        answer = answer.replace("#customerName", sC.options.serviceChatAnswers.customerName);
        answer = answer.replace("#customerFirstName", sC.options.serviceChatAnswers.customerName);
      }
      else {
        answer = answer.replace("#customerName", '');
        answer = answer.replace("#customerFirstName", '');
      }

      if (typeof sC.options.serviceChatAnswers.customerName !== 'undefined') {
        answer = answer.replace("#customerName", sC.options.serviceChatAnswers.customerName);
      }
      else {
        answer = answer.replace("#customerName", '');
      }

      if (typeof window.serviceChatDynamicTag10 !== 'undefined') {
        var answer = answer.replace("#dynamicTag10", window.serviceChatDynamicTag10);
        sC.options.serviceChatAnswers.serviceChatDynamicTag9 = window.serviceChatDynamicTag10;
      } else {
        var answer = answer.replace("#dynamicTag10", '');
      }

      if (typeof window.serviceChatDynamicTag11 !== 'undefined') {
        var answer = answer.replace("#dynamicTag11", window.serviceChatDynamicTag11);
        sC.options.serviceChatAnswers.serviceChatDynamicTag11 = window.serviceChatDynamicTag11;
      } else {
        var answer = answer.replace("#dynamicTag11", '');
      }

      if (typeof window.serviceChatDynamicTag12 !== 'undefined') {
        var answer = answer.replace("#dynamicTag12", window.serviceChatDynamicTag12);
        sC.options.serviceChatAnswers.serviceChatDynamicTag12 = window.serviceChatDynamicTag12;
      } else {
        var answer = answer.replace("#dynamicTag12", '');
      }

      if (typeof window.serviceChatDynamicTag1 !== 'undefined') {
        var answer = answer.replace("#dynamicTag1", window.serviceChatDynamicTag1);
        sC.options.serviceChatAnswers.serviceChatDynamicTag1 = window.serviceChatDynamicTag1;
      } else {
        var answer = answer.replace("#dynamicTag1", '');
      }

      if (typeof window.serviceChatDynamicTag2 !== 'undefined') {
        var answer = answer.replace("#dynamicTag2", window.serviceChatDynamicTag2);
        sC.options.serviceChatAnswers.serviceChatDynamicTag2 = window.serviceChatDynamicTag2;
      } else {
        var answer = answer.replace("#dynamicTag2", '');
      }

      if (typeof window.serviceChatDynamicTag3 !== 'undefined') {
        var answer = answer.replace("#dynamicTag3", window.serviceChatDynamicTag3);
        sC.options.serviceChatAnswers.serviceChatDynamicTag3 = window.serviceChatDynamicTag3;
      } else {
        var answer = answer.replace("#dynamicTag3", '');
      }

      if (typeof window.serviceChatDynamicTag4 !== 'undefined') {
        var answer = answer.replace("#dynamicTag4", window.serviceChatDynamicTag4);
        sC.options.serviceChatAnswers.serviceChatDynamicTag4 = window.serviceChatDynamicTag4;
      } else {
        var answer = answer.replace("#dynamicTag4", '');
      }

      if (typeof window.serviceChatDynamicTag5 !== 'undefined') {
        var answer = answer.replace("#dynamicTag5", window.serviceChatDynamicTag5);
        sC.options.serviceChatAnswers.serviceChatDynamicTag5 = window.serviceChatDynamicTag5;
      } else {
        var answer = answer.replace("#dynamicTag5", '');
      }

      if (typeof window.serviceChatDynamicTag6 !== 'undefined') {
        var answer = answer.replace("#dynamicTag6", window.serviceChatDynamicTag6);
        sC.options.serviceChatAnswers.serviceChatDynamicTag6 = window.serviceChatDynamicTag6;
      } else {
        var answer = answer.replace("#dynamicTag6", '');
      }

      if (typeof window.serviceChatDynamicTag7 !== 'undefined') {
        var answer = answer.replace("#dynamicTag7", window.serviceChatDynamicTag7);
        sC.options.serviceChatAnswers.serviceChatDynamicTag7 = window.serviceChatDynamicTag7;
      } else {
        var answer = answer.replace("#dynamicTag7", '');
      }

      if (typeof window.serviceChatDynamicTag8 !== 'undefined') {
        var answer = answer.replace("#dynamicTag8", window.serviceChatDynamicTag8);
        sC.options.serviceChatAnswers.serviceChatDynamicTag8 = window.serviceChatDynamicTag8;
      } else {
        var answer = answer.replace("#dynamicTag8", '');
      }

      if (typeof window.serviceChatDynamicTag9 !== 'undefined') {
        var answer = answer.replace("#dynamicTag9", window.serviceChatDynamicTag9);
        sC.options.serviceChatAnswers.serviceChatDynamicTag9 = window.serviceChatDynamicTag9;
      } else {
        var answer = answer.replace("#dynamicTag9", '');
      }


      answer = answer.replace("#amount", sC.options.serviceChatAnswers.amount);
      answer = answer.replace("#amount", sC.options.serviceChatAnswers.amount);
      answer = answer.replace("#amount", sC.options.serviceChatAnswers.amount);
      answer = answer.replace("#amount", '');

      var tokens = sC.options.serviceChatAnswers.tokens;
      if (tokens) {
        for (var i = tokens.length - 1; i >= 0; i--) {
          var answer = answer.replace(tokens[i].token, tokens[i].answer);
          var answer = answer.replace(tokens[i].token, tokens[i].answer);
          var answer = answer.replace(tokens[i].token, tokens[i].answer);
        }
      }

      var hiddenTokens = sC.options.serviceChatAnswers.hiddenTokens;
      if (hiddenTokens) {
        for (var ik = hiddenTokens.length - 1; ik >= 0; ik--) {
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
          var answer = answer.replace(hiddenTokens[ik].token, hiddenTokens[ik].answer);
        }

        var questions = sC.options.cH.questions;
        if(questions){
          for (var ikk = questions.length - 1; ikk >= 0; ikk--) {
            answer = answer.replace('#token'+ikk, '');
          }
        }
      }

      function evil(fn) {
        var fn = sfTrimHtml(fn);
        return new Function('return ' + fn)();
      }

      var answer = answer.replace(/{{.*?\}}/, function (x) {
        var x = x.replace('{{', '');
        var x = x.replace('}}', '');
        return evil(x).toFixed(0);
      });

      var answer = answer.replace(/{{.*?\}}/, function (x) {
        var x = x.replace('{{', '');
        var x = x.replace('}}', '');
        return evil(x).toFixed(0);
      });

      var answer = answer.replace(/{{.*?\}}/, function (x) {
        var x = x.replace('{{', '');
        var x = x.replace('}}', '');
        return evil(x).toFixed(0);
      });
    }

    return answer;
  },
  addAdminQuestion: function (page) {
    var cH = sC.options.cH;

    if (cH.questions[page] !== 'undefined') {
      if (typeof cH.serviceChatImage === 'undefined') {
        cH.serviceChatImage = 'https://app.serviceform.com/servicechat.svg';
      }

      var question = cH.questions[page].title;
      var type = cH.questions[page].type;

      question = sC.stringTokens(question);

      sC.options.serviceChatAnswers.answers.admin.push(question);

      if(type === 'html'){
        sC.addAdminAnswerHTML(page);
      } else {
        sC.addAdminAnswer(question);
      }
    }
  },
  pushDelay: function () {

    var pushDelay = 1000;

    var cH = sC.options.cH;
    var popupTiming = sC.options.cH.sfPopupTiming;
    if(typeof popupTiming !== 'undefined') {
      if (popupTiming !== ''){
        if(popupTiming === '0'){
          pushDelay = 1000;
        } else if(popupTiming === '1'){
          pushDelay = 5000;
        } else if(popupTiming === '2'){
          pushDelay = 10000;
        } else if(popupTiming === '3'){
          pushDelay = 15000;
        } else if(popupTiming === '4'){
          pushDelay = 20000;
        } else if(popupTiming === '5'){
          pushDelay = 30000;
        } else if(popupTiming === '6'){
        }
      }
    }

    if (sC.sfDevModeOff) {
      var showAgain = sC.options.cH.showAgainAfter;
      if(typeof showAgain !== 'undefined') {
        if (showAgain !== '') {
          if(showAgain === '0'){
          } else if(showAgain === '1'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 0.0415);
          } else if(showAgain === '2'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 0.0415*2);
          } else if(showAgain === '3'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 0.0415*3);
          } else if(showAgain === '4'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 0.0415*4);
          } else if(showAgain === '5'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 0.0415*5);
          } else if(showAgain === '6'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 1);
          } else if(showAgain === '7'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 2);
          } else if(showAgain === '8'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 7);
          } else if(showAgain === '9'){
            sC.sfChatSetCookie('sf-hidden-push', '1', 14);
          }
        }
      }
    }

    if (typeof window.sfDynamicPushTime !== 'undefined') {
      pushDelay = window.sfDynamicPushTime;
    }

    setTimeout(function () {
      var delay = sfInlineWrapper.getElementsByClassName('push-delay');
      if (delay) {
        for (var i = 0; i < delay.length; i++) {
          sC.secondDelay(delay[i]);
          delay[i].classList.remove('push-delay');
        }
      }

    }, pushDelay);
  },
  secondDelay: function (element) {
    setTimeout(function () {
      element.classList.add('open');
      setTimeout(function () {
        sC.scrollToBottomOfChat('force');
      }, 300);
    }, 60);
  },
  initDelay: function () {
    var cH = sC.options.cH;
    var page = sC.options.serviceChatAnswers.page-1;

    var wait = 1000;
    if(typeof window.sfWaitTime !== 'undefined'){
      wait = window.sfWaitTime;
    }

    document.body.onkeyup = function(e){
      if(e.keyCode === 32 || e.key === ' ' || e.key === 'Spacebar'){
        if(sC.options.cH.questions[sC.options.serviceChatAnswers.page-1].type === 'statement') {
          clearTimeout(window.sfBreakOther);
          run(page+1);
          sC.nextQuestion();
          clearTimeout(window.sfBreakTimeout);
        } else {
          run(page);
          clearTimeout(window.sfBreakOther);
          clearTimeout(window.sfBreakTimeout);
        }
      }
    }

    function run(page){
      var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
      sC.alterBackground(sC.options.serviceChatAnswers.page-1);

      var delay = sfInlineWrapper.getElementsByClassName('delay');
      if (delay) {
        for (var i = 0; i < delay.length; i++) {
          sC.secondDelay(delay[i]);
          delay[i].classList.remove('delay');
        }
      }

      var loader = div.querySelector('.sf-chat-loader');
      if (loader) {
        var hep = div.querySelector('.sf-chat-loader');
        sC.sfRemoveElement(hep);
      }

      if (cH.questions[sC.options.serviceChatAnswers.page - 1].type === 'textfields' || cH.questions[parseInt(sC.options.serviceChatAnswers.page - 1)].type === 'date') {
        if (cH.questions[parseInt(sC.options.serviceChatAnswers.page - 1)].options.length) {
          sfWiggle('.servicechat-composer');
        }
      }

      Object.keys(window.soundEffect).forEach(function(key) {
        window.soundEffect[key].stop();
      });

      if(typeof window.soundEffect[page] !== 'undefined') {
        if (typeof window.soundEffect[page] !== 'undefined') {
          window.soundEffect[page].stop();
        }
        window.soundEffect[page].play();
      }
    }

    window.sfBreakOther = setTimeout(function () {
      run(page);
    }, wait);

  },
  addUserOptions: function (page) {
    var cH = sC.options.cH;

    if (cH.questions[page]) {
      var type = cH.questions[page].type;

      var olderOptions = sfInlineWrapper.querySelector('.servicechat-admin-option');
      if (olderOptions) {
        sC.sfRemoveElement(olderOptions);
      }

      if (type === 'search') {
        sC.searchQuery('');
      }

      if (type === "calendar") {

        if (cH.questions[page].calendarType === 'calendly') {

          loadScript2('https://assets.calendly.com/assets/external/widget.js',loadCalendly);

          function loadCalendly() {
            var html = '<div id="sf-calendly"></div>';
            var div = document.querySelector('#servicechat-inline #servicechat-parts-inner');
            div.insertAdjacentHTML('beforeend', html);

            document.querySelector('#servicechat-inline .servicechat-parts').classList.add('calendly');

            var array = {
              url: cH.questions[page].calendarUrl + '?hide_event_type_details=1',
              parentElement: document.querySelector('#servicechat-inline #sf-calendly'),
              prefill: {
                name: "",
                email: ""
              }
            }

            if(typeof sC.options.serviceChatAnswers.customerFirstName !== 'undefined') {
              array.prefill.name = sC.options.serviceChatAnswers.customerFirstName;
            } else if (typeof sC.options.serviceChatAnswers.customerName !== 'undefined'){
              array.prefill.name = sC.options.serviceChatAnswers.customerName;
            }
            array.prefill.email = sC.options.serviceChatAnswers.customerEmail;

            Calendly.initInlineWidget(array);

            // calendly event listener
            function isCalendlyEvent(e) {
              return e.data.event &&
                e.data.event.indexOf('calendly') === 0;
            };

            window.addEventListener(
              'message',
              function(e) {
                if (isCalendlyEvent(e)) {
                  if(e.data.event === 'calendly.event_scheduled') {
                    var calendly = document.querySelector('#sf-calendly');
                    sC.sfRemoveElement(calendly);
                    sC.nextQuestion();
                    document.querySelector('#servicechat-inline .servicechat-parts').classList.remove('calendly');
                  }
                }
              }
            );
          }

        } else {
          if (typeof flatpickr !== 'undefined') {
            sC.addCalendarQuestion();
          } else {

            loadScript2(
              "https://cdn.jsdelivr.net/npm/flatpickr",
              otherScript
            );

            function otherScript() {
              var language = sC.options.cH.language;
              if (language !== 'en') {
                loadScript2("https://npmcdn.com/flatpickr/dist/l10n/" + language + ".js", sC.addCalendarQuestion);
              } else {
                sC.addCalendarQuestion();
              }
            }
          }
        }
      }

      if (type === 'livechat') {
        sC.options.serviceChatAnswers.live = 1;
        sC.initiateLiveChat();
      }

      if (type === "calendar") {
        loadScript2(
          "https://cdn.jsdelivr.net/npm/flatpickr",
          sC.addCalendarQuestion
        );
      }
      else {
        sC.addCalendarQuestion();
      }


      // Format for textfields.
      if (type === 'textfields' || type === 'date' || type === 'statement') {

        // Jump for statement.

        if (type === 'statement') {

          if (typeof cH.questions[page].jump !== 'undefined') {
            sC.options.serviceChatAnswers.jump = cH.questions[page].jump;
          }
        }

        var options = cH.questions[page].options;
        var html = '<div class="servicechat-admin-option delay sf-mobile-hidden">';
        var subtitle = cH.questions[page].subtitle;
        if (typeof subtitle !== 'undefined' && subtitle !== '') {
          html += '<div class="servicechat-subtitle">' + subtitle + '</div>';
        }
        var display = 'block';

        if (options.length === 0) {
          window.sfBreakTimeout = setTimeout(function() {
            sC.nextQuestion();
          }, window.sfWaitTime);

          return;
        } else {
          for (var i = 0; i < options.length; i++) {

            if (i > 0) {
              display = 'none';
            }

            if (type === 'date') {
              options[i].label = 'What date?';
            }
            var skip = '';

            if (options[i].required !== '1') {
              skip = '<div class="skip-q" question="' + page + '" option="' + i + '">' + sC.gT('Skip') + '</div>';
            }

            var intTel = '';
            if(options[i].fieldType === 'phoneValidate'){
              intTel = 'sf-text-validation-phoneIntTel';
            }

            var placeholder = '';
            if(typeof options[i].placeholder !== 'undefined' && options[i].placeholder !== ''){
              placeholder = options[i].placeholder;
            } else if (typeof options[i].label !== 'undefined' && options[i].label) {
              placeholder = options[i].label;
            }

            html += '<div style="display:' + display + '" class="servicechat-admin-question textfield-wrapper-' + page + '-' + i + ' servicechat-admin-question-question" question="' + page + '" option="' + i + '">' + options[i].label +
              '<div class="servicechat-question">' +
              '<textarea rows="1" class="sf-chat-textfields sf-inline-textfields '+intTel+'" placeholder="'+placeholder+'" id="textfield-' + page + '-' + i + '" type="textfield" question="' + page + '" option="' + i + '"></textarea>' +
              '<button class="servicechat-question-button" type="button" style="background-color:' + cH.color1 + '" question="' + page + '" option="' + i + '">' + sC.gT('Send') + '</button>' +
              skip +
              '</div>' +
              '</div>';
          }
        }
        html += '</div>';

        var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
        div.insertAdjacentHTML('beforeend', html);

        sC.loadIntTel();

        // Checkboxes.
        var options = sfInlineWrapper.getElementsByClassName('servicechat-question-button');
        if (options) {
          for (var r = 0, count = options.length; r < count; r++) {
            options[r].addEventListener("click", function () {
              var option = this.getAttribute('option');
              var question = this.getAttribute('question');
              var answer = sfInlineWrapper.querySelector('#textfield-' + question + '-' + option).value;
              if (answer.trim() !== '') {
                if (type === 'search') {
                  sC.searchQuery(answer);
                }
                else {
                  var olderOptions = sfInlineWrapper.querySelector('.servicechat-admin-option');
                  if (olderOptions) {
                    sC.sfRemoveElement(olderOptions);
                  }

                  sC.processUserAnswer(answer);

                }
              }
            });
          }
        }

        // Checkboxes.
        var textfields = sfInlineWrapper.getElementsByClassName('sf-inline-textfields');
        if (textfields) {
          for (var r = 0, count = textfields.length; r < count; r++) {
            textfields[r].addEventListener("keydown", function (event) {
              if (event.keyCode === 13) {
                event.preventDefault();
                if (!event.shiftKey) {
                  var option = this.getAttribute('option');
                  var question = this.getAttribute('question');
                  var answer = this.value;
                  if (answer.trim() !== '') {
                    if (type === 'search') {
                      sC.searchQuery(answer);
                    }
                    else {
                      sC.addAnswer(answer);
                      sC.userSelectedOption('normal', question, 'false', answer);
                    }
                  }
                }
              }
            });
          }
        }

        var skips = sfInlineWrapper.getElementsByClassName('skip-q');
        if (skips) {
          for (var xx = 0, countxx = skips.length; xx < countxx; xx++) {
            skips[xx].addEventListener("click", function () {
              var option = this.getAttribute('option');
              var question = this.getAttribute('question');
              sC.showNextOption(question, option, sC.gT('Skipped this question'));
            });
          }
        }

        var optionsInboxes = sfInlineWrapper.getElementsByClassName('servicechat-admin-options');
        for (var x = 0, countx = optionsInboxes.length; x < countx; x++) {
          options[r].addEventListener("keydown", function (event) {
            if (event.keyCode === 13) {
              event.preventDefault();
              if (!event.shiftKey) {
                sfInlineWrapper.querySelector("#id_of_button").click();
              }
            }
          });
        }
      }

      else if (type === 'file'){

        if(typeof jQuery === 'undefined') {
          loadScript2('https://code.jquery.com/jquery-latest.js', loadFileUpload);
        } else {
          loadFileUpload();
        }

        function loadFileUpload() {
          UPLOADCARE_PUBLIC_KEY = 'e5d07ed1c2093facad3c';
          UPLOADCARE_LOCALE_TRANSLATIONS = {
            buttons: {
              choose: {
                files: {
                  one: sC.gT('Click to upload (Max 1MB)'),
                  other: 'Upload your documents '
                },
                images: {
                  one: 'Upload your photo',
                  other: 'Upload your photos'
                }
              }
            }
          };

          if(typeof uploadcare === 'undefined') {
            loadScript2('https://ucarecdn.com/libs/widget/3.x/uploadcare.min.js', sC.addFileUploadQuestion);
          } else {
            sC.addFileUploadQuestion();
          }
        }
      }
      else if (type === 'payment') {

        var xhr = new XMLHttpRequest();
        var url = "https://app.serviceform.com/api_call/stripe_intent";

        xhr.open("POST", url, true);
        xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
        var submission = {};

        submission['nid'] = cH.nid;

        var include = 0;
        if (typeof cH.questions[page].sfFlatPrice !== 'undefined') {
          include = parseInt(cH.questions[page].sfFlatPrice);
        }

        submission['price'] = sC.calculatePrice(cH.questions[page].price, include);
        sC.options.serviceChatAnswers.amount = submission['price'];
        sC.options.serviceChatAnswers.fullAmount = submission['price'];
        sC.options.serviceChatAnswers.paid = 0;

        submission['currency'] = cH.currency;

        var label = cH.questions[page].label;

        var tokens = sC.options.serviceChatAnswers.tokens;
        if (tokens) {
          for (var i = 0; i < tokens.length; i++) {
            label = label.replace(tokens[i].token, tokens[i].answer);
          }
        }

        submission['item'] = label;

        submission['name'] = sC.options.serviceChatAnswers.customerName;
        submission['email'] = sC.options.serviceChatAnswers.customerEmail;
        submission['language'] = cH.language;

        submission['sfSubscription'] = cH.questions[page].sfSubscription;
        submission['sfSubscriptionInterval'] = cH.questions[page].sfSubscriptionInterval;
        submission['sfSubscriptionIntervalCount'] = cH.questions[page].sfSubscriptionIntervalCount;

        var data = JSON.stringify(submission);

        xhr.send(data);

        xhr.onreadystatechange = function () {
          if (xhr.readyState === 4 && xhr.status === 200) {
            var response = JSON.parse(xhr.response);

            if (response.response === 'success') {
              window.sfTokenAccount = response.account;

              var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
              div.innerHTML += response.html;

              if (response.type === 'subscription') {
                loadScript2('https://js.stripe.com/v3/', sC.startSubscription)
              }
              else {
                loadScript2('https://js.stripe.com/v3/', sC.startPayment)
              }
            }
            else {
              alert(response.html);
              sC.refreshServiceChat();
            }
          }
        }

      }

      else if (type === 'search') {

      }
      else if (type === 'radio') {
        var options = cH.questions[page].options;
        var html = '<div class="servicechat-admin-option delay" style="opacity:0">';
        var subtitle = cH.questions[page].subtitle;

        var multiple = cH.questions[page].sfHowMany;
        if (typeof multiple !== 'undefined') {
          if (multiple > 1) {
            multiple = multiple;
          }
          else {
            multiple = 0;
          }
        }
        if (subtitle !== '' || multiple) {
          if (multiple === '3') {
            html += '<div class="sf-wrapper" question="' + page + '" option="' + i + '">' +
              '<div class="servicechat-subtitle">' + sC.gT('Choose the most suitable options') + '.</div>' +
              '<select class="servicechat-select-list" question="' + page + '">';
          }
          else if (multiple) {
            html += '<div class="servicechat-subtitle">' + sC.gT('Choose the most suitable options') + '.</div>';
          }
          else {
            html += '<div class="servicechat-subtitle">' + subtitle + '</div>';
          }
        }
        if (options.length === 0) {
        }
        else {
          for (var i = 0; i < options.length; i++) {
            if (multiple === '3') {
              html += '<option question="' + page + '" option="' + i + '" value="' + options[i].answer + '">' + options[i].answer + '</option>';
            }
            else if (multiple) {
              html += '<div class="servicechat-admin-options sf-multiple" question="' + page + '" option="' + i + '"><span class="sf-multiple"></span>' + options[i].answer + '</div>';
            }
            else {
              if(typeof options[i].image !== 'undefined' && options[i].image !== ''){
                html += '<div class="servicechat-admin-options sf-image" question="' + page + '" option="' + i + '">' +
                  '<img src="'+options[i].image+'">'+
                  '<div class="sf-internal">' + options[i].answer + '</div></div>';
              } else {
                html += '<div class="servicechat-admin-options" question="' + page + '" option="' + i + '">' + options[i].answer + '</div>';
              }
            }
          }
        }

        if (typeof cH.contactButton !== 'undefined' && cH.contactButton === '1') {
          html += '<div style="background-color:' + cH.color1 + '; color: white;" class="servicechat-admin-options contact-button" question="' + page + '" option="contact-button">' + cH.contactButtonText + '</div>';
        }

        if (multiple === '3') {
          var style = '<style>select.servicechat-select-list { width: 100%; height: 40px; border: 1px solid #4689c2; font-size: 14px;}</style>';
          var button = '<button type="button" class="servicechat-question-button" style="background-color:' + cH.color1 + '" question="' + page + '" option="' + i + '">' + sC.gT('Send') + '</button>';
          html += '</select>' + button + '</div>' + style;
        }
        else if (multiple) {
          html += '<div class="servicechat-multiple-wrapper">' +
            '<div class="servicechat-admin-multiple-button" style="background:' + sC.options.cH.color1 + '" question="' + page + '">' + sC.gT('Continue') + '</div>' +
            '</div>';
        }

        html += '</div>';
        var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
        div.insertAdjacentHTML('beforeend', html);

        if (multiple === '3') {
          sfInlineWrapper.querySelector('.servicechat-question-button').addEventListener("click", function () {
            var e = sfInlineWrapper.querySelector(".servicechat-select-list");
            var option = e.options[e.selectedIndex].getAttribute('option');
            var question = e.options[e.selectedIndex].getAttribute('question');
            sC.userSelectedOption('normal', question, option);
          });
        }
        else if (multiple) {
          // Checkboxes.
          var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-options');
          for (var r = 0, count = options.length; r < count; r++) {
            options[r].addEventListener("click", function () {
              var option = this.getAttribute('option');
              var question = this.getAttribute('question');

              if (this.classList.contains('sf-selected')) {
                this.classList.remove('sf-selected');
              }
              else {
                this.classList.add('sf-selected');
              }
            });
          }

          var continueButton = sfInlineWrapper.querySelector('.servicechat-admin-multiple-button');
          if (continueButton) {
            continueButton.addEventListener('click', function () {
              var options = sfInlineWrapper.getElementsByClassName('sf-selected');
              var selections = [];
              if (options) {
                for (var i = 0; i < options.length; i++) {
                  var option = options[i].getAttribute('option');
                  var question = options[i].getAttribute('question');

                  var opt = sC.options.cH.questions[question].options[option];
                  var answer = opt.answer;
                  var oid = opt.oid;

                  var hiddenToken = '';
                  if(typeof opt.hiddenToken !== 'undefined') {
                    hiddenToken = opt.hiddenToken;
                  }

                  var price = '';
                  if(typeof opt.price !== 'undefined') {
                    price = opt.price;
                  }

                  var selection = {
                    'price': price,
                    'hiddenToken': hiddenToken,
                    'answer': answer,
                    'oid': oid
                  }

                  selections.push(selection);
                }
              }

              sC.userSelectedOption('normal', question, selections);
            });

          }

        }
        else {
          // Checkboxes.
          var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-options');
          for (var r = 0, count = options.length; r < count; r++) {
            options[r].addEventListener("click", function () {
              var option = this.getAttribute('option');
              var question = this.getAttribute('question');
              sC.userSelectedOption('normal', question, option);
              sC.playButtonClick();
            });
          }
        }

      }

      else {
        var options = cH.questions[page].options;
        var html = '<div class="servicechat-admin-option delay" style="opacity:0">';
        var subtitle = cH.questions[page].subtitle;
        if (typeof subtitle !== 'undefined' && subtitle !== '') {
          html += '<div class="servicechat-subtitle">' + subtitle + '</div>';
        }
        if (options.length === 0) {
        }
        else {
          for (var i = 0; i < options.length; i++) {
            html += '<div class="servicechat-admin-options" question="' + page + '" option="' + i + '">' + options[i].answer + '</div>';
          }
        }
        html += '</div>';

        var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

        setTimeout(function(){
          div.insertAdjacentHTML('beforeend', html);
          sC.scrollToBottomOfChat('force');
        },200);


        // Checkboxes.
        var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-options');
        for (var r = 0, count = options.length; r < count; r++) {
          options[r].addEventListener("click", function () {
            var option = this.getAttribute('option');
            var question = this.getAttribute('question');
            sC.userSelectedOption('normal', question, option);
          });
        }
      }
      sC.initDelay();
    }

  },

  addCalendarQuestion: function () {
    var page = parseInt(sC.options.serviceChatAnswers.page) - 1;
    var cH = sC.options.cH;
    var calendarTypeSelect = sC.options.cH.questions[page].calendarType;

    if(calendarTypeSelect === "calendar-day") {
      var html = '<div class = "servicechat-admin-option sf-mobile-hidden">' +
        '<div style="display:block" class ="servicechat-admin-question textfield-wrapper-1-0 servicechat-admin-question-question">' +
        '<div class="sf-time-picker"><input class="sf-time-picker-input" placeholder="Pick a date below"></div>' +
        '<div class="sf-calen-confirm"><button type="button" class ="servicechat-question-button" id="sf-calendar-button" style="background-color: ' + cH.color1 + '">Continue</button></div>' +
        '</div>' +
        '</div>' +
        '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">';
      var div = sfInlineWrapper.querySelector("#servicechat-parts-inner");
      div.insertAdjacentHTML("beforeend", html);
      ansCal = flatpickr(".sf-time-picker-input", {
        enableTime:False,
        allowInput:true,
      });
      sfInlineWrapper.querySelector("#sf-calendar-button").addEventListener("click", function(){
        var summaryItemAnswer = {
          answer: [{
            dateAnswer: ansCal.selectedDates[0].toLocaleDateString(),
          }],
          label: cH.questions[page].title,
          question: page,
          date: ''
        }
        sC.options.serviceChatAnswers.jump = cH.questions[page].jump;
        sC.options.serviceChatAnswers.summaryItems.push(
          summaryItemAnswer
        );
        sC.nextQuestion();
        this.disabled=true;
      });
    }
    if(calendarTypeSelect === "calendar-time"){
      var html = '<div class = "servicechat-admin-option sf-mobile-hidden">' +
        '<div style="display:block" class ="servicechat-admin-question textfield-wrapper-1-0 servicechat-admin-question-question">' +
        '<div class="sf-time-picker"><input class="sf-time-picker-input" placeholder="Pick a time below"></div>' +
        '<div class="sf-calen-confirm"><button type="button" class="servicechat-question-button" id="sf-calendar-button" style="background-color: ' + cH.color1 + '">Continue</button></div>' +
        '</div>' +
        '</div>' +
        '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">';
      var div = sfInlineWrapper.querySelector("#servicechat-parts-inner");
      div.insertAdjacentHTML("beforeend", html);
      ansCal = flatpickr(".sf-time-picker-input", {
        enableTime: true,
        noCalendar: true,
        dateFormat: "H:i",
      });
      sfInlineWrapper.querySelector("#sf-calendar-button").addEventListener("click", function(){
        var summaryItemAnswer = {
          answer: [{
            TimeAnswer: ansCal.selectedDates[0].toLocaleTimeString(),
          }],
          label: cH.questions[page].title,
          question: page,
          date: ''
        }
        sC.options.serviceChatAnswers.jump = cH.questions[page].jump;
        sC.options.serviceChatAnswers.summaryItems.push(
          summaryItemAnswer
        );
        sC.nextQuestion();
        this.disabled=true;
      });
    }
    if(calendarTypeSelect === "calendar-day-time"){
      var html = '<div class = "servicechat-admin-option sf-mobile-hidden">' +
        '<div style="display:block" class ="servicechat-admin-question textfield-wrapper-1-0 servicechat-admin-question-question">' +
        '<div class="sf-time-picker"><input class="sf-time-picker-input" placeholder="Pick a date and time below"></div>' +
        '<div class="sf-calen-confirm"><button type="button" class ="servicechat-question-button" id="sf-calendar-button" style="background-color: ' + cH.color1 + '">Continue</button></div>' +
        '</div>' +
        '</div>' +
        '<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">';
      var div = sfInlineWrapper.querySelector("#servicechat-parts-inner");
      div.insertAdjacentHTML("beforeend", html);
      ansCal = flatpickr(".sf-time-picker-input", {
        dateFormat:"n/j/Y H:i",
        enableTime:true,
        allowInput:true,
      });
      sfInlineWrapper.querySelector("#sf-calendar-button").addEventListener("click", function(){
        var summaryItemAnswer = {
          answer: [{
            dateAnswer:ansCal.selectedDates[0].toLocaleDateString('en-GB'),
            timeAnswer:ansCal.selectedDates[0].toLocaleTimeString(),
            dateTimeAnswer:ansCal.selectedDates[0].toString(),
          }],
          label: cH.questions[page].title,
          question: page,
          date: ''
        }
        sC.options.serviceChatAnswers.jump = cH.questions[page].jump;
        sC.options.serviceChatAnswers.summaryItems.push(
          summaryItemAnswer
        );
        sC.nextQuestion();
        this.disabled=true;
      });
    }
  },
  getWaitTime: function(page){
    var waitTime = '1000';
    if (page >= 0) {
      var minDuration = 1000;
      var dur = 0;

      var type = sC.options.cH.questions[page].type;
      if (page >= 0 && type === 'statement') {
        if (sC.options.cH.questions[page].defaultWaitingTime) {
          waitTime = sC.options.cH.questions[page].defaultWaitingTime;
        }
        if (typeof waitTime === 'undefined') {
          waitTime = '1000';
        }
        else {
          if (waitTime === 'auto') {
            var title = sC.options.cH.questions[page].title;
            var charLength = title.length
          }
        }

        var title = sC.options.cH.questions[page].title;
        title = sfTrimHtml(title);
        var charLength = title.length;
        var charLength = parseInt(charLength) * 15 + 1500;
        waitTime = charLength;

        if(typeof window.soundEffect[page] !== 'undefined') {
          minDuration = window.soundEffect[page]._duration * 1000;
        }

        if(minDuration > waitTime){
          waitTime = minDuration;
        }
      }
    } else {
      waitTime = 1000;
    }

    return waitTime;
  },
  addFileUploadQuestion: function(){
    var html = '<div class="sf-image-upload"><input type="hidden" role="uploadcare-uploader" id="uploadedImage" /></div>';
    var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
    div.insertAdjacentHTML('beforeend', html);

    var widget = uploadcare.Widget('[role=uploadcare-uploader]');

    var page = parseInt(sC.options.serviceChatAnswers.page) - 1;
    var cH = sC.options.cH;

    widget.onUploadComplete(function(info) {
      var savedFile = info.cdnUrl;

      var summaryItemAnswer = {
        "answer": [{
          "answer": savedFile,
          "amount": ''
        }],
        "label": cH.questions[page].title,
        "question": page,
        "price": ''
      }

      sC.options.serviceChatAnswers.jump = cH.questions[page].jump;
      sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

      sC.nextQuestion();
    });
  },
  calculatePrice: function (basePrice, include) {
    var itemsTotalPrice = 0;

    if (include) {
      var items = sC.options.serviceChatAnswers.summaryItems;

      for (var i = 0, max = items.length; i < max; i++) {
        if (typeof items[i].price !== 'undefined') {
          itemsTotalPrice = itemsTotalPrice + parseFloat(items[i].price);
        }
      }

    }

    var totalPrice = itemsTotalPrice + basePrice;

    return totalPrice;
  },
  completedPayment: function () {
    var cH = sC.options.cH;

    var dynamicColor = cH.color1;
    if (lightOrDark(cH.color1) === 'light') {
      dynamicColor = '#000000';
    }

    var stripeInteraction = sfInlineWrapper.querySelector('.sf-stripe-interaction');
    stripeInteraction.innerHTML = '<div class="sf-stripe-payment-complete">\n' +
      '        <div class="sf-stripe-payment-title">Payment successful</div>\n' +
      '        <div class="sf-stripe-payment-icon">\n' +
      '<svg version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve">\n' +
      '<g>\n' +
      '\t<g>\n' +
      '\t\t<path fill="' + dynamicColor + '" d="M468.907,214.604c-11.423,0-20.682,9.26-20.682,20.682v20.831c-0.031,54.338-21.221,105.412-59.666,143.812\n' +
      '\t\t\tc-38.417,38.372-89.467,59.5-143.761,59.5c-0.04,0-0.08,0-0.12,0C132.506,459.365,41.3,368.056,41.364,255.883\n' +
      '\t\t\tc0.031-54.337,21.221-105.411,59.667-143.813c38.417-38.372,89.468-59.5,143.761-59.5c0.04,0,0.08,0,0.12,0\n' +
      '\t\t\tc28.672,0.016,56.49,5.942,82.68,17.611c10.436,4.65,22.659-0.041,27.309-10.474c4.648-10.433-0.04-22.659-10.474-27.309\n' +
      '\t\t\tc-31.516-14.043-64.989-21.173-99.492-21.192c-0.052,0-0.092,0-0.144,0c-65.329,0-126.767,25.428-172.993,71.6\n' +
      '\t\t\tC25.536,129.014,0.038,190.473,0,255.861c-0.037,65.386,25.389,126.874,71.599,173.136c46.21,46.262,107.668,71.76,173.055,71.798\n' +
      '\t\t\tc0.051,0,0.092,0,0.144,0c65.329,0,126.767-25.427,172.993-71.6c46.262-46.209,71.76-107.668,71.798-173.066v-20.842\n' +
      '\t\t\tC489.589,223.864,480.33,214.604,468.907,214.604z"></path>\n' +
      '\t</g>\n' +
      '</g>\n' +
      '<g>\n' +
      '\t<g>\n' +
      '\t\t<path fill="' + dynamicColor + '" d="M505.942,39.803c-8.077-8.076-21.172-8.076-29.249,0L244.794,271.701l-52.609-52.609c-8.076-8.077-21.172-8.077-29.248,0\n' +
      '\t\t\tc-8.077,8.077-8.077,21.172,0,29.249l67.234,67.234c4.038,4.039,9.332,6.058,14.625,6.058c5.293,0,10.586-2.019,14.625-6.058\n' +
      '\t\t\tL505.942,69.052C514.019,60.975,514.019,47.88,505.942,39.803z"></path>\n' +
      '\t</g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '<g>\n' +
      '</g>\n' +
      '</svg>\n' +
      '</div>\n' +
      '        <div class="sf-stripe-payment-receipt">You will receive a receipt in your email.</div>\n' +
      '\n' +
      '    </div>';
  },
  startSubscription: function (account) {

    var dev = 0;
    if (window.location.href.indexOf("dev-servicehire") != -1 || window.location.href.indexOf("dev.netstory") != -1 || window.location.href.indexOf("test-servicehire") != -1) {
      dev = 1;
      var stripe = Stripe('pk_test_5sHof3AWPLkkUx21sUC4JBob', {stripeAccount: window.sfTokenAccount});
    }
    else {
      var stripe = Stripe('pk_live_5RsHYjjQafK21BbRkm0DHbBn', {stripeAccount: window.sfTokenAccount});
    }

    var elements = stripe.elements();
    var cardElement = elements.create('card');
    cardElement.mount('#card-element');

    var cardButton = sfInlineWrapper.querySelector('#card-button');

    cardButton.addEventListener('click', function (ev) {

      var cardholderName = sfInlineWrapper.querySelector('#cardholder-name').value;
      var cardholderEmail = sfInlineWrapper.querySelector('#cardholder-email').value;

      sfInlineWrapper.querySelector('.sf-stripe-loading').style.display = 'block';
      sfInlineWrapper.querySelector('.sf-stripe-payment-screen').style.display = 'none';

      var additionalData = {
        name: cardholderName,
        email: cardholderEmail
      };

      stripe.createToken(cardElement, additionalData).then(function (result) {
        if (result.token) {
          var page = parseInt(sC.options.serviceChatAnswers.page) - 1;
          var cardholderName = sfInlineWrapper.querySelector('#cardholder-name').value;
          var cardholderEmail = sfInlineWrapper.querySelector('#cardholder-email').value;

          sC.options.serviceChatAnswers.customerName = cardholderName;
          sC.options.serviceChatAnswers.customerEmail = cardholderEmail;

          var cH = sC.options.cH;

          // If we received a token, show the token ID.

          var xhr = new XMLHttpRequest();
          var url = "/api_call/create_stripe_subscription";

          xhr.open("POST", url, true);
          xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          var submission = {};

          submission['name'] = cardholderName;
          submission['email'] = cardholderEmail;

          submission['token'] = result.token.id;
          submission['nid'] = cH.nid;
          submission['price'] = cH.questions[page].price;
          submission['currency'] = cH.currency;
          submission['item'] = cH.questions[page].label;
          submission['sfSubscription'] = cH.questions[page].sfSubscription;
          submission['sfSubscriptionInterval'] = cH.questions[page].sfSubscriptionInterval;
          submission['sfSubscriptionIntervalCount'] = cH.questions[page].sfSubscriptionIntervalCount;

          var data = JSON.stringify(submission);

          xhr.send(data);

          xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.status === 200) {

              sC.completedPayment();
              sC.nextQuestion();
            }
          }
        }
        else {
          // Otherwise, un-disable inputs.
          sfInlineWrapper.querySelector('.sf-stripe-loading').style.display = 'none';
          sfInlineWrapper.querySelector('.sf-stripe-payment-screen').style.display = 'block';
        }
      });
    });
  },
  playButtonClick: function(){
    if (window.location.href.indexOf("netstory") != -1) {
      if(typeof window.sfSoundLibraryLoaded === 'undefined'){
        loadScript2('https://cdnjs.cloudflare.com/ajax/libs/howler/2.1.3/howler.core.min.js',loadSound);
        window.sfSoundLibraryLoaded = 1;
      } else {
        loadSound();
      }

      function loadSound(){
        var sound = new Howl({
          src: ['/assets/sounds/button.mp3'],
          html5: true,
        });

        sound.play();
      }
    }

  },
  startPayment: function (account) {

    if (window.location.href.indexOf("dev-servicehire") != -1 || window.location.href.indexOf("dev.netstory") != -1 || window.location.href.indexOf("test-servicehire") != -1) {
      dev = 1;
      var stripe = Stripe('pk_test_5sHof3AWPLkkUx21sUC4JBob', {stripeAccount: window.sfTokenAccount});
    }
    else {
      var stripe = Stripe('pk_live_5RsHYjjQafK21BbRkm0DHbBn', {stripeAccount: window.sfTokenAccount});
    }

    var elements = stripe.elements();
    var cardElement = elements.create('card');
    cardElement.mount('#card-element');

    var cardholderName = sfInlineWrapper.querySelector('#cardholder-name');
    var cardholderEmail = sfInlineWrapper.querySelector('#cardholder-email');

    var cardButton = sfInlineWrapper.querySelector('#card-button');
    var clientSecret = cardButton.dataset.secret;

    cardButton.addEventListener('click', function (ev) {

      sfInlineWrapper.querySelector('.sf-stripe-loading').style.display = 'block';
      sfInlineWrapper.querySelector('.sf-stripe-payment-screen').style.display = 'none';

      sC.options.serviceChatAnswers.customerName = cardholderName.value;
      sC.options.serviceChatAnswers.customerEmail = cardholderEmail.value;

      stripe.handleCardPayment(
        clientSecret, cardElement, {
          payment_method_data: {
            billing_details: {
              name: cardholderName.value,
              email: cardholderEmail.value
            }
          }
        }
      ).then(function (result) {
        if (result.error) {
          // Display error.message in your UI.
          alert(result.error.message);

          sfInlineWrapper.querySelector('.sf-stripe-loading').style.display = 'none';
          sfInlineWrapper.querySelector('.sf-stripe-payment-screen').style.display = 'block';

        }
        else {
          // The payment has succeeded. Display a success message.
          sC.options.serviceChatAnswers.paid = 1;

          sC.newStatistics('paid','');

          sC.completedPayment();
          sC.nextQuestion();
          sC.options.serviceChatAnswers.jump = cH.questions[question].jump;
        }
      });

    });
  },
  addSearchResults: function (answer, searchQuery, type) {
    if(type === 'algolia'){
      var hits = answer;
    } else {
      var hits = answer.hits;
    }

    var hitCount = hits.length;

    var olderOptions = sfInlineWrapper.querySelector('.servicechat-admin-option');
    if (olderOptions) {
      sC.sfRemoveElement(olderOptions);
    }

    if (parseInt(hitCount) === 0) {
      sC.addAdminAnswer(sC.gT('Unfortunately I couldnt find anything.'));
      sC.nextQuestion();
    }
    else {
      var cH = sC.options.cH;

      setTimeout(function () {

        if (parseInt(hitCount) > 4) {
          sC.addAdminAnswer(sC.gT('I found ') + parseInt(hitCount) + sC.gT(' results that could suit you. Here are the first four.'));
        }
        else {
          sC.addAdminAnswer(sC.gT('I found ') + parseInt(hitCount) + sC.gT(' results that could suit you.'));
        }

        setTimeout(function () {

          if (typeof cH.serviceChatImage === 'undefined') {
            if (typeof cH.logo === 'undefined') {
              cH.logo = 'https://app.serviceform.com/servicechat.svg';
            }
          }
          var loader = sC.initiateLoader();

          answer = sC.stringTokens(answer);

          var adminAnswerImage = cH.serviceChatImage;

          if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
            adminAnswerImage = window.sfDynamicServiceChatImage;
          }

          if (typeof sC.options.serviceChatAnswers.live !== 'undefined') {
            if (sC.options.serviceChatAnswers.live === 1) {
              //  adminAnswerImage =
              // 'https://app.serviceform.com/livechat/iranthi.png';
            }
          }

          var html = '<div class="sc-admin-wrap-search-wrap">';

          for (var i = 0, max = hits.length; i < max; i++) {

            if(type === 'algolia') {
              var imageUrl = hits[i].image;
              var city = hits[i].industry;
              var price = hits[i].price + ' LKR';
              var url = hits[i].url;
            } else {
              var imageUrl = hits[i].images.main;
              var city = searchQuery;
              var price = '';
              var url = hits[i].url;
            }

            if (i < 4) {
              html = html +
                '<a target="_blank" href="' + url + '">' +
                '<div class="sc-admin-question-wrap-search">' +
                '<div class="servicechat-admin-image">' +
                '<img src="' + imageUrl + '">' +
                '</div>' +
                '<div class="servicechat-admin-search-answer sc-search-answer">' +
                '' +
                '<div class="servicechat-category">' + city + '</div>' +
                '<div class="servicechat-title">' + hits[i].title + '</div>' +
                '<div class="servicechat-price">' + price + '</div>' +

                '</div>' +
                '</div></a>';
            }
            else if (i === 4) {
              html = html +
                '<div class="sf-show-more-button">' + sC.gT('Show more') + '</div>' +
                '<div class="sf-show-more-search"><a target="_blank" href="' + url + '">' +
                '<div class="sc-admin-question-wrap-search">' +
                '<div class="servicechat-admin-image">' +
                '<img src="' + imageUrl + '">' +
                '</div>' +
                '<div class="servicechat-admin-search-answer sc-search-answer">' +
                '' +
                '<div class="servicechat-category">' + city + '</div>' +
                '<div class="servicechat-title">' + hits[i].title + '</div>' +
                '<div class="servicechat-price">' + price + ' </div>' +

                '</div>' +
                '</div></a>';
            }
            else {
              html = html +
                '<a target="_blank" href="' + url + '">' +
                '<div class="sc-admin-question-wrap-search">' +
                '<div class="servicechat-admin-image">' +
                '<img src="' + imageUrl + '">' +
                '</div>' +
                '<div class="servicechat-admin-search-answer sc-search-answer">' +
                '' +
                '<div class="servicechat-category">' + city + '</div>' +
                '<div class="servicechat-title">' + hits[i].title + '</div>' +
                '<div class="servicechat-price">' + price + ' </div>' +

                '</div>' +
                '</div></a>';
            }
          }

          var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

          html = html + '</div>';

          div.insertAdjacentHTML('beforeend', html);

          sC.addShowMore(div);

          setTimeout(function () {
            sC.nextQuestion();
            sC.addShowMore();
          }, 3000);

        }, 2000);
      }, 1000);

    }
  },
  addShowMore: function () {
    var showMore = sfInlineWrapper.querySelector('.sf-show-more-button');

    if (showMore) {
      showMore.addEventListener('click', function () {
        this.style.display = 'none';
        var searchMore = sfInlineWrapper.querySelector('.sf-show-more-search');
        searchMore.style.display = 'block';
      });
    }
  },
  addDynamicAnswer: function (answer, delay) {
    var event = new Date();

    var cH = sC.options.cH;

    if (typeof cH.serviceChatImage === 'undefined') {
      if (typeof cH.logo === 'undefined') {
        cH.logo = 'https://app.serviceform.com/servicechat.svg';
      }
    }
    var loader = sC.initiateLoader();

    if (typeof sC.options.serviceChatAnswers.customerName !== 'undefined') {
      answer = answer.replace("#customerName", sC.options.serviceChatAnswers.customerName);
    }
    else {
      if (typeof answer !== 'undefined') {
        answer = answer.replace("#customerName", '');
      }
    }

    var adminAnswerImage = cH.serviceChatImage;

    if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
      adminAnswerImage = window.sfDynamicServiceChatImage;
    }

    if (typeof sC.options.serviceChatAnswers.live !== 'undefined') {
      if (sC.options.serviceChatAnswers.live === 1) {
        // adminAnswerImage = 'https://app.serviceform.com/livechat/iranthi.png';
      }
    }

    var image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+adminAnswerImage+'">';

    var html = '<div class="sc-admin-question-wrap">' +
      image +
      '<div class="servicechat-admin-question sc-question">' + loader + '<div class="delay">' + answer + '</div></div></div>';

    var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

    div.insertAdjacentHTML('beforeend', html);

    sC.initDelay();
    sC.scrollToBottomOfChat('force');
  },
  addAdminAnswerHTML: function (page) {
    var cH = sC.options.cH;
    var answer =  cH.questions[page].html;

    var event = new Date();

    var log = {
      "user": 0,
      "timestamp": event.getTime(),
      "text": answer
    }

    sC.options.serviceChatAnswers.answers.generic.push(log);

    if (typeof cH.serviceChatImage === 'undefined') {
      if (typeof cH.logo === 'undefined') {
        cH.logo = 'https://app.serviceform.com/servicechat.svg';
      }
    }
    var loader = sC.initiateLoader();

    answer = sC.stringTokens(answer);

    var adminAnswerImage = cH.serviceChatImage;

    if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
      adminAnswerImage = window.sfDynamicServiceChatImage;
    }

    if (typeof sC.options.serviceChatAnswers.live !== 'undefined') {
      if (sC.options.serviceChatAnswers.live === 1) {
        //adminAnswerImage = 'https://app.serviceform.com/livechat/iranthi.png';
      }
    }
    var image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+adminAnswerImage+'">';

    var html = '<div class="sc-admin-question-wrap">' +
      image +
      '<div class="servicechat-admin-question-html">' + answer + '</div></div>';

    var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

    div.insertAdjacentHTML('beforeend', html);

    sC.initDelay();
    sC.postStatistics();
    sC.scrollToBottomOfChat('force');

    sC.options.serviceChatAnswers.jump = cH.questions[page].jump;

    setTimeout(function () {
      sC.nextQuestion();
    }, 1000);
  },
  addAdminAnswer: function (answer) {
    var cH = sC.options.cH;

    var event = new Date();

    var log = {
      "user": 0,
      "timestamp": event.getTime(),
      "text": answer
    }

    sC.options.serviceChatAnswers.answers.generic.push(log);

    if (typeof cH.serviceChatImage === 'undefined') {
      if (typeof cH.logo === 'undefined') {
        cH.logo = 'https://app.serviceform.com/servicechat.svg';
      }
    }
    var loader = sC.initiateLoader();

    answer = sC.stringTokens(answer);

    var adminAnswerImage = cH.serviceChatImage;

    if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
      adminAnswerImage = window.sfDynamicServiceChatImage;
    }

    if (typeof sC.options.serviceChatAnswers.live !== 'undefined') {
      if (sC.options.serviceChatAnswers.live === 1) {
        //adminAnswerImage = 'https://app.serviceform.com/livechat/iranthi.png';
      }
    }

    var page = sC.options.serviceChatAnswers.page;
    page = parseInt(page) - 1;
    var charName = '';
    if(typeof sC.options.cH.questions[page].character !== 'undefined'){
      var chosenChar = sC.options.cH.questions[page].character;
      if(typeof sC.options.cH.characters !== 'undefined') {
        var characters = sC.options.cH.characters;
        for (var i = 0; i < characters.length; i++) {
          if(chosenChar === characters[i].charId){
            adminAnswerImage = characters[i].image;
            if(characters[i].name !== ''){
              charName = '<div class="char-name">'+characters[i].name+'</div>';
            }
          }
        }
      }
    }

    var image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+adminAnswerImage+'">';

    var html = '<div class="sc-admin-question-wrap">' +
      charName +
      image +
      '<div class="servicechat-admin-question sc-question">' + loader + '<div class="delay">' + answer + '</div></div></div>';

    var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

    div.insertAdjacentHTML('beforeend', html);

    sC.initDelay();
    sC.postStatistics();
    sC.scrollToBottomOfChat('force');
  },
  scrollToBottomOfChat: function (type) {
    var cH = sC.options.cH;

    var scrollToBottom = 1;
    if (typeof cH.scrollToBottom !== 'undefined') {
      scrollToBottom = 0;
    }

    if (scrollToBottom === 1 || type === 'force') {
      var myElement = sfInlineWrapper.querySelector('#servicechat-parts-outer-clearfix');
      var topPos = myElement.offsetTop;

      sfInlineWrapper.querySelector('#servicechat-parts').scrollTop = topPos;
      var search = sfInlineWrapper.querySelector('.sf-fullpage');
      if(search) {
        sfInlineWrapper.querySelector('.sf-fullpage').scrollTop = topPos;
      }
    }

    var search = sfInlineWrapper.querySelector('.sf-search');
    if(search) {
      sfInlineWrapper.querySelector('#servicechat-parts').scrollTop = 0;
      sfInlineWrapper.querySelector('.sf-search').scrollTop = 0;
    }
  },
  scrollToTopOfChat: function () {
    sfInlineWrapper.querySelector('#servicechat-parts').scrollTop = 0;

  },
  addAnswer: function (answer) {
    var cH = sC.options.cH;
    var event = new Date();

    var log = {
      "user": 1,
      "timestamp": event.getTime(),
      "text": answer
    }

    sC.options.serviceChatAnswers.answers.generic.push(log);

    dataLayerStart(sC);
    sC.newStatistics('interaction','');
    sC.options.serviceChatAnswers.answers.customer.push(answer);

    var html = '<div class="servicechat-user-selected sc-question" style="background-color:' + cH.color1 + '">' + answer + '</div>';
    var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

    div.insertAdjacentHTML('beforeend', html);

    sC.scrollToBottomOfChat('force');
    if (sC.options.serviceChatAnswers.live === 1) {
      sC.postStatistics();
    }

  },
  userSelectedOption: function (type, question, option, answer) {

    var cH = sC.options.cH;

    var title = cH.questions[question].title;

    if (typeof cH.questions[question].options[0] !== 'undefined') {
      if (typeof cH.questions[question].options[option] !== 'undefined') {
        if (typeof cH.questions[question].options[option].sendCopyToEmail !== 'undefined' && cH.questions[question].options[option].sendCopyToEmail !== '') {
          sC.options.serviceChatAnswers.emailCopy = cH.questions[question].options[option].sendCopyToEmail;
        }
      }
      if (typeof cH.questions[question].options[0].fieldType !== 'undefined') {
        if (cH.questions[question].options[0].fieldType === 'name') {
          sC.options.serviceChatAnswers.customerName = answer.trim();
          sC.options.serviceChatAnswers.customerFullName = answer.trim();
        }
        if (cH.questions[question].options[0].fieldType === 'firstName') {
          sC.options.serviceChatAnswers.customerFirstName = answer.trim();
          sC.options.serviceChatAnswers.customerName = answer.trim();
        }
        if (cH.questions[question].options[0].fieldType === 'lastName') {
          sC.options.serviceChatAnswers.customerLastName = answer.trim();
        }
        if (cH.questions[question].options[0].fieldType === 'postalCode') {
          var postalCode = answer.trim();
          if(postalCode.length > 4){
            sC.options.serviceChatAnswers.postalCode = answer.trim();
          } else {
            sC.addAdminAnswer(sC.gT('Post code requires more than four digits.'));
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
        if (cH.questions[question].options[0].fieldType === 'postalCodeNumbers') {
          var postalCode = answer.trim();
          if(postalCode.match(/^[0-9]+$/) != null){
            sC.options.serviceChatAnswers.postalCode = answer.trim();
          } else {
            sC.addAdminAnswer(sC.gT('Could you please enter your post code with only numbers')+'.');
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
        if (cH.questions[question].options[0].fieldType === 'numbersOnly') {
          var postalCode = answer.trim();
          if(postalCode.match(/^[0-9]+$/) != null){
          } else {
            sC.addAdminAnswer(sC.gT('Could you please enter only numbers')+'.');
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
        if (cH.questions[question].options[0].fieldType === 'lettersOnly') {
          var lettersOnly = answer.trim();
          if (!/^[a-zA-Z\s]*$/.test(lettersOnly)){
            sC.addAdminAnswer(sC.gT('Could you please enter only letters.'));
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
        if (cH.questions[question].options[0].fieldType === 'address') {
          sC.options.serviceChatAnswers.address = answer.trim();
        }
        if (cH.questions[question].options[0].fieldType === 'message') {
          sC.options.serviceChatAnswers.message = answer.trim();
        }
        if(cH.questions[question].options[0].fieldType === 'phoneValidate'){
          intTel[0].setNumber(answer.trim());
          if(intTel[0].isValidNumber()){
            sC.options.serviceChatAnswers.customerPhone = intTel[0].getNumber();
          } else {
            sC.addAdminAnswer(sC.gT('Please add a valid phone number'));
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
        if (cH.questions[question].options[0].fieldType === 'phone') {
          var nowPhone = answer.trim();

          if (validatePhone(nowPhone) && nowPhone.length > 6) {
            sC.options.serviceChatAnswers.customerPhone = answer.trim(nowPhone);
          }
          else {
            sC.addAdminAnswer(sC.gT('Please add a valid phone number'));
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
        if (cH.questions[question].options[0].fieldType === 'email') {
          var nowEmail = answer.trim();
          if (validateEmail(nowEmail)) {
            sC.options.serviceChatAnswers.customerEmail = answer.trim(nowEmail);
          }
          else {
            sC.addAdminAnswer(sC.gT('Could I get a valid email first?'));
            sC.addUserOptions(sC.options.serviceChatAnswers.page - 1);
            return;
          }
        }
      }
      sC.options.serviceChatAnswers.jump = cH.questions[question].jump;

    }

    if (option !== 'false') {
      if (Array.isArray(option)) {
        var answer = '';
        var price = 0;
        for (var i = 0; i < option.length; i++) {
          var currentAnswer = option[i].answer;
          var currentPrice = option[i].price;

          price = parseFloat(currentPrice) + price;
          if(i === 0){
            answer = currentAnswer;
          } else {
            answer = answer + ', ' + currentAnswer;
          }
        }

        var summaryItemAnswer = {
          "answer": [{
            "answer": answer,
            "amount": price
          }],
          "label": title,
          "question": question,
          "price": price
        }

        sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

        var answer = answer;

      }
      else {
        var selected = cH.questions[question].options[option];

        if (option === 'contact-button') {
          var summaryItemAnswer = {
            "answer": [{
              "answer": sC.options.cH.contactButtonText,
              "amount": ''
            }],
            "label": 'Contact us',
            "question": 0,
            "price": ''
          }

          var answer = sC.options.cH.contactButtonText;
          sC.options.serviceChatAnswers.jump = sC.options.cH.contactJump;
          sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);
        }
        else {
          if (typeof cH.questions[question].options[option].skip !== 'undefined') {
            sC.options.serviceChatAnswers.skip += ',' + cH.questions[question].options[option].skip;
          }
          if (typeof cH.questions[question].jump !== 'undefined') {
            sC.options.serviceChatAnswers.jump = cH.questions[question].jump;
          }
          if (typeof cH.questions[question].options[option].jump !== 'undefined') {
            sC.options.serviceChatAnswers.jump = cH.questions[question].options[option].jump;
          }

          var price = 0;
          if (typeof cH.questions[question].options[option].price !== 'undefined') {
            price = parseFloat(cH.questions[question].options[option].price);
          }

          if (typeof cH.questions[question].options[option].oid !== 'undefined') {
            sC.newStatistics('option', cH.questions[question].options[option].oid);
          }

          sC.options.serviceChatAnswers.results[title] = selected.answer;

          var summaryItemAnswer = {
            "answer": [{
              "answer": selected.answer,
              "amount": price
            }],
            "label": title,
            "question": question,
            "price": price
          }

          sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

          var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-option');
          if (options.length) {
            sC.sfRemoveElement(options[0]);
          }
          var answer = selected.answer;

          function openInNewTab(url, type) {
            if(type){
              var win = window.open(url, '_blank');
              win.focus();
            } else {
              setTimeout(function () {
                window.location.replace(url);
              }, 1000);
            }
          }

          if (typeof cH.questions[question].options[option].redirectOnClick !== 'undefined') {
            if (cH.questions[question].options[option].redirectOnClick !== '') {

              var redirectLink = cH.questions[question].options[option].redirectOnClick;
              var newTab = 1;
              if(typeof cH.questions[question].options[option].redirectSameTab !== 'undefined'){
                if(cH.questions[question].options[option].redirectSameTab === '1'){
                  newTab = 0;
                }
              }
              redirectLink = sC.stringTokens(redirectLink);
              openInNewTab(redirectLink, newTab);
            }
          }

          if (typeof cH.questions[question].options[option].customJavascript !== 'undefined') {
            if (cH.questions[question].options[option].customJavascript !== '') {
              var customJS = cH.questions[question].options[option].customJavascript;
              if(sC.checkForJson(customJS)){
                eval(JSON.parse(customJS));
              } else {
                eval(customJS);
              }
            }
          }

          if (typeof cH.questions[question].options[option].hiddenToken !== 'undefined') {
            if (cH.questions[question].options[option].hiddenToken !== '') {
              var tokenId = parseInt(question) + 1;
              var answerToken = {
                'token': '#token' + tokenId,
                'answer': cH.questions[question].options[option].hiddenToken
              }

              sC.options.serviceChatAnswers.hiddenTokens.push(answerToken);
            }
          }
        }
      }

      if(type !== 'dynamic') {
        sC.addAnswer(answer);
      }
    }
    else {
      sC.options.serviceChatAnswers.results[title] = answer;

      var summaryItemAnswer = {
        "answer": [{
          "answer": answer
        }],
        "label": title,
        "question": question
      }

      sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

      var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-option');
      if (options.length) {
        sC.sfRemoveElement(options[0]);
      }

    }

    sC.options.serviceChatAnswers.amount = sC.calculatePrice(0,1);
    sC.options.serviceChatAnswers.fullAmount = sC.calculatePrice(0,1);

    if (answer !== '') {
      var tokenId = parseInt(question) + 1;

      var answerToken = {
        'token': '#question' + tokenId,
        'answer': answer
      }

      sC.options.serviceChatAnswers.tokens.push(answerToken);


      let q = sC.options.cH.questions;
      if (typeof q[question].customJavascript !== 'undefined') {
        if (q[question].customJavascript !== '') {
          var customJS = q[question].customJavascript;
          if(sC.checkForJson(customJS)){
            eval(JSON.parse(customJS));
          } else {
            eval(customJS);
          }
        }
      }

      sC.nextQuestion();
    }
  },
  removeOptions: function () {
    var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-option');
    if (options.length) {
      sC.sfRemoveElement(options[0]);
    }
  },
  showNextOption: function (question, option, answer) {
    var cH = sC.options.cH;

    var count = cH.questions[question].options.length;
    var nextOption = parseInt(option) + 1;

    if(typeof cH.questions[question].jump !== 'undefined') {
      sC.options.serviceChatAnswers.jump = cH.questions[question].jump;
    }

    if (nextOption >= count) {

      var html = '<div class="servicechat-user-selected sc-question" style="background-color:' + cH.color1 + '">' + answer + '</div>';
      var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');

      div.insertAdjacentHTML('beforeend', html);

      var options = sfInlineWrapper.getElementsByClassName('servicechat-admin-option');
      sC.sfRemoveElement(options[0]);

      sC.nextQuestion();
    }

    var title = cH.questions[question].options[option].label;
    sC.options.serviceChatAnswers.results[title] = answer;

    var summaryItemAnswer = {
      "answer": [{
        "answer": answer
      }],
      "label": title,
      "question": question
    }

    sC.options.serviceChatAnswers.summaryItems.push(summaryItemAnswer);

    var selector = '.textfield-wrapper-' + question + '-' + nextOption;
    if (selector) {
      var e = sfInlineWrapper.querySelector(selector);
      if (e) {
        if (e.style.display === 'block') {
          e.style.display = 'none';
        }
        else {
          e.style.display = 'block';
          setTimeout(function () {
            e.style.opacity = '1';
          }, 50);
        }
      }
    }
  },
  loadIntTel: function() {
    var cH = sC.options.cH;

    var input = sfInlineWrapper.getElementsByClassName("sf-text-validation-phoneIntTel");
    if(input) {
      loadScript2('https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/14.0.1/js/intlTelInput.min.js', function () {
        loadScript2('https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/14.0.1/js/utils.js', function () {
          var link = document.createElement("link");
          link.href = 'https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/14.0.1/css/intlTelInput.css';
          link.type = "text/css";
          link.rel = "stylesheet";
          link.media = "screen,print";

          document.getElementsByTagName("head")[0].appendChild(link);

          var input = document.getElementsByClassName("sf-text-validation-phoneIntTel");
          window.intTel = {};

          var preferred = [];

          var setCountry = 'ae';
          var currency = cH.currency;
          if(typeof cH.language !== 'undefined'){
            var language = cH.language;
          } else {
            language = 'en';
          }
          preferred = ['us', 'gb', 'ca', 'fi'];

          if(currency === 'usd'){
            setCountry = 'us';
            preferred = ['us', 'gb', 'ca'];
          } else if (currency === 'eur') {
            if(language === 'fi'){
              setCountry = 'fi';
              preferred = ['fi', 'se', 'no'];
            }
          } else if(currency === 'gbp'){
            setCountry = 'gb';
            preferred = ['gb', 'us', 'ca'];
          } else if(currency === 'inr'){
            preferred = ['in', 'ae', 'se'];
            setCountry = 'in';
          }

          if(language === 'fi'){
            setCountry = 'fi';
            preferred = ['fi', 'se', 'no'];
          }

          if(language === 'es'){
            preferred = ['es', 'fr', 'pt'];
            setCountry = 'es';
          }

          if(language === 'ca'){
            preferred = ['es', 'pt', 'fr'];
            setCountry = 'es';
          }

          if(language === 'pt'){
            preferred = ['pt','es', 'fr'];
            setCountry = 'pt';
          }

          if(language === 'fr'){
            preferred = ['fr', 'es', 'uk'];
            setCountry = 'fr';
          }

          if(currency === 'lkr'){
            preferred = ['in']
            setCountry = 'lk';
          }

          for (var i = 0; i < input.length; i++) {
            input[i].setAttribute('input-id', i);
            window.intTel[i] = intlTelInput(input[i], {
              allowDropdown: true,
              utilsScript: "https://cdnjs.cloudflare.com/ajax/libs/intl-tel-input/14.0.1/js/utils.js",
              autoHideDialCode: true,
              autoPlaceholder: "off",
              // excludeCountries: ["us"],
              formatOnDisplay: true,
              // geoIpLookup: function(callback) {
              //   $.get("http://ipinfo.io", function() {}, "jsonp").always(function(resp) {
              //     var countryCode = (resp && resp.country) ? resp.country : "";
              //     callback(countryCode);
              //   });
              // },
              // hiddenInput: "full_number",
              initialCountry: setCountry,
              // localizedCountries: { 'de': 'Deutschland' },
              // nationalMode: false,
              // onlyCountries: ['us', 'gb', 'ch', 'ca', 'do'],
              // placeholderNumberType: "MOBILE",
              preferredCountries: preferred
              // separateDialCode: true,
            });

            // on blur: validate
            input[i].addEventListener('input', function () {
              this.classList.remove('sf-error-validation');
              var k = this.getAttribute('input-id');

              if (this.value.trim()) {
                if (window.intTel[k].isValidNumber()) {
                  this.classList.add('sf-validated');
                  this.setAttribute('error','');
                }
                else {
                  this.classList.add("sf-error-validation");
                  var errorCode = window.intTel[k].getValidationError();
                  this.setAttribute('error', errorCode);
                }
              }
            });

            // on keyup / change flag: reset
            input[i].addEventListener('change', function () {
              this.classList.remove('error');
            });
            input[i].addEventListener('keyup', function () {
              this.classList.remove('error');
            });
          }
        })
      })
    }

    var dob = sfInlineWrapper.querySelector(".sf-text-validation-dob");
    if(dob){

      dob.setAttribute('placeholder','dd/mm/yyyy');
      loadJquery();

      function loadJquery(){
        if (typeof window.jQuery === 'undefined') {
          loadScript2('https://code.jquery.com/jquery-1.12.4.js', loadQueryUi);
        } else {
          loadQueryUi();
        }
      }

      function loadQueryUi(){
        var link = document.createElement("link");
        link.href = '//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css';
        link.type = "text/css";
        link.rel = "stylesheet";
        link.media = "screen,print";

        document.getElementsByTagName("head")[0].appendChild(link);

        if (typeof jQuery.ui === 'undefined'){
          loadScript2('https://code.jquery.com/ui/1.12.1/jquery-ui.js', loadDatepicker);
        } else {
          loadDatepicker();
        }
      }

      function loadDatepicker(){
        $(".sf-text-validation-dob").datepicker({
          changeMonth: true,
          changeYear: true,
          showAnim: "clip",
          yearRange: "1910:2020",
          dateFormat: "dd/mm/yy",
          minDate: "01/01/1910",
          maxDate: "31/12/2020"
        }).on('blur', function() { // This check is for dd/mm/yyyy format but can be easily adapted to any other
          if(this.value.match(/\d{1,2}[^\d]\d{1,2}[^\d]\d{4,4}/gi) == null){

          }
          else {
            var t = this.value.split(/[^\d]/);
            var dd = parseInt(t[0], 10);
            var m0 = parseInt(t[1], 10) - 1; // Month in JavaScript Date object is 0-based
            var yyyy = parseInt(t[2], 10);
            var d = new Date(yyyy, m0, dd); // new Date(2017, 13, 32) is still valid
            if(d.getDate() != dd || d.getMonth() != m0 || d.getFullYear() != yyyy){

            }
          }
        });
      }
    }
  },
  checkForJson: function(text){
    if (/^[\],:{}\s]*$/.test(text.replace(/\\["\\\/bfnrtu]/g, '@').
    replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']').
    replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {
      return 1;
    } else {
      return 0;
    }
  },
  loadNextSound(page){
    var inlineBg = sfInlineWrapper.querySelector('#sf-inline-image');
    if (inlineBg) {
      var previousPage = page;
      if(typeof sC.options.cH.questions[previousPage] !== 'undefined') {
        if (typeof sC.options.cH.questions[previousPage].sound !== 'undefined') {
          var sound = sC.options.cH.questions[previousPage].sound;
          if (typeof sound !== 'undefined' && sound !== '') {
            if (typeof window.sfSoundLibraryLoaded === 'undefined') {
              loadScript2('https://cdnjs.cloudflare.com/ajax/libs/howler/2.1.3/howler.core.min.js', loadSound);
              window.sfSoundLibraryLoaded = 1;
            }
            else {
              loadSound();
            }

            function loadSound() {
              if (typeof window.soundEffect[previousPage] !== 'undefined') {
                window.soundEffect[previousPage].stop();
              }

              var soundType = sC.options.cH.questions[previousPage].soundType;
              var sound = sC.options.cH.questions[previousPage].sound;
              if (soundType === 'music') {
                var loop = 0;
                if (sC.sfDevModeOff) {
                  loop = 1;
                }

                if (typeof window.bgSound !== 'undefined') {
                  window.bgSound.stop();
                }

                window.bgSound = new Howl({
                  src: [sound],
                  html5: true,
                  loop: loop,
                  volume: 0.1
                });

                window.bgSound.play();
              }
              else {
                window.soundEffect[previousPage] = new Howl({
                  src: [sound],
                  html5: true
                });
                window.soundEffect[previousPage].play();
                window.soundEffect[previousPage].stop();
              }
            }
          }
        }
      }
    }
  },
  nextQuestion: function () {
    var cH = sC.options.cH;
    var page = sC.options.serviceChatAnswers.page;
    sC.loadNextSound(page);
    var waitTime = sC.getWaitTime(page-1);
    window.sfWaitTime = waitTime;

    var outer = sfInlineWrapper.querySelector('#servicechat-parts-outer-clearfix');
    if (outer) {
      outer.innerHTML = '';
    }
    var cH = sC.options.cH;

    var page = sC.options.serviceChatAnswers.page;

    var count = cH.questions.length;

    if (typeof sC.options.serviceChatAnswers.jump !== 'undefined') {
      if (sC.options.serviceChatAnswers.jump !== '') {
        if (sC.options.serviceChatAnswers.jump === 'stop') {
          return;
        }
        if (sC.options.serviceChatAnswers.jump === 'end') {
          sC.serviceChatThanks();
          return;
        }
        if (sC.options.serviceChatAnswers.jump === 'end-submit') {
          return;
        }

        sC.options.serviceChatAnswers.page = sC.getPageFromId(sC.options.serviceChatAnswers.jump);
        sC.options.serviceChatAnswers.jump = '';
        sC.nextQuestion();
        return;
      }
    }

    if (typeof sC.options.serviceChatAnswers.skip !== 'undefined') {
      if (sC.options.serviceChatAnswers.skip !== '') {
        var skip = sC.options.serviceChatAnswers.skip;

        var skipArray = skip.split(',');
        var currentpage = parseInt(page + 1);

        var here = (skipArray.indexOf(String(currentpage)) > -1);

        if (here) {
          sC.options.serviceChatAnswers.page = parseInt(parseInt(sC.options.serviceChatAnswers.page) + 1);
          sC.nextQuestion();
          return;
        }
      }
    }

    if (count === page) {
      sC.serviceChatThanks();
    }
    else {
      sC.options.serviceChatAnswers.page = parseInt(parseInt(page) + 1);

      sC.newStatistics('path', page);
      sC.addAdminQuestion(page);
      sC.addUserOptions(page);
    }
    var objDiv = sfInlineWrapper.querySelector("#servicechat-parts-inner");
    objDiv.scrollTop = objDiv.scrollHeight;
  },
  loadFullPage: function(){
    var questions = sC.options.cH.questions;
    if(questions){
      for (var i = 0; i < questions.length; i++) {
        if(i < 20) {
          if (typeof questions[i].background !== 'undefined' && questions[i].background !== '') {
            var url = questions[i].background;
            var img = new Image();
            img.src = url + '/-/setfill/ece3d2/-/scale_crop/1200x900/center/';
          }
        }
      }
    }
  },
  alterBackground: function(page){
    var previousPage = page;
    var nextPage = page + 1;

    var bgType = sC.options.cH.questions[page].backgroundType;
    var bg = sC.options.cH.questions[page].background;

    if(typeof bg !== 'undefined' && bg !== ''){
      if(bg.indexOf("matterport") > -1) {

        var html = '<iframe width="100%" id="showcase_iframe" height="100%" src="' + bg + '" frameborder="0"></iframe>';

        loadScript2('https://static.matterport.com/showcase-sdk/2.0.1-0-g64e7e88/sdk.js', doNow);

        function doNow() {
          var inlineBg = sfInlineWrapper.querySelector('#sf-inline-image');
          if (inlineBg) {
            inlineBg.innerHTML = html;

            var iframe = sfInlineWrapper.querySelector('#showcase_iframe');

            iframe.addEventListener('load', showcaseLoader, true);

            function loadedShowcaseHandler(mpSdk) {
              window.mpSdk = mpSdk;
            }

            function showcaseLoader() {
              window.showcase = window.MP_SDK.connect(
                iframe, // Obtained earlier
                '8f42bbed521548f9b87b209432275b33', // Your API key
                '3.2' // SDK version you are using
                // Use the latest version you can for your app
              )
                .then(function(mpSdk) {
                  // Model.Event.MODEL_LOADED
                  loadedShowcaseHandler(mpSdk);
                })
            };

            inlineBg.style.background = '';
          }
        }
      } else if(bg.indexOf("vimeo") > -1){

        html = '<div id="myVideo"></div><style>#myVideo iframe{height:100vh; width: 100%;}</style>';

        var inlineBg = document.querySelector('#sf-inline-image');
        if (inlineBg) {
          inlineBg.innerHTML = html;
        }

        loadScript2('https://player.vimeo.com/api/player.js', doNow);

        function doNow() {
          var options = {
            url: bg,
            width: "100%",
            height: "100%",
            autoplay: 1
          };

          window.videoPlayer = new Vimeo.Player('myVideo', options);

          videoPlayer.on('play', function () {
            console.log('Played the video');
          });
        }

      }
      else if(bg.indexOf("youtube") > -1) {
        var html = '<iframe width="100%" height="100%" src="'+bg+'" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen start=225&end=268></iframe>';

        var inlineBg = document.querySelector('#sf-inline-image');
        if (inlineBg) {
          inlineBg.innerHTML = html;
        }
      } else if (typeof bgType !== 'undefined' && bgType.indexOf("video") > -1){
        var html = '<video playsinline autoplay muted loop class="fullscreen-bg__video">' +
          '<source src= ' +bg+ ' type="video/mp4">' +
          '</video>';
        var inlineBg = sfInlineWrapper.querySelector('#sf-inline-image');
        if(inlineBg){
          inlineBg.innerHTML = html;
          inlineBg.style.background = '';
        }
      } else {
        var inlineBg = sfInlineWrapper.querySelector('#sf-inline-image');
        if (inlineBg) {
          inlineBg.innerHTML = '';
          if(typeof sC.options.cH.dontScaleImages !== 'undefined' && sC.options.cH.dontScaleImages === '1'){
            inlineBg.style.background = 'url(' + bg + ')';
          } else {
            inlineBg.style.background = 'url(' + bg + '/-/setfill/ece3d2/-/scale_crop/1200x900/smart_faces_objects/)';
          }
        }
      }
    }
  },

  serviceChatThanks: function() {
    var cH = sC.options.cH;

    var title = cH.submitted.title;
    var subtitle = cH.submitted.subtitle;
    var ratetitle = cH.submitted.ratetitle;

    if (title !== '') {
      if (title) {
        title = sC.stringTokens(title);
      }

      var adminAnswerImage = cH.serviceChatImage;

      if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
        adminAnswerImage = window.sfDynamicServiceChatImage;
      }

      if (typeof adminAnswerImage === 'undefined') {
        adminAnswerImage = 'https://app.serviceform.com/servicechat.svg';
      }

      var image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+adminAnswerImage+'">';

      var html = '<div class="sc-admin-question-wrap">' +
        image +
        '<div class="servicechat-admin-question sc-question">' + title + '</div>' +
        '</div>';

      var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
      div.insertAdjacentHTML('beforeend', html);
    }

    if (typeof cH.loadRating !== "undefined" && cH.loadRating === "1") {
      if (ratetitle) {
        ratetitle = sC.stringTokens(ratetitle);
      }

      var adminAnswerImage = cH.serviceChatImage;

      if (typeof window.sfDynamicServiceChatImage !== "undefined") {
        adminAnswerImage = window.sfDynamicServiceChatImage;
      }

      if (typeof adminAnswerImage === "undefined") {
        adminAnswerImage = "https://app.serviceform.com/servicechat.svg";
      }

      var image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+adminAnswerImage+'">';

      var html =
        '<div class="sc-admin-question-wrap">' +
        image +
        '<div class="servicechat-admin-question sc-question">' +
        ratetitle +
        '<div class="serviceform-feedback-chatbot"> ' +
        '<div class="serviceform-rating-chatbot"> ' +
        '<input type="radio" name="rating" id="serviceform-rating-5"> ' +
        '<label for="rating-5"></label> ' +
        '<input type="radio" name="rating" id="serviceform-rating-4"> ' +
        '<label for="rating-4"></label> ' +
        '<input type="radio" name="rating" id="serviceform-rating-3"> ' +
        '<label for="rating-3"></label> ' +
        '<input type="radio" name="rating" id="serviceform-rating-2"> ' +
        '<label for="rating-2"></label> ' +
        '<input type="radio" name="rating" id="serviceform-rating-1"> ' +
        '<label for="rating-1"></label> ' +
        '<div class="serviceform-emoji-wrapper"> ' +
        '<div class="serviceform-emoji"> ' +
        '<svg class="rating-0" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"> ' +
        '<circle cx="256" cy="256" r="256" fill="#ffd93b" /> ' +
        '<path d="M512 256c0 141.44-114.64 256-256 256-80.48 0-152.32-37.12-199.28-95.28 43.92 35.52 99.84 56.72 160.72 56.72 141.36 0 256-114.56 256-256 0-60.88-21.2-116.8-56.72-160.72C474.8 103.68 512 175.52 512 256z" ' +
        'fill="#f4c534" /> ' +
        '<ellipse transform="scale(-1) rotate(31.21 715.433 -595.455)" cx="166.318" cy="199.829" rx="56.146"' +
        'ry="56.13" fill="#fff" />' +
        '<ellipse transform="rotate(-148.804 180.87 175.82)" cx="180.871" cy="175.822" rx="28.048" ry="28.08" fill="#3e4347" />'+
        '<ellipse transform="rotate(-113.778 194.434 165.995)" cx="194.433" cy="165.993" rx="8.016" ry="5.296" fill="#5a5f63" />'+
        '<ellipse transform="scale(-1) rotate(31.21 715.397 -1237.664)" cx="345.695" cy="199.819" rx="56.146" ry="56.13" fill="#fff" />'+
        '<ellipse transform="rotate(-148.804 360.25 175.837)" cx="360.252" cy="175.84" rx="28.048" ry="28.08" fill="#3e4347" />'+
        '<ellipse transform="scale(-1) rotate(66.227 254.508 -573.138)" cx="373.794" cy="165.987" rx="8.016" ry="5.296" fill="#5a5f63" />'+
        '<path d="M370.56 344.4c0 7.696-6.224 13.92-13.92 13.92H155.36c-7.616 0-13.92-6.224-13.92-13.92s6.304-13.92 13.92-13.92h201.296c7.696.016 13.904 6.224 13.904 13.92z" fill="#3e4347" />'+
        '</svg>'+
        '<svg class="rating-1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">'+
        '<circle cx="256" cy="256" r="256" fill="#ffd93b" />'+
        '<path d="M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z" fill="#f4c534" />'+
        '<path d="M328.4 428a92.8 92.8 0 0 0-145-.1 6.8 6.8 0 0 1-12-5.8 86.6 86.6 0 0 1 84.5-69 86.6 86.6 0 0 1 84.7 69.8c1.3 6.9-7.7 10.6-12.2 5.1z" fill="#3e4347" />'+
        '<path d="M269.2 222.3c5.3 62.8 52 113.9 104.8 113.9 52.3 0 90.8-51.1 85.6-113.9-2-25-10.8-47.9-23.7-66.7-4.1-6.1-12.2-8-18.5-4.2a111.8 111.8 0 0 1-60.1 16.2c-22.8 0-42.1-5.6-57.8-14.8-6.8-4-15.4-1.5-18.9 5.4-9 18.2-13.2 40.3-11.4 64.1z" fill="#f4c534" />' +
        '<path d="M357 189.5c25.8 0 47-7.1 63.7-18.7 10 14.6 17 32.1 18.7 51.6 4 49.6-26.1 89.7-67.5 89.7-41.6 0-78.4-40.1-82.5-89.7A95 95 0 0 1 298 174c16 9.7 35.6 15.5 59 15.5z" fill="#fff" />' +
        '<path d="M396.2 246.1a38.5 38.5 0 0 1-38.7 38.6 38.5 38.5 0 0 1-38.6-38.6 38.6 38.6 0 1 1 77.3 0z" fill="#3e4347" />' +
        '<path d="M380.4 241.1c-3.2 3.2-9.9 1.7-14.9-3.2-4.8-4.8-6.2-11.5-3-14.7 3.3-3.4 10-2 14.9 2.9 4.9 5 6.4 11.7 3 15z" fill="#fff" />' +
        '<path d="M242.8 222.3c-5.3 62.8-52 113.9-104.8 113.9-52.3 0-90.8-51.1-85.6-113.9 2-25 10.8-47.9 23.7-66.7 4.1-6.1 12.2-8 18.5-4.2 16.2 10.1 36.2 16.2 60.1 16.2 22.8 0 42.1-5.6 57.8-14.8 6.8-4 15.4-1.5 18.9 5.4 9 18.2 13.2 40.3 11.4 64.1z" fill="#f4c534" />' +
        '<path d="M155 189.5c-25.8 0-47-7.1-63.7-18.7-10 14.6-17 32.1-18.7 51.6-4 49.6 26.1 89.7 67.5 89.7 41.6 0 78.4-40.1 82.5-89.7A95 95 0 0 0 214 174c-16 9.7-35.6 15.5-59 15.5z" fill="#fff" />' +
        '<path d="M115.8 246.1a38.5 38.5 0 0 0 38.7 38.6 38.5 38.5 0 0 0 38.6-38.6 38.6 38.6 0 1 0-77.3 0z" fill="#3e4347" />' +
        '<path d="M131.6 241.1c3.2 3.2 9.9 1.7 14.9-3.2 4.8-4.8 6.2-11.5 3-14.7-3.3-3.4-10-2-14.9 2.9-4.9 5-6.4 11.7-3 15z" fill="#fff" />' +
        '</svg>' +
        '<svg class="rating-2" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">' +
        '<circle cx="256" cy="256" r="256" fill="#ffd93b" />' +
        '<path d="M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z" fill="#f4c534" />' +
        '<path d="M336.6 403.2c-6.5 8-16 10-25.5 5.2a117.6 117.6 0 0 0-110.2 0c-9.4 4.9-19 3.3-25.6-4.6-6.5-7.7-4.7-21.1 8.4-28 45.1-24 99.5-24 144.6 0 13 7 14.8 19.7 8.3 27.4z" fill="#3e4347" />' +
        '<path d="M276.6 244.3a79.3 79.3 0 1 1 158.8 0 79.5 79.5 0 1 1-158.8 0z" fill="#fff" />' +
        '<circle cx="340" cy="260.4" r="36.2" fill="#3e4347" />' +
        '<g fill="#fff">' +
        '<ellipse transform="rotate(-135 326.4 246.6)" cx="326.4" cy="246.6" rx="6.5" ry="10" />' +
        '<path d="M231.9 244.3a79.3 79.3 0 1 0-158.8 0 79.5 79.5 0 1 0 158.8 0z" />' +
        '</g>' +
        '<circle cx="168.5" cy="260.4" r="36.2" fill="#3e4347" />' +
        '<ellipse transform="rotate(-135 182.1 246.7)" cx="182.1" cy="246.7" rx="10" ry="6.5" fill="#fff" />' +
        '</svg>' +
        '<svg class="rating-3" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">' +
        '<circle cx="256" cy="256" r="256" fill="#ffd93b" />' +
        '<path d="M407.7 352.8a163.9 163.9 0 0 1-303.5 0c-2.3-5.5 1.5-12 7.5-13.2a780.8 780.8 0 0 1 288.4 0c6 1.2 9.9 7.7 7.6 13.2z" fill="#3e4347" />' +
        '<path d="M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z" fill="#f4c534" />' +
        '<g fill="#fff">' +
        '<path d="M115.3 339c18.2 29.6 75.1 32.8 143.1 32.8 67.1 0 124.2-3.2 143.2-31.6l-1.5-.6a780.6 780.6 0 0 0-284.8-.6z" />' +
        '<ellipse cx="356.4" cy="205.3" rx="81.1" ry="81" />' +
        '</g>' +
        '<ellipse cx="356.4" cy="205.3" rx="44.2" ry="44.2" fill="#3e4347" />' +
        '<g fill="#fff">' +
        '<ellipse transform="scale(-1) rotate(45 454 -906)" cx="375.3" cy="188.1" rx="12" ry="8.1" />' +
        '<ellipse cx="155.6" cy="205.3" rx="81.1" ry="81" />' +
        '</g>' +
        '<ellipse cx="155.6" cy="205.3" rx="44.2" ry="44.2" fill="#3e4347" />' +
        '<ellipse transform="scale(-1) rotate(45 454 -421.3)" cx="174.5" cy="188" rx="12" ry="8.1" fill="#fff" />' +
        '</svg>' +
        '<svg class="rating-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">' +
        '<circle cx="256" cy="256" r="256" fill="#ffd93b" />' +
        '<path d="M512 256A256 256 0 0 1 56.7 416.7a256 256 0 0 0 360-360c58.1 47 95.3 118.8 95.3 199.3z" fill="#f4c534" />' +
        '<path d="M232.3 201.3c0 49.2-74.3 94.2-74.3 94.2s-74.4-45-74.4-94.2a38 38 0 0 1 74.4-11.1 38 38 0 0 1 74.3 11.1z" fill="#e24b4b" />' +
        '<path d="M96.1 173.3a37.7 37.7 0 0 0-12.4 28c0 49.2 74.3 94.2 74.3 94.2C80.2 229.8 95.6 175.2 96 173.3z" fill="#d03f3f" />' +
        '<path d="M215.2 200c-3.6 3-9.8 1-13.8-4.1-4.2-5.2-4.6-11.5-1.2-14.1 3.6-2.8 9.7-.7 13.9 4.4 4 5.2 4.6 11.4 1.1 13.8z" fill="#fff" />' +
        '<path d="M428.4 201.3c0 49.2-74.4 94.2-74.4 94.2s-74.3-45-74.3-94.2a38 38 0 0 1 74.4-11.1 38 38 0 0 1 74.3 11.1z" fill="#e24b4b" />' +
        '<path d="M292.2 173.3a37.7 37.7 0 0 0-12.4 28c0 49.2 74.3 94.2 74.3 94.2-77.8-65.7-62.4-120.3-61.9-122.2z" fill="#d03f3f" />' +
        '<path d="M411.3 200c-3.6 3-9.8 1-13.8-4.1-4.2-5.2-4.6-11.5-1.2-14.1 3.6-2.8 9.7-.7 13.9 4.4 4 5.2 4.6 11.4 1.1 13.8z" fill="#fff" />' +
        '<path d="M381.7 374.1c-30.2 35.9-75.3 64.4-125.7 64.4s-95.4-28.5-125.8-64.2a17.6 17.6 0 0 1 16.5-28.7 627.7 627.7 0 0 0 218.7-.1c16.2-2.7 27 16.1 16.3 28.6z"fill="#3e4347" />' +
        '<path d="M256 438.5c25.7 0 50-7.5 71.7-19.5-9-33.7-40.7-43.3-62.6-31.7-29.7 15.8-62.8-4.7-75.6 34.3 20.3 10.4 42.8 17 66.5 17z" fill="#e24b4b" />' +
        '</svg>' +
        '<svg class="rating-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512">' +
        '<g fill="#ffd93b">' +
        '<circle cx="256" cy="256" r="256" />' +
        '<path d="M512 256A256 256 0 0 1 56.8 416.7a256 256 0 0 0 360-360c58 47 95.2 118.8 95.2 199.3z" />' +
        '</g>' +
        '<path d="M512 99.4v165.1c0 11-8.9 19.9-19.7 19.9h-187c-13 0-23.5-10.5-23.5-23.5v-21.3c0-12.9-8.9-24.8-21.6-26.7-16.2-2.5-30 10-30 25.5V261c0 13-10.5 23.5-23.5 23.5h-187A19.7 19.7 0 0 1 0 264.7V99.4c0-10.9 8.8-19.7 19.7-19.7h472.6c10.8 0 19.7 8.7 19.7 19.7z" fill="#e9eff4" />' +
        '<path d="M204.6 138v88.2a23 23 0 0 1-23 23H58.2a23 23 0 0 1-23-23v-88.3a23 23 0 0 1 23-23h123.4a23 23 0 0 1 23 23z" fill="#45cbea" />' +
        '<path d="M476.9 138v88.2a23 23 0 0 1-23 23H330.3a23 23 0 0 1-23-23v-88.3a23 23 0 0 1 23-23h123.4a23 23 0 0 1 23 23z" fill="#e84d88" />' +
        '<g fill="#38c0dc">' +
        '<path d="M95.2 114.9l-60 60v15.2l75.2-75.2zM123.3 114.9L35.1 203v23.2c0 1.8.3 3.7.7 5.4l116.8-116.7h-29.3z" />' +
        '</g>' +
        '<g fill="#d23f77">' +
        '<path d="M373.3 114.9l-66 66V196l81.3-81.2zM401.5 114.9l-94.1 94v17.3c0 3.5.8 6.8 2.2 9.8l121.1-121.1h-29.2z" />' +
        '</g>' +
        '<path d="M329.5 395.2c0 44.7-33 81-73.4 81-40.7 0-73.5-36.3-73.5-81s32.8-81 73.5-81c40.5 0 73.4 36.3 73.4 81z" fill="#3e4347" />' +
        '<path d="M256 476.2a70 70 0 0 0 53.3-25.5 34.6 34.6 0 0 0-58-25 34.4 34.4 0 0 0-47.8 26 69.9 69.9 0 0 0 52.6 24.5z" fill="#e24b4b" />' +
        '<path d="M290.3 434.8c-1 3.4-5.8 5.2-11 3.9s-8.4-5.1-7.4-8.7c.8-3.3 5.7-5 10.7-3.8 5.1 1.4 8.5 5.3 7.7 8.6z" fill="#fff" opacity=".2" />' +
        '</svg>' +
        '</div>' +
        '</div>' +
        '</div>' +
        '</div>' +
        '</div>';

      var div = sfInlineWrapper.querySelector("#servicechat-parts-inner");
      div.insertAdjacentHTML("beforeend", html);

      sfInlineWrapper.querySelector("#serviceform-rating-5").addEventListener("click", displayRate5);

      function displayRate5() {
        sC.stats.rating = 5;
        sC.postStatistics();
      }

      sfInlineWrapper.querySelector("#serviceform-rating-4").addEventListener("click", displayRate4);

      function displayRate4() {
        sC.stats.rating = 4;
        sC.postStatistics();
      }

      sfInlineWrapper.querySelector("#serviceform-rating-3").addEventListener("click", displayRate3);

      function displayRate3() {
        sC.stats.rating = 3;
        sC.postStatistics();
      }

      sfInlineWrapper.querySelector("#serviceform-rating-2").addEventListener("click", displayRate2);

      function displayRate2() {
        sC.stats.rating = 2;
        sC.postStatistics();
      }

      sfInlineWrapper.querySelector("#serviceform-rating-1").addEventListener("click", displayRate1);

      function displayRate1() {
        sC.stats.rating = 1;
        sC.postStatistics();
      }
    }

    if (sC.sfDevModeOff) {
      sC.postJsonSubmit();
    }

    if (typeof cH.repeatQuestions !== 'undefined') {
      if (cH.repeatQuestions === '1') {
        sC.addAdminAnswer(cH.repeatQuestionsText);
        if (typeof cH.chatPushSettingsQuestion !== 'undefined') {
          sC.toggleServiceChat('restart', sC.getPageFromId(cH.chatPushSettingsQuestion));
        }
        else {
          sC.toggleServiceChat('restart', 1);
        }
      }
    }
  },
  toggleServiceChat: function (type, question) {
    var cH = sC.options.cH;

    if (type === 'conversation') {
      sC.options.serviceChatAnswers.page = question + 1;
    }
    if (type === 'restart') {

    }
    else {
      var sfPush = sfInlineWrapper.querySelector('.sf-chat-push');
      if (sfPush) {
        sC.sfRemoveElement(sfPush);
      }

      var oneNew = sfInlineWrapper.querySelector('.sf-chat-one-new');
      if (oneNew) {
        sC.sfRemoveElement(oneNew);
      }
      var toggle = document.getElementById('servicechat-toggle');
      var e = sfInlineWrapper.querySelector('#service-chat-initiated');
      if (e.style.display === 'block') {
        sC.options.serviceChatAnswers.open = 0;
        sC.options.serviceChatAnswers.answers.actions.push('closed_servicechat');
        sC.postStatistics();
        if (type !== 'conversation') {
          e.style.opacity = 0;

          setTimeout(function () {
            e.style.opacity = '0';
            e.style.display = 'none';
            toggle.classList.remove('open');
          }, 500);
        }
      } else {
        sC.options.serviceChatAnswers.open = 1;
        sC.options.serviceChatAnswers.answers.actions.push('opened_servicechat');
        e.style.display = 'block';
        sfInlineWrapper.style.display = 'block';
        toggle.classList.add('open');
        setTimeout(function () {
          e.style.opacity = '1';
        }, 50);
      }
      if (sC.options.serviceChatAnswers.page === 0) {
        if (type !== 'conversation' && type !== 'just') {
          sC.startQuestions(type);
        }
      }
    }

  },
  rebuildServiceChat: function(){
    sC.destroyServiceChat();
    sC.init();
  },
  refreshServiceChat: function () {
    sC.rebuildServiceChat();
    sC.toggleServiceChat('normal', 0);
  },
  initiateAdminOvertake: function () {

  },
  initiateLiveChat: function () {
    sC.newStatistics('livechat','');

    var livechatAgents = sC.options.cH.questions[sC.options.serviceChatAnswers.page - 1].livechatAgents;
    if (typeof livechatAgents !== 'undefined' && livechatAgents !== '') {
      var olderOptions = sfInlineWrapper.querySelector('.servicechat-admin-option');
      if (olderOptions) {
        sC.sfRemoveElement(olderOptions);
      }
      sC.postStatistics();

      var page = sC.options.serviceChatAnswers.page - 1;

      if (sC.sfDevModeOff) {
        sC.sendNotifyLiveChat();
      }
    }
    else {
      alert('You need to set a live chat agent.');
      sC.nextQuestion();
    }
  },
  playAudio: function (type){
    if(type === 'new-message') {
      var audio = new Audio('https://app.serviceform.com/livechat/me-too.mp3');
      audio.play();
    } else if(type === 'new-discussion'){
      var audio = new Audio('https://app.serviceform.com/livechat/soft-bells.mp3');
      audio.play();
    }
  },
  sendNotifyLiveChat: function () {
    var cH = sC.options.cH;

    var page = sC.options.serviceChatAnswers.page - 1;
    var cid = sC.options.serviceChatAnswers.cid;

    var agents = sC.options.cH.questions[page].livechatAgents;

    var conversationSetup = {
      "aid": agents,
      "cid": cid,
      "uid": sC.options.cH.uid,
      "website": document.location.href
    }

    var dev = 0;
    if (window.location.href.indexOf("dev-servicehire") != -1 || window.location.href.indexOf("dev.netstory") != -1 || window.location.href.indexOf("test-servicehire") != -1) {
      dev = 1;
    }

    var url = "https://app.serviceform.com/conversations/send-live-notification";

    if (cH.whitelabel === 'slt') {
      url = "https://bizchat.slt.lk/conversations/send-live-notification";
    } else if (cH.whitelabel === 'addbot') {
      url = "https://app.addbot.io/conversations/send-live-notification";
    } else if (cH.whitelabel === 'netstory') {
      url = "https://netstory.io/conversations/send-live-notification";
    }

    if (dev) {
      var url = "/conversations/send-live-notification";
    }

    var data = JSON.stringify(conversationSetup);
    var xhr = new XMLHttpRequest();

    xhr.open("POST", url, true);
    xhr.setRequestHeader("Content-type", "application/x-www-form-urlencoded; charset=UTF-8");
    xhr.send(data);

    xhr.onreadystatechange = function () {
      if (xhr.readyState === 4 && xhr.status === 200) {
        var cH = sC.options.cH;
        var json = JSON.parse(xhr.responseText);
        sC.options.serviceChatAnswers.country = json.country;
        sC.options.serviceChatAnswers.ip = json.ip;
        sC.postStatistics();

        if(json.count > 0) {
          setTimeout(function () {
            if(json > 1){
              if(typeof cH.livechatAskEmail !== 'undefined' && cH.livechatAskEmail === "1"){
                sC.addAdminAnswer(sC.gT('While waiting, could I get your email in case we get disconnected?'));
              }
            } else {
              if(typeof cH.livechatAskEmail !== 'undefined' && cH.livechatAskEmail === "1"){
                sC.addAdminAnswer(sC.gT('While waiting, could I get your email in case we get disconnected?'));
              }
            }

            sC.sfChatSetCookie('sf-livechat-session', sC.options.serviceChatAnswers.uid + '_' + sC.options.serviceChatAnswers.cid, 2);

            sC.startLiveChatPoll();
          }, 1000);
        } else {
          setTimeout(function () {
            sC.newStatistics('livechatNa','');
            var page = sC.options.serviceChatAnswers.page - 1;
            sC.addAdminAnswer(sC.gT('No live chat agents available right now')+'.');
            var defaultQuestion = 0;
            if (typeof cH.questions[page].jump !== 'undefined') {
              defaultQuestion = cH.questions[page].jump;
            }
            setTimeout(function () {
              if(page === defaultQuestion) {
                sC.nextQuestion();
              } else {
                sC.options.serviceChatAnswers.page = sC.getPageFromId(defaultQuestion);
                sC.options.serviceChatAnswers.jump = '';
                sC.nextQuestion();
              }
            }, 1000);
          }, 1000);
        }
      }
    }

  },
  stopLiveChatPoll: function () {
    clearInterval(sC.startLiveChatPoll.serviceChatLoop);
  },
  loadLastSession: function(){
    loadScript2('https://www.gstatic.com/firebasejs/7.6.1/firebase-app.js',loadFirebase);

    function loadFirebase(){
      loadScript2('https://www.gstatic.com/firebasejs/7.6.1/firebase-database.js',initTracking);
    }

    function initTracking() {
      var we = "AIzaSyC";
      var he = "261015";


      firebase.initializeApp({
        apiKey: we + "-vEDTDf7ET3yY8jUFjgvBizTDQYRQi40",
        authDomain: "ecstatic-fiber-"+he+".firebaseapp.com",
        projectId: "ecstatic-fiber-"+he,
        databaseURL: "https://ecstatic-fiber-261015.firebaseio.com/"
      });

      var cH = sC.options.cH;
      $a = sC.options.serviceChatAnswers.website;
      if ($a.indexOf('edit') !== -1) {
      } else {
        var livechatSession = sC.sfChatGetCookie('sf-livechat-session');
        var splitUid = livechatSession.split('_')[0];
        var livechatCid = livechatSession.split('_')[1];

        if (typeof livechatSession !== 'undefined' && livechatSession !== '' && splitUid === sC.options.cH.uid) {
          var pushes = sfInlineWrapper.querySelector('.sf-chat-push');
          if(pushes){
            sC.sfRemoveElement(pushes);
          }

          sC.options.serviceChatAnswers.cid = livechatCid;
          sC.options.serviceChatAnswers.live = 1;
          setTimeout(function () {
            sC.startLiveChatPoll();
            loadNow();
          }, 1000);
        } else {
          if (cH.loadLastSessions === '1') {
            var session = sC.options.serviceChatAnswers.session;

            firebase.database().ref('/status/'+sC.options.serviceChatAnswers.uid+'/' + session).once('value').then(function (snapshot) {
              var cid = snapshot.val();
              if (cid === null) {
                loadNow();
                return;
              }
              else {
                var cid = snapshot.val().cid;
                var nid = snapshot.val().nid;
                if (nid === sC.options.serviceChatAnswers.nid) {
                  sC.options.serviceChatAnswers.cid = cid;
                  sC.loadLastData(cid);
                  setTimeout(function () {
                    loadNow();
                  }, 2000);
                }
              }
            });

          }
          else {
            loadNow();
          }
        }
      }

      function loadNow() {
        var userStatusDatabaseRef = firebase.database().ref('/status/'+sC.options.serviceChatAnswers.uid+'/' + sC.options.serviceChatAnswers.session);

        var isOfflineForDatabase = {
          state: 'offline',
          last_changed: firebase.database.ServerValue.TIMESTAMP,
          session: sC.options.serviceChatAnswers.session,
          cid: sC.options.serviceChatAnswers.cid,
          location: document.location.href,
          nid: sC.options.serviceChatAnswers.nid,
          uid: sC.options.serviceChatAnswers.uid
        };

        var isOnlineForDatabase = {
          state: 'online',
          last_changed: firebase.database.ServerValue.TIMESTAMP,
          session: sC.options.serviceChatAnswers.session,
          cid: sC.options.serviceChatAnswers.cid,
          location: document.location.href,
          nid: sC.options.serviceChatAnswers.nid,
          uid: sC.options.serviceChatAnswers.uid
        };

        firebase.database().ref('.info/connected').on('value', function (snapshot) {
          if (snapshot.val() == false) {
            return;
          };

          userStatusDatabaseRef.onDisconnect().set(isOfflineForDatabase).then(function () {
            userStatusDatabaseRef.set(isOnlineForDatabase);
          });
        });
      }
    }
  },
  startLiveChatPoll: function () {

    if(typeof firebase === 'undefined') {
      loadScript2('https://www.gstatic.com/firebasejs/7.6.1/firebase-app.js', loadSecondScript);
    } else {
      loadSecondScript();
    }

    function loadSecondScript(){
      if(typeof firebase.firestore === 'undefined'){
        loadScript2('https://www.gstatic.com/firebasejs/7.6.1/firebase-firestore.js',initPoll);
      } else {
        initPoll();
      }
    };

    function initPoll(){

      var we = "AIzaSyC";

      if (!firebase.apps.length) {
        firebase.initializeApp({
          apiKey: we + "-vEDTDf7ET3yY8jUFjgvBizTDQYRQi40",
          authDomain: "ecstatic-fiber-261015.firebaseapp.com",
          projectId: "ecstatic-fiber-261015",
        });
      }

      var db = firebase.firestore();

      var cid = sC.options.serviceChatAnswers.cid;
      var nid = sC.options.cH.nid;

      var usersLive = db.collection('users').doc(cid);
      usersLive.set({
        online: 1,
        live: 1
      }, {
        merge: true
      }).then(function (ref) {
        window.unsubscribe = db.collection("users").doc(cid).onSnapshot(function (doc) {
          window.currentData = doc.data();
          var json = doc.data();
          sC.options.serviceChatAnswers = doc.data();
          var e = sfInlineWrapper.querySelector('#service-chat-initiated');

          if (e.style.display !== 'block') {
            if (sC.options.serviceChatAnswers.open === 1) {
              sC.toggleServiceChat('just', '');
            }
          }

          var messageCount = json.answers.admin.length;

          if (typeof window.messageCounts === 'undefined') {
            window.messageCounts = messageCount;
          } else {
            if (window.messageCounts !== messageCount) {
              window.messageCounts = messageCount;
              sC.playAudio('new-message');
            }
          }

          sC.processPollResult(doc.data());
        });
      });
    }
  },
  processPollResult: function (response) {
    var newData = response;
    if (newData.adminLive === 1) {
      sC.addHumanJoinedText();
    }

    sC.options.serviceChatAnswers = newData;
    sC.processChatHtml(response);

    var olderOptions = sfInlineWrapper.querySelector('.servicechat-admin-option');
    if (olderOptions) {
      sC.sfRemoveElement(olderOptions);
    }

  },
  processChatHtml: function(json){
    var cH = sC.options.cH;

    var adminAnswerImage = cH.serviceChatImage;
    if (typeof window.sfDynamicServiceChatImage !== 'undefined') {
      adminAnswerImage = window.sfDynamicServiceChatImage;
    }

    function linkify(inputText) {
      var replacedText, replacePattern1, replacePattern2, replacePattern3;

      //URLs starting with http://, https://, or ftp://
      replacePattern1 = /(\b(https?|ftp):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
      replacedText = inputText.replace(replacePattern1, '<a href="$1" target="_blank">$1</a>');

      //URLs starting with "www." (without // before it, or it'd re-link the ones done above).
      replacePattern2 = /(^|[^\/])(www\.[\S]+(\b|$))/gim;
      replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

      //Change email addresses to mailto:: links.
      replacePattern3 = /(([a-zA-Z0-9\-\_\.])+@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
      replacedText = replacedText.replace(replacePattern3, '<a href="mailto:$1">$1</a>');

      return replacedText;
    }

    if (typeof adminAnswerImage === 'undefined') {
      adminAnswerImage = 'https://app.serviceform.com/servicechat.svg';
    }

    var html = '';
    var answers = json.answers.generic;
    for (var i = 0; i < answers.length; i++) {

      if (answers[i].user === 0) {
        if(typeof answers[i].type !== 'undefined' && answers[i].type === 'adminJoined'){
          html = html + '<div class="joined-chat">'+answers[i].agentName+' ' + sC.gT('has joined the chat') + '.</div>';
          if(sC.options.serviceChatAnswers.livechatJoinedLogged !== 1){
            sC.options.serviceChatAnswers.livechatJoinedLogged = 1;
            sC.stats.agent = answers[i].agentId;
            sC.newStatistics('livechatJoined','');
          }

        } else {

          var image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+adminAnswerImage+'">';

          if(typeof answers[i].agentImage !== 'undefined'){
            image = '<img class="sc-admin-image" style="background-color:' + cH.color + ';" src="'+answers[i].agentImage+'">';
          }

          var wrap = '<div class="sc-admin-question-wrap">' +
            image +
            '<div class="servicechat-admin-question sc-question">' + linkify(answers[i].text) + '</div>' +
            '</div>';
          html = html + wrap;
        }
      }
      else {
        var wrap = '<div class="servicechat-user-selected sc-question" style="background-color:' + cH.color1 + '">' + linkify(answers[i].text) + ' </div>';
        html = html + wrap;
      }
      var inner = sfInlineWrapper.querySelector('#servicechat-parts-inner');
      inner.innerHTML = html;
    }

    sC.scrollToBottomOfChat('force');
  },
  addHumanJoinedText: function () {
    var oversight = sfInlineWrapper.querySelector('.sc-oversight-wrap');
    if (!oversight) {
      var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
      var html = '<div class="sc-oversight-wrap">An agent joined the conversation.</div><div class="backend"><div class="sf-hidden">https://app.serviceform.com/livechat/backend.html?cid=' + sC.options.serviceChatAnswers.cid + '</div></div>';
      var div = sfInlineWrapper.querySelector('#servicechat-parts-inner');
      div.innerHTML += html;
    }
  }
}

function loadScript2(url, callback) {
  if(!document.getElementById(url)) {
    var scriptTag = document.createElement('script');
    scriptTag.setAttribute('type', 'text/javascript');
    scriptTag.setAttribute('src', url);
    scriptTag.setAttribute('id', url);
    scriptTag.async = true;

    if (scriptTag.readyState) {
      scriptTag.onreadystatechange = function () {
        if (this.readyState === 'complete' || this.readyState === 'loaded') {
          callback();
        }
      };
    } else {
      scriptTag.onload = callback;
    }

    (document.getElementsByTagName('head')[0] || document.documentElement).appendChild(scriptTag);
  } else {
    callback();
  }
}

var isInViewport = function (elem) {
  var bounding = elem.getBoundingClientRect();
  return (
    bounding.top >= 0 &&
    bounding.left >= 0 &&
    bounding.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
    bounding.right <= (window.innerWidth || document.documentElement.clientWidth)
  );
};

function loadCSSIfNotAlreadyLoadedForSomeReason() {
  var ss = document.styleSheets;

  var dev = 0;
  if (window.location.href.indexOf("dev-servicehire") != -1 || window.location.href.indexOf("dev.netstory") != -1 ||  window.location.href.indexOf("test-servicehire") != -1) {
    dev = 1;
  }

  var todayDate = new Date().toISOString().slice(0, 10);

  for (var i = 0, max = ss.length; i < max; i++) {
    if (dev) {
      if (ss[i].href == "/servicechat/servicechat_v4.css?1222"+todayDate) {
        return;
      }
    }
    else {
      if (ss[i].href == "https://app.serviceform.com/servicechat/servicechat_v4.css?12"+todayDate) {
        return;
      }
    }
  }

  var link = document.createElement("link");
  link.rel = "stylesheet";

  if (dev) {
    link.href = "/servicechat/servicechat_v4.css?121"+todayDate;
  }
  else {
    link.href = "https://app.serviceform.com/servicechat/servicechat_v4.css?1232"+todayDate;
  }

  document.getElementsByTagName("head")[0].appendChild(link);
}

function dataLayerStart(sC) {
  sC.options.serviceChatAnswers.interaction = 1;

  if (window.dataLayerStartedNow !== '1') {
    window.dataLayer = window.dataLayer || [];

    window.dataLayer.push({
      'event': 'serviceform',
      'chatProgress': 'chat start'
    });

    if (typeof ga === 'function') {
      if ("ga" in window) {
        if(ga.getAll) {
          tracker = ga.getAll()[0];
          if (tracker) {
            tracker.send("event", "Serviceform", "Chat started");
          }
        }
      }
    } else if(typeof gtag !== 'undefined') {
      gtag('event', 'Chat started', {
        'app_name': 'Serviceform',
      });
    }

    if (typeof window.sfGoogleDataClickId !== 'undefined') {
      var callback = function () {
        if (typeof(url) != 'undefined') {
          window.location = url;
        }
      };

      if(typeof gtag !== 'undefined') {
        gtag('event', 'conversion', {
          'send_to': window.sfGoogleDataClickId,
          'event_callback': callback
        });
      }
    }

    window.dataLayerStartedNow = '1';
  }
}


function dataLayerEnd() {
  window.dataLayer = window.dataLayer || [];

  window.dataLayer.push({
    'event': 'serviceform',
    'chatProgress': 'chat complete'
  });

  if (typeof ga === 'function') {
    if ("ga" in window) {
      if(ga.getAll) {
        tracker = ga.getAll()[0];
        if (tracker) {
          tracker.send("event", "Serviceform", "Chat complete");
        }
      }
    }
  } else if(typeof gtag !== 'undefined') {
    gtag('event', 'Chat complete', {
      'app_name': 'Serviceform',
    });
  }

  if (typeof window.sfGoogleDataConversionId !== 'undefined') {
    if (typeof gtag === 'function') {
      var callback = function () {
        if (typeof(url) != 'undefined') {
          window.location = url;
        }
      };

      if(typeof gtag !== 'undefined') {
        gtag('event', 'conversion', {
          'send_to': window.sfGoogleDataConversionId,
          'event_callback': callback
        });
      }
    }
  }
}

function sfWiggle(element) {
  sfInlineWrapper.querySelector(element).classList.add('sf-milk-shake');
  setTimeout(function () {
    sfInlineWrapper.querySelector(element).classList.remove('sf-milk-shake');
  }, 500);
}

function validatePhone(value) {
  value = value.replace(/\s/g, '');
  var regex = /^.{5,}[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\./0-9]*$/im;
  if (regex.test(value)) {
    return true;
  }
  else {
    return false;
  }
}

function validateEmail(email) {
  var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(String(email).toLowerCase());
}

function hideFooter() {
  document.getElementById('servicechat').classList.add('hidden-footer-mobile');
}

function showFooter() {
  document.getElementById('servicechat').classList.remove('hidden-footer-mobile');
}


function lightOrDark(color) {

  // Variables for red, green, blue values
  var r, g, b, hsp;

  // Check the format of the color, HEX or RGB?
  if (color.match(/^rgb/)) {

    // If HEX --> store the red, green, blue values in separate variables
    color = color.match(/^rgba?\((\d+),\s*(\d+),\s*(\d+)(?:,\s*(\d+(?:\.\d+)?))?\)$/);

    r = color[1];
    g = color[2];
    b = color[3];
  }
  else {

    // If RGB --> Convert it to HEX: http://gist.github.com/983661
    color = +("0x" + color.slice(1).replace(
      color.length < 5 && /./g, '$&$&'));

    r = color >> 16;
    g = color >> 8 & 255;
    b = color & 255;
  }

  // HSP (Highly Sensitive Poo) equation from http://alienryderflex.com/hsp.html
  hsp = Math.sqrt(
    0.299 * (r * r) +
    0.587 * (g * g) +
    0.114 * (b * b)
  );

  // Using the HSP value, determine whether the color is light or dark
  if (hsp > 210) {

    return 'light';
  }
  else {

    return 'dark';
  }
}


function generateId(length) {
  var s = '';
  do { s += Math.random().toString(36).substr(2); } while (s.length < length);
  s = s.substr(0, length);

  return s;
}

sC.start({
  fpId: window.fpId,
  selector: window.fpSelector,
  type: window.fpType
});


function sfTrimHtml(answer){
  var html = answer;
  var div = document.createElement("div");
  div.innerHTML = html;
  return(div.innerText);
  return html;
}
